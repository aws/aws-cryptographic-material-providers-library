# Code generated by smithy-python-codegen DO NOT EDIT.

from Wrappers import Option_None, Option_Some
from _dafny import Map, Seq
import aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_keystore.smithy_to_dafny
import aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models
import aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny
import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny
import com_amazonaws_kms.smithygenerated.com_amazonaws_kms.aws_sdk_to_dafny
import module_
from software_amazon_cryptography_materialproviders_internaldafny_types import (
    AesWrappingAlg_ALG__AES128__GCM__IV12__TAG16,
    AesWrappingAlg_ALG__AES192__GCM__IV12__TAG16,
    AesWrappingAlg_ALG__AES256__GCM__IV12__TAG16,
    AlgorithmSuiteId_DBE,
    AlgorithmSuiteId_ESDK,
    AlgorithmSuiteInfo_AlgorithmSuiteInfo as DafnyAlgorithmSuiteInfo,
    CacheType_Default,
    CacheType_MultiThreaded,
    CacheType_No,
    CacheType_SingleThreaded,
    CacheType_StormTracking,
    CommitmentPolicy_DBE,
    CommitmentPolicy_ESDK,
    CreateAwsKmsDiscoveryKeyringInput_CreateAwsKmsDiscoveryKeyringInput as DafnyCreateAwsKmsDiscoveryKeyringInput,
    CreateAwsKmsDiscoveryMultiKeyringInput_CreateAwsKmsDiscoveryMultiKeyringInput as DafnyCreateAwsKmsDiscoveryMultiKeyringInput,
    CreateAwsKmsHierarchicalKeyringInput_CreateAwsKmsHierarchicalKeyringInput as DafnyCreateAwsKmsHierarchicalKeyringInput,
    CreateAwsKmsKeyringInput_CreateAwsKmsKeyringInput as DafnyCreateAwsKmsKeyringInput,
    CreateAwsKmsMrkDiscoveryKeyringInput_CreateAwsKmsMrkDiscoveryKeyringInput as DafnyCreateAwsKmsMrkDiscoveryKeyringInput,
    CreateAwsKmsMrkDiscoveryMultiKeyringInput_CreateAwsKmsMrkDiscoveryMultiKeyringInput as DafnyCreateAwsKmsMrkDiscoveryMultiKeyringInput,
    CreateAwsKmsMrkKeyringInput_CreateAwsKmsMrkKeyringInput as DafnyCreateAwsKmsMrkKeyringInput,
    CreateAwsKmsMrkMultiKeyringInput_CreateAwsKmsMrkMultiKeyringInput as DafnyCreateAwsKmsMrkMultiKeyringInput,
    CreateAwsKmsMultiKeyringInput_CreateAwsKmsMultiKeyringInput as DafnyCreateAwsKmsMultiKeyringInput,
    CreateAwsKmsRsaKeyringInput_CreateAwsKmsRsaKeyringInput as DafnyCreateAwsKmsRsaKeyringInput,
    CreateCryptographicMaterialsCacheInput_CreateCryptographicMaterialsCacheInput as DafnyCreateCryptographicMaterialsCacheInput,
    CreateDefaultClientSupplierInput_CreateDefaultClientSupplierInput as DafnyCreateDefaultClientSupplierInput,
    CreateDefaultCryptographicMaterialsManagerInput_CreateDefaultCryptographicMaterialsManagerInput as DafnyCreateDefaultCryptographicMaterialsManagerInput,
    CreateMultiKeyringInput_CreateMultiKeyringInput as DafnyCreateMultiKeyringInput,
    CreateRawAesKeyringInput_CreateRawAesKeyringInput as DafnyCreateRawAesKeyringInput,
    CreateRawRsaKeyringInput_CreateRawRsaKeyringInput as DafnyCreateRawRsaKeyringInput,
    CreateRequiredEncryptionContextCMMInput_CreateRequiredEncryptionContextCMMInput as DafnyCreateRequiredEncryptionContextCMMInput,
    DBEAlgorithmSuiteId_ALG__AES__256__GCM__HKDF__SHA512__COMMIT__KEY__ECDSA__P384__SYMSIG__HMAC__SHA384,
    DBEAlgorithmSuiteId_ALG__AES__256__GCM__HKDF__SHA512__COMMIT__KEY__SYMSIG__HMAC__SHA384,
    DBECommitmentPolicy_REQUIRE__ENCRYPT__REQUIRE__DECRYPT,
    DIRECT__KEY__WRAPPING_DIRECT__KEY__WRAPPING as DafnyDIRECT_KEY_WRAPPING,
    DecryptMaterialsInput_DecryptMaterialsInput as DafnyDecryptMaterialsInput,
    DecryptMaterialsOutput_DecryptMaterialsOutput as DafnyDecryptMaterialsOutput,
    DecryptionMaterials_DecryptionMaterials as DafnyDecryptionMaterials,
    DefaultCache_DefaultCache as DafnyDefaultCache,
    DeleteCacheEntryInput_DeleteCacheEntryInput as DafnyDeleteCacheEntryInput,
    DerivationAlgorithm_HKDF,
    DerivationAlgorithm_IDENTITY,
    DerivationAlgorithm_None,
    DiscoveryFilter_DiscoveryFilter as DafnyDiscoveryFilter,
    ECDSA_ECDSA as DafnyECDSA,
    ESDKAlgorithmSuiteId_ALG__AES__128__GCM__IV12__TAG16__HKDF__SHA256,
    ESDKAlgorithmSuiteId_ALG__AES__128__GCM__IV12__TAG16__HKDF__SHA256__ECDSA__P256,
    ESDKAlgorithmSuiteId_ALG__AES__128__GCM__IV12__TAG16__NO__KDF,
    ESDKAlgorithmSuiteId_ALG__AES__192__GCM__IV12__TAG16__HKDF__SHA256,
    ESDKAlgorithmSuiteId_ALG__AES__192__GCM__IV12__TAG16__HKDF__SHA384__ECDSA__P384,
    ESDKAlgorithmSuiteId_ALG__AES__192__GCM__IV12__TAG16__NO__KDF,
    ESDKAlgorithmSuiteId_ALG__AES__256__GCM__HKDF__SHA512__COMMIT__KEY,
    ESDKAlgorithmSuiteId_ALG__AES__256__GCM__HKDF__SHA512__COMMIT__KEY__ECDSA__P384,
    ESDKAlgorithmSuiteId_ALG__AES__256__GCM__IV12__TAG16__HKDF__SHA256,
    ESDKAlgorithmSuiteId_ALG__AES__256__GCM__IV12__TAG16__HKDF__SHA384__ECDSA__P384,
    ESDKAlgorithmSuiteId_ALG__AES__256__GCM__IV12__TAG16__NO__KDF,
    ESDKCommitmentPolicy_FORBID__ENCRYPT__ALLOW__DECRYPT,
    ESDKCommitmentPolicy_REQUIRE__ENCRYPT__ALLOW__DECRYPT,
    ESDKCommitmentPolicy_REQUIRE__ENCRYPT__REQUIRE__DECRYPT,
    EdkWrappingAlgorithm_DIRECT__KEY__WRAPPING,
    EdkWrappingAlgorithm_IntermediateKeyWrapping,
    Encrypt_AES__GCM,
    EncryptedDataKey_EncryptedDataKey as DafnyEncryptedDataKey,
    EncryptionMaterials_EncryptionMaterials as DafnyEncryptionMaterials,
    GetBranchKeyIdInput_GetBranchKeyIdInput as DafnyGetBranchKeyIdInput,
    GetBranchKeyIdOutput_GetBranchKeyIdOutput as DafnyGetBranchKeyIdOutput,
    GetCacheEntryInput_GetCacheEntryInput as DafnyGetCacheEntryInput,
    GetCacheEntryOutput_GetCacheEntryOutput as DafnyGetCacheEntryOutput,
    GetClientInput_GetClientInput as DafnyGetClientInput,
    GetEncryptionMaterialsInput_GetEncryptionMaterialsInput as DafnyGetEncryptionMaterialsInput,
    GetEncryptionMaterialsOutput_GetEncryptionMaterialsOutput as DafnyGetEncryptionMaterialsOutput,
    HKDF_HKDF as DafnyHKDF,
    IDENTITY_IDENTITY as DafnyIDENTITY,
    InitializeDecryptionMaterialsInput_InitializeDecryptionMaterialsInput as DafnyInitializeDecryptionMaterialsInput,
    InitializeEncryptionMaterialsInput_InitializeEncryptionMaterialsInput as DafnyInitializeEncryptionMaterialsInput,
    IntermediateKeyWrapping_IntermediateKeyWrapping as DafnyIntermediateKeyWrapping,
    MaterialProvidersConfig_MaterialProvidersConfig as DafnyMaterialProvidersConfig,
    Materials_BeaconKey,
    Materials_BranchKey,
    Materials_Decryption,
    Materials_Encryption,
    MultiThreadedCache_MultiThreadedCache as DafnyMultiThreadedCache,
    NoCache_NoCache as DafnyNoCache,
    None_None as DafnyNone,
    OnDecryptInput_OnDecryptInput as DafnyOnDecryptInput,
    OnDecryptOutput_OnDecryptOutput as DafnyOnDecryptOutput,
    OnEncryptInput_OnEncryptInput as DafnyOnEncryptInput,
    OnEncryptOutput_OnEncryptOutput as DafnyOnEncryptOutput,
    PaddingScheme_OAEP__SHA1__MGF1,
    PaddingScheme_OAEP__SHA256__MGF1,
    PaddingScheme_OAEP__SHA384__MGF1,
    PaddingScheme_OAEP__SHA512__MGF1,
    PaddingScheme_PKCS1,
    PutCacheEntryInput_PutCacheEntryInput as DafnyPutCacheEntryInput,
    SignatureAlgorithm_ECDSA,
    SignatureAlgorithm_None,
    SingleThreadedCache_SingleThreadedCache as DafnySingleThreadedCache,
    StormTrackingCache_StormTrackingCache as DafnyStormTrackingCache,
    SymmetricSignatureAlgorithm_HMAC,
    SymmetricSignatureAlgorithm_None,
    UpdateUsageMetadataInput_UpdateUsageMetadataInput as DafnyUpdateUsageMetadataInput,
    ValidDecryptionMaterialsTransitionInput_ValidDecryptionMaterialsTransitionInput as DafnyValidDecryptionMaterialsTransitionInput,
    ValidEncryptionMaterialsTransitionInput_ValidEncryptionMaterialsTransitionInput as DafnyValidEncryptionMaterialsTransitionInput,
    ValidateCommitmentPolicyOnDecryptInput_ValidateCommitmentPolicyOnDecryptInput as DafnyValidateCommitmentPolicyOnDecryptInput,
    ValidateCommitmentPolicyOnEncryptInput_ValidateCommitmentPolicyOnEncryptInput as DafnyValidateCommitmentPolicyOnEncryptInput,
)
from software_amazon_cryptography_services_kms_internaldafny_types import IKMSClient


def aws_cryptography_materialproviders_GetBranchKeyIdInput(input):
    return DafnyGetBranchKeyIdInput(
        encryptionContext=Map(
            {
                Seq(list(ord(c) for c in key)): Seq(list(ord(c) for c in value))
                for (key, value) in input.encryption_context.items()
            }
        ),
    )


def aws_cryptography_materialproviders_GetBranchKeyIdOutput(input):
    return DafnyGetBranchKeyIdOutput(
        branchKeyId=Seq(input.branch_key_id),
    )


def aws_cryptography_materialproviders_GetClientInput(input):
    return DafnyGetClientInput(
        region=Seq(input.region),
    )


def aws_cryptography_materialproviders_GetClientOutput(input):
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KmsClientReference(
        input
    )


def aws_cryptography_materialproviders_KmsClientReference(input):
    import software_amazon_cryptography_services_kms_internaldafny

    client = (
        software_amazon_cryptography_services_kms_internaldafny.default__.KMSClient(
            boto_client=input
        )
    )
    client.value.impl = input
    return client.value


def aws_cryptography_materialproviders_PutCacheEntryInput(input):
    return DafnyPutCacheEntryInput(
        identifier=Seq(input.identifier),
        materials=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_Materials(
            input.materials
        ),
        creationTime=input.creation_time,
        expiryTime=input.expiry_time,
        messagesUsed=(
            (Option_Some(input.messages_used))
            if (input.messages_used is not None)
            else (Option_None())
        ),
        bytesUsed=(
            (Option_Some(input.bytes_used))
            if (input.bytes_used is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_Materials(input):
    if isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.MaterialsEncryption,
    ):
        Materials_union_value = Materials_Encryption(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_EncryptionMaterials(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.MaterialsDecryption,
    ):
        Materials_union_value = Materials_Decryption(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DecryptionMaterials(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.MaterialsBranchKey,
    ):
        Materials_union_value = Materials_BranchKey(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_keystore.smithy_to_dafny.aws_cryptography_keystore_BranchKeyMaterials(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.MaterialsBeaconKey,
    ):
        Materials_union_value = Materials_BeaconKey(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_keystore.smithy_to_dafny.aws_cryptography_keystore_BeaconKeyMaterials(
                input.value
            )
        )
    else:
        raise ValueError("No recognized union value in union type: " + str(input))

    return Materials_union_value


def aws_cryptography_materialproviders_EncryptionMaterials(input):
    return DafnyEncryptionMaterials(
        algorithmSuite=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_AlgorithmSuiteInfo(
            input.algorithm_suite
        ),
        encryptionContext=Map(
            {
                Seq(list(ord(c) for c in key)): Seq(list(ord(c) for c in value))
                for (key, value) in input.encryption_context.items()
            }
        ),
        encryptedDataKeys=Seq(
            [
                aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_EncryptedDataKey(
                    list_element
                )
                for list_element in input.encrypted_data_keys
            ]
        ),
        requiredEncryptionContextKeys=Seq(
            [
                Seq(list(ord(c) for c in list_element))
                for list_element in input.required_encryption_context_keys
            ]
        ),
        plaintextDataKey=(
            (Option_Some(Seq(input.plaintext_data_key)))
            if (input.plaintext_data_key is not None)
            else (Option_None())
        ),
        signingKey=(
            (Option_Some(Seq(input.signing_key)))
            if (input.signing_key is not None)
            else (Option_None())
        ),
        symmetricSigningKeys=(
            (
                Option_Some(
                    Seq(
                        [
                            Seq(list_element)
                            for list_element in input.symmetric_signing_keys
                        ]
                    )
                )
            )
            if (input.symmetric_signing_keys is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_DecryptionMaterials(input):
    return DafnyDecryptionMaterials(
        algorithmSuite=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_AlgorithmSuiteInfo(
            input.algorithm_suite
        ),
        encryptionContext=Map(
            {
                Seq(list(ord(c) for c in key)): Seq(list(ord(c) for c in value))
                for (key, value) in input.encryption_context.items()
            }
        ),
        requiredEncryptionContextKeys=Seq(
            [
                Seq(list(ord(c) for c in list_element))
                for list_element in input.required_encryption_context_keys
            ]
        ),
        plaintextDataKey=(
            (Option_Some(Seq(input.plaintext_data_key)))
            if (input.plaintext_data_key is not None)
            else (Option_None())
        ),
        verificationKey=(
            (Option_Some(Seq(input.verification_key)))
            if (input.verification_key is not None)
            else (Option_None())
        ),
        symmetricSigningKey=(
            (Option_Some(Seq(input.symmetric_signing_key)))
            if (input.symmetric_signing_key is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_AlgorithmSuiteInfo(input):
    return DafnyAlgorithmSuiteInfo(
        id=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_AlgorithmSuiteId(
            input.id
        ),
        binaryId=Seq(input.binary_id),
        messageVersion=input.message_version,
        encrypt=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_Encrypt(
            input.encrypt
        ),
        kdf=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DerivationAlgorithm(
            input.kdf
        ),
        commitment=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DerivationAlgorithm(
            input.commitment
        ),
        signature=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_SignatureAlgorithm(
            input.signature
        ),
        symmetricSignature=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_SymmetricSignatureAlgorithm(
            input.symmetric_signature
        ),
        edkWrapping=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_EdkWrappingAlgorithm(
            input.edk_wrapping
        ),
    )


def aws_cryptography_materialproviders_EncryptedDataKey(input):
    return DafnyEncryptedDataKey(
        keyProviderId=Seq(list(ord(c) for c in input.key_provider_id)),
        keyProviderInfo=Seq(input.key_provider_info),
        ciphertext=Seq(input.ciphertext),
    )


def aws_cryptography_materialproviders_AlgorithmSuiteId(input):
    if isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.AlgorithmSuiteIdESDK,
    ):
        AlgorithmSuiteId_union_value = AlgorithmSuiteId_ESDK(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_ESDKAlgorithmSuiteId(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.AlgorithmSuiteIdDBE,
    ):
        AlgorithmSuiteId_union_value = AlgorithmSuiteId_DBE(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DBEAlgorithmSuiteId(
                input.value
            )
        )
    else:
        raise ValueError("No recognized union value in union type: " + str(input))

    return AlgorithmSuiteId_union_value


def aws_cryptography_materialproviders_Encrypt(input):
    if isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.EncryptAES_GCM,
    ):
        Encrypt_union_value = Encrypt_AES__GCM(
            aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_AES_GCM(
                input.value
            )
        )
    else:
        raise ValueError("No recognized union value in union type: " + str(input))

    return Encrypt_union_value


def aws_cryptography_materialproviders_DerivationAlgorithm(input):
    if isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.DerivationAlgorithmHKDF,
    ):
        DerivationAlgorithm_union_value = DerivationAlgorithm_HKDF(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_HKDF(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.DerivationAlgorithmIDENTITY,
    ):
        DerivationAlgorithm_union_value = DerivationAlgorithm_IDENTITY(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_IDENTITY(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.DerivationAlgorithmNone,
    ):
        DerivationAlgorithm_union_value = DerivationAlgorithm_None(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_None(
                input.value
            )
        )
    else:
        raise ValueError("No recognized union value in union type: " + str(input))

    return DerivationAlgorithm_union_value


def aws_cryptography_materialproviders_SignatureAlgorithm(input):
    if isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.SignatureAlgorithmECDSA,
    ):
        SignatureAlgorithm_union_value = SignatureAlgorithm_ECDSA(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_ECDSA(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.SignatureAlgorithmNone,
    ):
        SignatureAlgorithm_union_value = SignatureAlgorithm_None(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_None(
                input.value
            )
        )
    else:
        raise ValueError("No recognized union value in union type: " + str(input))

    return SignatureAlgorithm_union_value


def aws_cryptography_materialproviders_SymmetricSignatureAlgorithm(input):
    if isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.SymmetricSignatureAlgorithmHMAC,
    ):
        SymmetricSignatureAlgorithm_union_value = SymmetricSignatureAlgorithm_HMAC(
            aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_DigestAlgorithm(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.SymmetricSignatureAlgorithmNone,
    ):
        SymmetricSignatureAlgorithm_union_value = SymmetricSignatureAlgorithm_None(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_None(
                input.value
            )
        )
    else:
        raise ValueError("No recognized union value in union type: " + str(input))

    return SymmetricSignatureAlgorithm_union_value


def aws_cryptography_materialproviders_EdkWrappingAlgorithm(input):
    if isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.EdkWrappingAlgorithmDIRECT_KEY_WRAPPING,
    ):
        EdkWrappingAlgorithm_union_value = EdkWrappingAlgorithm_DIRECT__KEY__WRAPPING(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DIRECT_KEY_WRAPPING(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.EdkWrappingAlgorithmIntermediateKeyWrapping,
    ):
        EdkWrappingAlgorithm_union_value = EdkWrappingAlgorithm_IntermediateKeyWrapping(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_IntermediateKeyWrapping(
                input.value
            )
        )
    else:
        raise ValueError("No recognized union value in union type: " + str(input))

    return EdkWrappingAlgorithm_union_value


def aws_cryptography_materialproviders_ESDKAlgorithmSuiteId(input):
    if input == "0x0014":
        return ESDKAlgorithmSuiteId_ALG__AES__128__GCM__IV12__TAG16__NO__KDF()

    elif input == "0x0046":
        return ESDKAlgorithmSuiteId_ALG__AES__192__GCM__IV12__TAG16__NO__KDF()

    elif input == "0x0078":
        return ESDKAlgorithmSuiteId_ALG__AES__256__GCM__IV12__TAG16__NO__KDF()

    elif input == "0x0114":
        return ESDKAlgorithmSuiteId_ALG__AES__128__GCM__IV12__TAG16__HKDF__SHA256()

    elif input == "0x0146":
        return ESDKAlgorithmSuiteId_ALG__AES__192__GCM__IV12__TAG16__HKDF__SHA256()

    elif input == "0x0178":
        return ESDKAlgorithmSuiteId_ALG__AES__256__GCM__IV12__TAG16__HKDF__SHA256()

    elif input == "0x0214":
        return (
            ESDKAlgorithmSuiteId_ALG__AES__128__GCM__IV12__TAG16__HKDF__SHA256__ECDSA__P256()
        )

    elif input == "0x0346":
        return (
            ESDKAlgorithmSuiteId_ALG__AES__192__GCM__IV12__TAG16__HKDF__SHA384__ECDSA__P384()
        )

    elif input == "0x0378":
        return (
            ESDKAlgorithmSuiteId_ALG__AES__256__GCM__IV12__TAG16__HKDF__SHA384__ECDSA__P384()
        )

    elif input == "0x0478":
        return ESDKAlgorithmSuiteId_ALG__AES__256__GCM__HKDF__SHA512__COMMIT__KEY()

    elif input == "0x0578":
        return (
            ESDKAlgorithmSuiteId_ALG__AES__256__GCM__HKDF__SHA512__COMMIT__KEY__ECDSA__P384()
        )

    else:
        raise ValueError(f"No recognized enum value in enum type: {input=}")


def aws_cryptography_materialproviders_DBEAlgorithmSuiteId(input):
    if input == "0x6700":
        return (
            DBEAlgorithmSuiteId_ALG__AES__256__GCM__HKDF__SHA512__COMMIT__KEY__SYMSIG__HMAC__SHA384()
        )

    elif input == "0x6701":
        return (
            DBEAlgorithmSuiteId_ALG__AES__256__GCM__HKDF__SHA512__COMMIT__KEY__ECDSA__P384__SYMSIG__HMAC__SHA384()
        )

    else:
        raise ValueError(f"No recognized enum value in enum type: {input=}")


def aws_cryptography_materialproviders_HKDF(input):
    return DafnyHKDF(
        hmac=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_DigestAlgorithm(
            input.hmac
        ),
        saltLength=input.salt_length,
        inputKeyLength=input.input_key_length,
        outputKeyLength=input.output_key_length,
    )


def aws_cryptography_materialproviders_IDENTITY(input):
    return DafnyIDENTITY()


def aws_cryptography_materialproviders_None(input):
    return DafnyNone()


def aws_cryptography_materialproviders_ECDSA(input):
    return DafnyECDSA(
        curve=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_ECDSASignatureAlgorithm(
            input.curve
        ),
    )


def aws_cryptography_materialproviders_DIRECT_KEY_WRAPPING(input):
    return DafnyDIRECT_KEY_WRAPPING()


def aws_cryptography_materialproviders_IntermediateKeyWrapping(input):
    return DafnyIntermediateKeyWrapping(
        keyEncryptionKeyKdf=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DerivationAlgorithm(
            input.key_encryption_key_kdf
        ),
        macKeyKdf=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DerivationAlgorithm(
            input.mac_key_kdf
        ),
        pdkEncryptAlgorithm=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_Encrypt(
            input.pdk_encrypt_algorithm
        ),
    )


def smithy_api_Unit(input):
    return None


def aws_cryptography_materialproviders_GetCacheEntryInput(input):
    return DafnyGetCacheEntryInput(
        identifier=Seq(input.identifier),
        bytesUsed=(
            (Option_Some(input.bytes_used))
            if (input.bytes_used is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_GetCacheEntryOutput(input):
    return DafnyGetCacheEntryOutput(
        materials=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_Materials(
            input.materials
        ),
        creationTime=input.creation_time,
        expiryTime=input.expiry_time,
        messagesUsed=input.messages_used,
        bytesUsed=input.bytes_used,
    )


def aws_cryptography_materialproviders_UpdateUsageMetadataInput(input):
    return DafnyUpdateUsageMetadataInput(
        identifier=Seq(input.identifier),
        bytesUsed=input.bytes_used,
    )


def aws_cryptography_materialproviders_DeleteCacheEntryInput(input):
    return DafnyDeleteCacheEntryInput(
        identifier=Seq(input.identifier),
    )


def aws_cryptography_materialproviders_GetEncryptionMaterialsInput(input):
    return DafnyGetEncryptionMaterialsInput(
        encryptionContext=Map(
            {
                Seq(list(ord(c) for c in key)): Seq(list(ord(c) for c in value))
                for (key, value) in input.encryption_context.items()
            }
        ),
        commitmentPolicy=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_CommitmentPolicy(
            input.commitment_policy
        ),
        algorithmSuiteId=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_AlgorithmSuiteId(
                        input.algorithm_suite_id
                    )
                )
            )
            if (input.algorithm_suite_id is not None)
            else (Option_None())
        ),
        maxPlaintextLength=(
            (Option_Some(input.max_plaintext_length))
            if (input.max_plaintext_length is not None)
            else (Option_None())
        ),
        requiredEncryptionContextKeys=(
            (
                Option_Some(
                    Seq(
                        [
                            Seq(list(ord(c) for c in list_element))
                            for list_element in input.required_encryption_context_keys
                        ]
                    )
                )
            )
            if (input.required_encryption_context_keys is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_CommitmentPolicy(input):
    if isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.CommitmentPolicyESDK,
    ):
        CommitmentPolicy_union_value = CommitmentPolicy_ESDK(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_ESDKCommitmentPolicy(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.CommitmentPolicyDBE,
    ):
        CommitmentPolicy_union_value = CommitmentPolicy_DBE(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DBECommitmentPolicy(
                input.value
            )
        )
    else:
        raise ValueError("No recognized union value in union type: " + str(input))

    return CommitmentPolicy_union_value


def aws_cryptography_materialproviders_ESDKCommitmentPolicy(input):
    if input == "FORBID_ENCRYPT_ALLOW_DECRYPT":
        return ESDKCommitmentPolicy_FORBID__ENCRYPT__ALLOW__DECRYPT()

    elif input == "REQUIRE_ENCRYPT_ALLOW_DECRYPT":
        return ESDKCommitmentPolicy_REQUIRE__ENCRYPT__ALLOW__DECRYPT()

    elif input == "REQUIRE_ENCRYPT_REQUIRE_DECRYPT":
        return ESDKCommitmentPolicy_REQUIRE__ENCRYPT__REQUIRE__DECRYPT()

    else:
        raise ValueError(f"No recognized enum value in enum type: {input=}")


def aws_cryptography_materialproviders_DBECommitmentPolicy(input):
    if input == "REQUIRE_ENCRYPT_REQUIRE_DECRYPT":
        return DBECommitmentPolicy_REQUIRE__ENCRYPT__REQUIRE__DECRYPT()

    else:
        raise ValueError(f"No recognized enum value in enum type: {input=}")


def aws_cryptography_materialproviders_GetEncryptionMaterialsOutput(input):
    return DafnyGetEncryptionMaterialsOutput(
        encryptionMaterials=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_EncryptionMaterials(
            input.encryption_materials
        ),
    )


def aws_cryptography_materialproviders_DecryptMaterialsInput(input):
    return DafnyDecryptMaterialsInput(
        algorithmSuiteId=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_AlgorithmSuiteId(
            input.algorithm_suite_id
        ),
        commitmentPolicy=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_CommitmentPolicy(
            input.commitment_policy
        ),
        encryptedDataKeys=Seq(
            [
                aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_EncryptedDataKey(
                    list_element
                )
                for list_element in input.encrypted_data_keys
            ]
        ),
        encryptionContext=Map(
            {
                Seq(list(ord(c) for c in key)): Seq(list(ord(c) for c in value))
                for (key, value) in input.encryption_context.items()
            }
        ),
        reproducedEncryptionContext=(
            (
                Option_Some(
                    Map(
                        {
                            Seq(list(ord(c) for c in key)): Seq(
                                list(ord(c) for c in value)
                            )
                            for (
                                key,
                                value,
                            ) in input.reproduced_encryption_context.items()
                        }
                    )
                )
            )
            if (input.reproduced_encryption_context is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_DecryptMaterialsOutput(input):
    return DafnyDecryptMaterialsOutput(
        decryptionMaterials=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DecryptionMaterials(
            input.decryption_materials
        ),
    )


def aws_cryptography_materialproviders_OnEncryptInput(input):
    return DafnyOnEncryptInput(
        materials=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_EncryptionMaterials(
            input.materials
        ),
    )


def aws_cryptography_materialproviders_OnEncryptOutput(input):
    return DafnyOnEncryptOutput(
        materials=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_EncryptionMaterials(
            input.materials
        ),
    )


def aws_cryptography_materialproviders_OnDecryptInput(input):
    return DafnyOnDecryptInput(
        materials=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DecryptionMaterials(
            input.materials
        ),
        encryptedDataKeys=Seq(
            [
                aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_EncryptedDataKey(
                    list_element
                )
                for list_element in input.encrypted_data_keys
            ]
        ),
    )


def aws_cryptography_materialproviders_OnDecryptOutput(input):
    return DafnyOnDecryptOutput(
        materials=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DecryptionMaterials(
            input.materials
        ),
    )


def aws_cryptography_materialproviders_CreateAwsKmsKeyringInput(input):
    return DafnyCreateAwsKmsKeyringInput(
        kmsKeyId=Seq(input.kms_key_id),
        kmsClient=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KmsClientReference(
            input.kms_client
        ),
        grantTokens=(
            (
                Option_Some(
                    Seq([Seq(list_element) for list_element in input.grant_tokens])
                )
            )
            if (input.grant_tokens is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_CreateAwsKmsDiscoveryKeyringInput(input):
    return DafnyCreateAwsKmsDiscoveryKeyringInput(
        kmsClient=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KmsClientReference(
            input.kms_client
        ),
        discoveryFilter=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DiscoveryFilter(
                        input.discovery_filter
                    )
                )
            )
            if (input.discovery_filter is not None)
            else (Option_None())
        ),
        grantTokens=(
            (
                Option_Some(
                    Seq([Seq(list_element) for list_element in input.grant_tokens])
                )
            )
            if (input.grant_tokens is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_DiscoveryFilter(input):
    return DafnyDiscoveryFilter(
        accountIds=Seq([Seq(list_element) for list_element in input.account_ids]),
        partition=Seq(input.partition),
    )


def aws_cryptography_materialproviders_CreateAwsKmsMultiKeyringInput(input):
    return DafnyCreateAwsKmsMultiKeyringInput(
        generator=(
            (Option_Some(Seq(input.generator)))
            if (input.generator is not None)
            else (Option_None())
        ),
        kmsKeyIds=(
            (
                Option_Some(
                    Seq([Seq(list_element) for list_element in input.kms_key_ids])
                )
            )
            if (input.kms_key_ids is not None)
            else (Option_None())
        ),
        clientSupplier=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_ClientSupplierReference(
                        input.client_supplier
                    )
                )
            )
            if (
                (input.client_supplier is not None)
                and (
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_ClientSupplierReference(
                        input.client_supplier
                    )
                    is not None
                )
            )
            else (Option_None())
        ),
        grantTokens=(
            (
                Option_Some(
                    Seq([Seq(list_element) for list_element in input.grant_tokens])
                )
            )
            if (input.grant_tokens is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_ClientSupplierReference(input):
    if hasattr(input, "_impl"):
        return input._impl

    else:
        return input


def aws_cryptography_materialproviders_CreateAwsKmsDiscoveryMultiKeyringInput(input):
    return DafnyCreateAwsKmsDiscoveryMultiKeyringInput(
        regions=Seq([Seq(list_element) for list_element in input.regions]),
        discoveryFilter=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DiscoveryFilter(
                        input.discovery_filter
                    )
                )
            )
            if (input.discovery_filter is not None)
            else (Option_None())
        ),
        clientSupplier=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_ClientSupplierReference(
                        input.client_supplier
                    )
                )
            )
            if (
                (input.client_supplier is not None)
                and (
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_ClientSupplierReference(
                        input.client_supplier
                    )
                    is not None
                )
            )
            else (Option_None())
        ),
        grantTokens=(
            (
                Option_Some(
                    Seq([Seq(list_element) for list_element in input.grant_tokens])
                )
            )
            if (input.grant_tokens is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_CreateAwsKmsMrkKeyringInput(input):
    return DafnyCreateAwsKmsMrkKeyringInput(
        kmsKeyId=Seq(input.kms_key_id),
        kmsClient=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KmsClientReference(
            input.kms_client
        ),
        grantTokens=(
            (
                Option_Some(
                    Seq([Seq(list_element) for list_element in input.grant_tokens])
                )
            )
            if (input.grant_tokens is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_CreateAwsKmsMrkMultiKeyringInput(input):
    return DafnyCreateAwsKmsMrkMultiKeyringInput(
        generator=(
            (Option_Some(Seq(input.generator)))
            if (input.generator is not None)
            else (Option_None())
        ),
        kmsKeyIds=(
            (
                Option_Some(
                    Seq([Seq(list_element) for list_element in input.kms_key_ids])
                )
            )
            if (input.kms_key_ids is not None)
            else (Option_None())
        ),
        clientSupplier=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_ClientSupplierReference(
                        input.client_supplier
                    )
                )
            )
            if (
                (input.client_supplier is not None)
                and (
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_ClientSupplierReference(
                        input.client_supplier
                    )
                    is not None
                )
            )
            else (Option_None())
        ),
        grantTokens=(
            (
                Option_Some(
                    Seq([Seq(list_element) for list_element in input.grant_tokens])
                )
            )
            if (input.grant_tokens is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_CreateAwsKmsMrkDiscoveryKeyringInput(input):
    return DafnyCreateAwsKmsMrkDiscoveryKeyringInput(
        kmsClient=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KmsClientReference(
            input.kms_client
        ),
        discoveryFilter=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DiscoveryFilter(
                        input.discovery_filter
                    )
                )
            )
            if (input.discovery_filter is not None)
            else (Option_None())
        ),
        grantTokens=(
            (
                Option_Some(
                    Seq([Seq(list_element) for list_element in input.grant_tokens])
                )
            )
            if (input.grant_tokens is not None)
            else (Option_None())
        ),
        region=Seq(input.region),
    )


def aws_cryptography_materialproviders_CreateAwsKmsMrkDiscoveryMultiKeyringInput(input):
    return DafnyCreateAwsKmsMrkDiscoveryMultiKeyringInput(
        regions=Seq([Seq(list_element) for list_element in input.regions]),
        discoveryFilter=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DiscoveryFilter(
                        input.discovery_filter
                    )
                )
            )
            if (input.discovery_filter is not None)
            else (Option_None())
        ),
        clientSupplier=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_ClientSupplierReference(
                        input.client_supplier
                    )
                )
            )
            if (
                (input.client_supplier is not None)
                and (
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_ClientSupplierReference(
                        input.client_supplier
                    )
                    is not None
                )
            )
            else (Option_None())
        ),
        grantTokens=(
            (
                Option_Some(
                    Seq([Seq(list_element) for list_element in input.grant_tokens])
                )
            )
            if (input.grant_tokens is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_CreateAwsKmsHierarchicalKeyringInput(input):
    return DafnyCreateAwsKmsHierarchicalKeyringInput(
        branchKeyId=(
            (Option_Some(Seq(input.branch_key_id)))
            if (input.branch_key_id is not None)
            else (Option_None())
        ),
        branchKeyIdSupplier=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_BranchKeyIdSupplierReference(
                        input.branch_key_id_supplier
                    )
                )
            )
            if (
                (input.branch_key_id_supplier is not None)
                and (
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_BranchKeyIdSupplierReference(
                        input.branch_key_id_supplier
                    )
                    is not None
                )
            )
            else (Option_None())
        ),
        keyStore=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KeyStoreReference(
            input.key_store
        ),
        ttlSeconds=input.ttl_seconds,
        cache=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_CacheType(
                        input.cache
                    )
                )
            )
            if (input.cache is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_BranchKeyIdSupplierReference(input):
    if hasattr(input, "_impl"):
        return input._impl

    else:
        return input


def aws_cryptography_materialproviders_KeyStoreReference(input):
    return input._config.dafnyImplInterface.impl


def aws_cryptography_materialproviders_CacheType(input):
    if isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.CacheTypeDefault,
    ):
        CacheType_union_value = CacheType_Default(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DefaultCache(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.CacheTypeNo,
    ):
        CacheType_union_value = CacheType_No(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_NoCache(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.CacheTypeSingleThreaded,
    ):
        CacheType_union_value = CacheType_SingleThreaded(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_SingleThreadedCache(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.CacheTypeMultiThreaded,
    ):
        CacheType_union_value = CacheType_MultiThreaded(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_MultiThreadedCache(
                input.value
            )
        )
    elif isinstance(
        input,
        aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.models.CacheTypeStormTracking,
    ):
        CacheType_union_value = CacheType_StormTracking(
            aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_StormTrackingCache(
                input.value
            )
        )
    else:
        raise ValueError("No recognized union value in union type: " + str(input))

    return CacheType_union_value


def aws_cryptography_materialproviders_DefaultCache(input):
    return DafnyDefaultCache(
        entryCapacity=input.entry_capacity,
    )


def aws_cryptography_materialproviders_NoCache(input):
    return DafnyNoCache()


def aws_cryptography_materialproviders_SingleThreadedCache(input):
    return DafnySingleThreadedCache(
        entryCapacity=input.entry_capacity,
        entryPruningTailSize=(
            (Option_Some(input.entry_pruning_tail_size))
            if (input.entry_pruning_tail_size is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_MultiThreadedCache(input):
    return DafnyMultiThreadedCache(
        entryCapacity=input.entry_capacity,
        entryPruningTailSize=(
            (Option_Some(input.entry_pruning_tail_size))
            if (input.entry_pruning_tail_size is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_StormTrackingCache(input):
    return DafnyStormTrackingCache(
        entryCapacity=input.entry_capacity,
        entryPruningTailSize=(
            (Option_Some(input.entry_pruning_tail_size))
            if (input.entry_pruning_tail_size is not None)
            else (Option_None())
        ),
        gracePeriod=input.grace_period,
        graceInterval=input.grace_interval,
        fanOut=input.fan_out,
        inFlightTTL=input.in_flight_ttl,
        sleepMilli=input.sleep_milli,
    )


def aws_cryptography_materialproviders_CreateMultiKeyringInput(input):
    return DafnyCreateMultiKeyringInput(
        generator=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KeyringReference(
                        input.generator
                    )
                )
            )
            if (
                (input.generator is not None)
                and (
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KeyringReference(
                        input.generator
                    )
                    is not None
                )
            )
            else (Option_None())
        ),
        childKeyrings=Seq(
            [
                aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KeyringReference(
                    list_element
                )
                for list_element in input.child_keyrings
            ]
        ),
    )


def aws_cryptography_materialproviders_KeyringReference(input):
    if hasattr(input, "_impl"):
        return input._impl

    else:
        return input


def aws_cryptography_materialproviders_CreateRawAesKeyringInput(input):
    return DafnyCreateRawAesKeyringInput(
        keyNamespace=Seq(input.key_namespace),
        keyName=Seq(input.key_name),
        wrappingKey=Seq(input.wrapping_key),
        wrappingAlg=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_AesWrappingAlg(
            input.wrapping_alg
        ),
    )


def aws_cryptography_materialproviders_AesWrappingAlg(input):
    if input == "ALG_AES128_GCM_IV12_TAG16":
        return AesWrappingAlg_ALG__AES128__GCM__IV12__TAG16()

    elif input == "ALG_AES192_GCM_IV12_TAG16":
        return AesWrappingAlg_ALG__AES192__GCM__IV12__TAG16()

    elif input == "ALG_AES256_GCM_IV12_TAG16":
        return AesWrappingAlg_ALG__AES256__GCM__IV12__TAG16()

    else:
        raise ValueError(f"No recognized enum value in enum type: {input=}")


def aws_cryptography_materialproviders_CreateRawRsaKeyringInput(input):
    return DafnyCreateRawRsaKeyringInput(
        keyNamespace=Seq(input.key_namespace),
        keyName=Seq(input.key_name),
        paddingScheme=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_PaddingScheme(
            input.padding_scheme
        ),
        publicKey=(
            (Option_Some(Seq(input.public_key)))
            if (input.public_key is not None)
            else (Option_None())
        ),
        privateKey=(
            (Option_Some(Seq(input.private_key)))
            if (input.private_key is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_PaddingScheme(input):
    if input == "PKCS1":
        return PaddingScheme_PKCS1()

    elif input == "OAEP_SHA1_MGF1":
        return PaddingScheme_OAEP__SHA1__MGF1()

    elif input == "OAEP_SHA256_MGF1":
        return PaddingScheme_OAEP__SHA256__MGF1()

    elif input == "OAEP_SHA384_MGF1":
        return PaddingScheme_OAEP__SHA384__MGF1()

    elif input == "OAEP_SHA512_MGF1":
        return PaddingScheme_OAEP__SHA512__MGF1()

    else:
        raise ValueError(f"No recognized enum value in enum type: {input=}")


def aws_cryptography_materialproviders_CreateAwsKmsRsaKeyringInput(input):
    return DafnyCreateAwsKmsRsaKeyringInput(
        publicKey=(
            (Option_Some(Seq(input.public_key)))
            if (input.public_key is not None)
            else (Option_None())
        ),
        kmsKeyId=Seq(input.kms_key_id),
        encryptionAlgorithm=com_amazonaws_kms.smithygenerated.com_amazonaws_kms.aws_sdk_to_dafny.com_amazonaws_kms_EncryptionAlgorithmSpec(
            input.encryption_algorithm
        ),
        kmsClient=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KmsClientReference(
                        input.kms_client
                    )
                )
            )
            if (
                (input.kms_client is not None)
                and (
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KmsClientReference(
                        input.kms_client
                    )
                    is not None
                )
            )
            else (Option_None())
        ),
        grantTokens=(
            (
                Option_Some(
                    Seq([Seq(list_element) for list_element in input.grant_tokens])
                )
            )
            if (input.grant_tokens is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_CreateDefaultCryptographicMaterialsManagerInput(
    input,
):
    return DafnyCreateDefaultCryptographicMaterialsManagerInput(
        keyring=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KeyringReference(
            input.keyring
        ),
    )


def aws_cryptography_materialproviders_CreateRequiredEncryptionContextCMMInput(input):
    return DafnyCreateRequiredEncryptionContextCMMInput(
        underlyingCMM=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_CryptographicMaterialsManagerReference(
                        input.underlying_cmm
                    )
                )
            )
            if (
                (input.underlying_cmm is not None)
                and (
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_CryptographicMaterialsManagerReference(
                        input.underlying_cmm
                    )
                    is not None
                )
            )
            else (Option_None())
        ),
        keyring=(
            (
                Option_Some(
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KeyringReference(
                        input.keyring
                    )
                )
            )
            if (
                (input.keyring is not None)
                and (
                    aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KeyringReference(
                        input.keyring
                    )
                    is not None
                )
            )
            else (Option_None())
        ),
        requiredEncryptionContextKeys=Seq(
            [
                Seq(list(ord(c) for c in list_element))
                for list_element in input.required_encryption_context_keys
            ]
        ),
    )


def aws_cryptography_materialproviders_CryptographicMaterialsManagerReference(input):
    if hasattr(input, "_impl"):
        return input._impl

    else:
        return input


def aws_cryptography_materialproviders_CreateCryptographicMaterialsCacheInput(input):
    return DafnyCreateCryptographicMaterialsCacheInput(
        cache=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_CacheType(
            input.cache
        ),
    )


def aws_cryptography_materialproviders_CreateDefaultClientSupplierInput(input):
    return DafnyCreateDefaultClientSupplierInput()


def aws_cryptography_materialproviders_InitializeEncryptionMaterialsInput(input):
    return DafnyInitializeEncryptionMaterialsInput(
        algorithmSuiteId=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_AlgorithmSuiteId(
            input.algorithm_suite_id
        ),
        encryptionContext=Map(
            {
                Seq(list(ord(c) for c in key)): Seq(list(ord(c) for c in value))
                for (key, value) in input.encryption_context.items()
            }
        ),
        requiredEncryptionContextKeys=Seq(
            [
                Seq(list(ord(c) for c in list_element))
                for list_element in input.required_encryption_context_keys
            ]
        ),
        signingKey=(
            (Option_Some(Seq(input.signing_key)))
            if (input.signing_key is not None)
            else (Option_None())
        ),
        verificationKey=(
            (Option_Some(Seq(input.verification_key)))
            if (input.verification_key is not None)
            else (Option_None())
        ),
    )


def aws_cryptography_materialproviders_InitializeDecryptionMaterialsInput(input):
    return DafnyInitializeDecryptionMaterialsInput(
        algorithmSuiteId=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_AlgorithmSuiteId(
            input.algorithm_suite_id
        ),
        encryptionContext=Map(
            {
                Seq(list(ord(c) for c in key)): Seq(list(ord(c) for c in value))
                for (key, value) in input.encryption_context.items()
            }
        ),
        requiredEncryptionContextKeys=Seq(
            [
                Seq(list(ord(c) for c in list_element))
                for list_element in input.required_encryption_context_keys
            ]
        ),
    )


def aws_cryptography_materialproviders_ValidEncryptionMaterialsTransitionInput(input):
    return DafnyValidEncryptionMaterialsTransitionInput(
        start=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_EncryptionMaterials(
            input.start
        ),
        stop=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_EncryptionMaterials(
            input.stop
        ),
    )


def aws_cryptography_materialproviders_ValidDecryptionMaterialsTransitionInput(input):
    return DafnyValidDecryptionMaterialsTransitionInput(
        start=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DecryptionMaterials(
            input.start
        ),
        stop=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_DecryptionMaterials(
            input.stop
        ),
    )


def aws_cryptography_materialproviders_GetAlgorithmSuiteInfoInput(input):
    return Seq(input)


def aws_cryptography_materialproviders_ValidateCommitmentPolicyOnEncryptInput(input):
    return DafnyValidateCommitmentPolicyOnEncryptInput(
        algorithm=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_AlgorithmSuiteId(
            input.algorithm
        ),
        commitmentPolicy=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_CommitmentPolicy(
            input.commitment_policy
        ),
    )


def aws_cryptography_materialproviders_ValidateCommitmentPolicyOnDecryptInput(input):
    return DafnyValidateCommitmentPolicyOnDecryptInput(
        algorithm=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_AlgorithmSuiteId(
            input.algorithm
        ),
        commitmentPolicy=aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_CommitmentPolicy(
            input.commitment_policy
        ),
    )


def aws_cryptography_materialproviders_CreateKeyringOutput(input):
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_KeyringReference(
        input
    )


def aws_cryptography_materialproviders_CreateCryptographicMaterialsManagerOutput(input):
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_CryptographicMaterialsManagerReference(
        input
    )


def aws_cryptography_materialproviders_CreateRequiredEncryptionContextCMMOutput(input):
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_CryptographicMaterialsManagerReference(
        input
    )


def aws_cryptography_materialproviders_CreateCryptographicMaterialsCacheOutput(input):
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_CryptographicMaterialsCacheReference(
        input
    )


def aws_cryptography_materialproviders_CryptographicMaterialsCacheReference(input):
    if hasattr(input, "_impl"):
        return input._impl

    else:
        return input


def aws_cryptography_materialproviders_CreateDefaultClientSupplierOutput(input):
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_materialproviders.smithy_to_dafny.aws_cryptography_materialproviders_ClientSupplierReference(
        input
    )


def aws_cryptography_materialproviders_MaterialProvidersConfig(input):
    return DafnyMaterialProvidersConfig()
