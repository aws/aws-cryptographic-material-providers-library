# Code generated by smithy-python-codegen DO NOT EDIT.

import _dafny
import aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_keystore.dafny_to_smithy
import module_
from software_amazon_cryptography_keystore_internaldafny_types import (
    CreateKeyOutput_CreateKeyOutput as DafnyCreateKeyOutput,
    CreateKeyStoreOutput_CreateKeyStoreOutput as DafnyCreateKeyStoreOutput,
    Error,
    Error_KeyStoreException,
    GetActiveBranchKeyOutput_GetActiveBranchKeyOutput as DafnyGetActiveBranchKeyOutput,
    GetBeaconKeyOutput_GetBeaconKeyOutput as DafnyGetBeaconKeyOutput,
    GetBranchKeyVersionOutput_GetBranchKeyVersionOutput as DafnyGetBranchKeyVersionOutput,
    GetKeyStoreInfoOutput_GetKeyStoreInfoOutput as DafnyGetKeyStoreInfoOutput,
    VersionKeyOutput_VersionKeyOutput as DafnyVersionKeyOutput,
)
from typing import Any

from .dafny_protocol import DafnyResponse
from .errors import (
    CollectionOfErrors,
    ComAmazonawsDynamodb,
    ComAmazonawsKms,
    KeyStoreException,
    OpaqueError,
    ServiceError,
)
from com_amazonaws_dynamodb.smithygenerated.com_amazonaws_dynamodb.shim import (
    _sdk_error_to_dafny_error as com_amazonaws_dynamodb_sdk_error_to_dafny_error,
)
from com_amazonaws_kms.smithygenerated.com_amazonaws_kms.shim import (
    _sdk_error_to_dafny_error as com_amazonaws_kms_sdk_error_to_dafny_error,
)

from .config import Config


async def _deserialize_get_key_store_info(input: DafnyResponse, config: Config):

    if input.IsFailure():
        return await _deserialize_error(input.error)
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_keystore.dafny_to_smithy.aws_cryptography_keystore_GetKeyStoreInfoOutput(
        input.value
    )


async def _deserialize_create_key_store(input: DafnyResponse, config: Config):

    if input.IsFailure():
        return await _deserialize_error(input.error)
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_keystore.dafny_to_smithy.aws_cryptography_keystore_CreateKeyStoreOutput(
        input.value
    )


async def _deserialize_create_key(input: DafnyResponse, config: Config):

    if input.IsFailure():
        return await _deserialize_error(input.error)
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_keystore.dafny_to_smithy.aws_cryptography_keystore_CreateKeyOutput(
        input.value
    )


async def _deserialize_version_key(input: DafnyResponse, config: Config):

    if input.IsFailure():
        return await _deserialize_error(input.error)
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_keystore.dafny_to_smithy.aws_cryptography_keystore_VersionKeyOutput(
        input.value
    )


async def _deserialize_get_active_branch_key(input: DafnyResponse, config: Config):

    if input.IsFailure():
        return await _deserialize_error(input.error)
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_keystore.dafny_to_smithy.aws_cryptography_keystore_GetActiveBranchKeyOutput(
        input.value
    )


async def _deserialize_get_branch_key_version(input: DafnyResponse, config: Config):

    if input.IsFailure():
        return await _deserialize_error(input.error)
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_keystore.dafny_to_smithy.aws_cryptography_keystore_GetBranchKeyVersionOutput(
        input.value
    )


async def _deserialize_get_beacon_key(input: DafnyResponse, config: Config):

    if input.IsFailure():
        return await _deserialize_error(input.error)
    return aws_cryptographic_materialproviders.smithygenerated.aws_cryptography_keystore.dafny_to_smithy.aws_cryptography_keystore_GetBeaconKeyOutput(
        input.value
    )


async def _deserialize_error(error: Error) -> ServiceError:
    if error.is_Opaque:
        return OpaqueError(obj=error.obj)
    elif error.is_CollectionOfErrors:
        return CollectionOfErrors(
            message=_dafny.string_of(error.message),
            list=[await _deserialize_error(dafny_e) for dafny_e in error.list],
        )
    elif error.is_KeyStoreException:
        return KeyStoreException(message=_dafny.string_of(error.message))
    elif error.is_ComAmazonawsKms:
        return ComAmazonawsKms(message=_dafny.string_of(error.ComAmazonawsKms.message))
    elif error.is_ComAmazonawsDynamodb:
        return ComAmazonawsDynamodb(
            message=_dafny.string_of(error.ComAmazonawsDynamodb.message)
        )
    else:
        return OpaqueError(obj=error)
