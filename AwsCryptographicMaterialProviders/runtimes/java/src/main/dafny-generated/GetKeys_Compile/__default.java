// Class __default
// Dafny class __default compiled into Java
package GetKeys_Compile;

@SuppressWarnings({"unchecked", "deprecation"})
public class __default {
  public __default() {
  }
  public static Wrappers_Compile.Result<software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput, software.amazon.cryptography.keystore.internaldafny.types.Error> GetActiveKeyAndUnwrap(software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyInput input, dafny.DafnySequence<? extends Character> tableName, dafny.DafnySequence<? extends Character> logicalKeyStoreName, software.amazon.cryptography.keystore.internaldafny.types.KMSConfiguration kmsConfiguration, dafny.DafnySequence<? extends dafny.DafnySequence<? extends Character>> grantTokens, software.amazon.cryptography.services.kms.internaldafny.types.IKMSClient kmsClient, software.amazon.cryptography.services.dynamodb.internaldafny.types.IDynamoDBClient ddbClient)
  {
    Wrappers_Compile.Result<software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput, software.amazon.cryptography.keystore.internaldafny.types.Error> output = Wrappers_Compile.Result.<software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput, software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput.Default());
    Wrappers_Compile.Result<dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends software.amazon.cryptography.services.dynamodb.internaldafny.types.AttributeValue>, software.amazon.cryptography.keystore.internaldafny.types.Error> _0_valueOrError0 = (Wrappers_Compile.Result<dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends software.amazon.cryptography.services.dynamodb.internaldafny.types.AttributeValue>, software.amazon.cryptography.keystore.internaldafny.types.Error>)null;
    Wrappers_Compile.Result<dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends software.amazon.cryptography.services.dynamodb.internaldafny.types.AttributeValue>, software.amazon.cryptography.keystore.internaldafny.types.Error> _out0;
    _out0 = DDBKeystoreOperations_Compile.__default.GetActiveBranchKeyItem((input).dtor_branchKeyIdentifier(), tableName, ddbClient);
    _0_valueOrError0 = _out0;
    if ((_0_valueOrError0).IsFailure(Structure_Compile.ActiveBranchKeyItem._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_0_valueOrError0).<software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput>PropagateFailure(Structure_Compile.ActiveBranchKeyItem._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput._typeDescriptor());
      return output;
    }
    dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends software.amazon.cryptography.services.dynamodb.internaldafny.types.AttributeValue> _1_branchKeyItem;
    _1_branchKeyItem = (_0_valueOrError0).Extract(Structure_Compile.ActiveBranchKeyItem._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends dafny.DafnySequence<? extends Character>> _2_encryptionContext;
    _2_encryptionContext = Structure_Compile.__default.ToBranchKeyContext(_1_branchKeyItem, logicalKeyStoreName);
    Wrappers_Compile.Outcome<software.amazon.cryptography.keystore.internaldafny.types.Error> _3_valueOrError1 = Wrappers_Compile.Outcome.<software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    _3_valueOrError1 = Wrappers_Compile.__default.<software.amazon.cryptography.keystore.internaldafny.types.Error>Need(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), KmsArn_Compile.__default.ValidKmsArn_q(((dafny.DafnySequence<? extends Character>)(java.lang.Object)((_2_encryptionContext).get(Structure_Compile.__default.KMS__FIELD())))), software.amazon.cryptography.keystore.internaldafny.types.Error.create_KeyStoreException(KeyStoreErrorMessages_Compile.__default.RETRIEVED__KEYSTORE__ITEM__INVALID__KMS__ARN()));
    if ((_3_valueOrError1).IsFailure(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_3_valueOrError1).<software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput>PropagateFailure(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput._typeDescriptor());
      return output;
    }
    Wrappers_Compile.Outcome<software.amazon.cryptography.keystore.internaldafny.types.Error> _4_valueOrError2 = Wrappers_Compile.Outcome.<software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    _4_valueOrError2 = Wrappers_Compile.__default.<software.amazon.cryptography.keystore.internaldafny.types.Error>Need(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), KMSKeystoreOperations_Compile.__default.AttemptKmsOperation_q(kmsConfiguration, _2_encryptionContext), software.amazon.cryptography.keystore.internaldafny.types.Error.create_KeyStoreException(KeyStoreErrorMessages_Compile.__default.GET__KEY__ARN__DISAGREEMENT()));
    if ((_4_valueOrError2).IsFailure(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_4_valueOrError2).<software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput>PropagateFailure(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput._typeDescriptor());
      return output;
    }
    Wrappers_Compile.Result<software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse, software.amazon.cryptography.keystore.internaldafny.types.Error> _5_valueOrError3 = Wrappers_Compile.Result.<software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse, software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse.Default());
    Wrappers_Compile.Result<software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse, software.amazon.cryptography.keystore.internaldafny.types.Error> _out1;
    _out1 = KMSKeystoreOperations_Compile.__default.DecryptKey(_2_encryptionContext, _1_branchKeyItem, kmsConfiguration, grantTokens, kmsClient);
    _5_valueOrError3 = _out1;
    if ((_5_valueOrError3).IsFailure(software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_5_valueOrError3).<software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput>PropagateFailure(software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput._typeDescriptor());
      return output;
    }
    software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse _6_branchKey;
    _6_branchKey = (_5_valueOrError3).Extract(software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    Wrappers_Compile.Result<software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials, software.amazon.cryptography.keystore.internaldafny.types.Error> _7_valueOrError4 = Wrappers_Compile.Result.<software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials, software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials.Default());
    _7_valueOrError4 = Structure_Compile.__default.ToBranchKeyMaterials(_2_encryptionContext, ((_6_branchKey).dtor_Plaintext()).dtor_value());
    if ((_7_valueOrError4).IsFailure(software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_7_valueOrError4).<software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput>PropagateFailure(software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput._typeDescriptor());
      return output;
    }
    software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials _8_branchKeyMaterials;
    _8_branchKeyMaterials = (_7_valueOrError4).Extract(software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    output = Wrappers_Compile.Result.<software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput, software.amazon.cryptography.keystore.internaldafny.types.Error>create_Success(software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetActiveBranchKeyOutput.create(_8_branchKeyMaterials));
    return output;
  }
  public static Wrappers_Compile.Result<software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput, software.amazon.cryptography.keystore.internaldafny.types.Error> GetBranchKeyVersion(software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionInput input, dafny.DafnySequence<? extends Character> tableName, dafny.DafnySequence<? extends Character> logicalKeyStoreName, software.amazon.cryptography.keystore.internaldafny.types.KMSConfiguration kmsConfiguration, dafny.DafnySequence<? extends dafny.DafnySequence<? extends Character>> grantTokens, software.amazon.cryptography.services.kms.internaldafny.types.IKMSClient kmsClient, software.amazon.cryptography.services.dynamodb.internaldafny.types.IDynamoDBClient ddbClient)
  {
    Wrappers_Compile.Result<software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput, software.amazon.cryptography.keystore.internaldafny.types.Error> output = Wrappers_Compile.Result.<software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput, software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput.Default());
    Wrappers_Compile.Result<dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends software.amazon.cryptography.services.dynamodb.internaldafny.types.AttributeValue>, software.amazon.cryptography.keystore.internaldafny.types.Error> _0_valueOrError0 = (Wrappers_Compile.Result<dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends software.amazon.cryptography.services.dynamodb.internaldafny.types.AttributeValue>, software.amazon.cryptography.keystore.internaldafny.types.Error>)null;
    Wrappers_Compile.Result<dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends software.amazon.cryptography.services.dynamodb.internaldafny.types.AttributeValue>, software.amazon.cryptography.keystore.internaldafny.types.Error> _out0;
    _out0 = DDBKeystoreOperations_Compile.__default.GetVersionBranchKeyItem((input).dtor_branchKeyIdentifier(), (input).dtor_branchKeyVersion(), tableName, ddbClient);
    _0_valueOrError0 = _out0;
    if ((_0_valueOrError0).IsFailure(Structure_Compile.VersionBranchKeyItem._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_0_valueOrError0).<software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput>PropagateFailure(Structure_Compile.VersionBranchKeyItem._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput._typeDescriptor());
      return output;
    }
    dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends software.amazon.cryptography.services.dynamodb.internaldafny.types.AttributeValue> _1_branchKeyItem;
    _1_branchKeyItem = (_0_valueOrError0).Extract(Structure_Compile.VersionBranchKeyItem._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends dafny.DafnySequence<? extends Character>> _2_encryptionContext;
    _2_encryptionContext = Structure_Compile.__default.ToBranchKeyContext(_1_branchKeyItem, logicalKeyStoreName);
    Wrappers_Compile.Outcome<software.amazon.cryptography.keystore.internaldafny.types.Error> _3_valueOrError1 = Wrappers_Compile.Outcome.<software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    _3_valueOrError1 = Wrappers_Compile.__default.<software.amazon.cryptography.keystore.internaldafny.types.Error>Need(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), KmsArn_Compile.__default.ValidKmsArn_q(((dafny.DafnySequence<? extends Character>)(java.lang.Object)((_2_encryptionContext).get(Structure_Compile.__default.KMS__FIELD())))), software.amazon.cryptography.keystore.internaldafny.types.Error.create_KeyStoreException(KeyStoreErrorMessages_Compile.__default.RETRIEVED__KEYSTORE__ITEM__INVALID__KMS__ARN()));
    if ((_3_valueOrError1).IsFailure(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_3_valueOrError1).<software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput>PropagateFailure(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput._typeDescriptor());
      return output;
    }
    Wrappers_Compile.Outcome<software.amazon.cryptography.keystore.internaldafny.types.Error> _4_valueOrError2 = Wrappers_Compile.Outcome.<software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    _4_valueOrError2 = Wrappers_Compile.__default.<software.amazon.cryptography.keystore.internaldafny.types.Error>Need(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), KMSKeystoreOperations_Compile.__default.AttemptKmsOperation_q(kmsConfiguration, _2_encryptionContext), software.amazon.cryptography.keystore.internaldafny.types.Error.create_KeyStoreException(dafny.DafnySequence.asString("AWS KMS Key ARN does not match configured value")));
    if ((_4_valueOrError2).IsFailure(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_4_valueOrError2).<software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput>PropagateFailure(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput._typeDescriptor());
      return output;
    }
    Wrappers_Compile.Result<software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse, software.amazon.cryptography.keystore.internaldafny.types.Error> _5_valueOrError3 = Wrappers_Compile.Result.<software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse, software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse.Default());
    Wrappers_Compile.Result<software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse, software.amazon.cryptography.keystore.internaldafny.types.Error> _out1;
    _out1 = KMSKeystoreOperations_Compile.__default.DecryptKey(_2_encryptionContext, _1_branchKeyItem, kmsConfiguration, grantTokens, kmsClient);
    _5_valueOrError3 = _out1;
    if ((_5_valueOrError3).IsFailure(software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_5_valueOrError3).<software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput>PropagateFailure(software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput._typeDescriptor());
      return output;
    }
    software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse _6_branchKey;
    _6_branchKey = (_5_valueOrError3).Extract(software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    Wrappers_Compile.Result<software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials, software.amazon.cryptography.keystore.internaldafny.types.Error> _7_valueOrError4 = Wrappers_Compile.Result.<software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials, software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials.Default());
    _7_valueOrError4 = Structure_Compile.__default.ToBranchKeyMaterials(_2_encryptionContext, ((_6_branchKey).dtor_Plaintext()).dtor_value());
    if ((_7_valueOrError4).IsFailure(software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_7_valueOrError4).<software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput>PropagateFailure(software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput._typeDescriptor());
      return output;
    }
    software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials _8_branchKeyMaterials;
    _8_branchKeyMaterials = (_7_valueOrError4).Extract(software.amazon.cryptography.keystore.internaldafny.types.BranchKeyMaterials._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    output = Wrappers_Compile.Result.<software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput, software.amazon.cryptography.keystore.internaldafny.types.Error>create_Success(software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBranchKeyVersionOutput.create(_8_branchKeyMaterials));
    return output;
  }
  public static Wrappers_Compile.Result<software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput, software.amazon.cryptography.keystore.internaldafny.types.Error> GetBeaconKeyAndUnwrap(software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyInput input, dafny.DafnySequence<? extends Character> tableName, dafny.DafnySequence<? extends Character> logicalKeyStoreName, software.amazon.cryptography.keystore.internaldafny.types.KMSConfiguration kmsConfiguration, dafny.DafnySequence<? extends dafny.DafnySequence<? extends Character>> grantTokens, software.amazon.cryptography.services.kms.internaldafny.types.IKMSClient kmsClient, software.amazon.cryptography.services.dynamodb.internaldafny.types.IDynamoDBClient ddbClient)
  {
    Wrappers_Compile.Result<software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput, software.amazon.cryptography.keystore.internaldafny.types.Error> output = Wrappers_Compile.Result.<software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput, software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput.Default());
    Wrappers_Compile.Result<dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends software.amazon.cryptography.services.dynamodb.internaldafny.types.AttributeValue>, software.amazon.cryptography.keystore.internaldafny.types.Error> _0_valueOrError0 = (Wrappers_Compile.Result<dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends software.amazon.cryptography.services.dynamodb.internaldafny.types.AttributeValue>, software.amazon.cryptography.keystore.internaldafny.types.Error>)null;
    Wrappers_Compile.Result<dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends software.amazon.cryptography.services.dynamodb.internaldafny.types.AttributeValue>, software.amazon.cryptography.keystore.internaldafny.types.Error> _out0;
    _out0 = DDBKeystoreOperations_Compile.__default.GetBeaconKeyItem((input).dtor_branchKeyIdentifier(), tableName, ddbClient);
    _0_valueOrError0 = _out0;
    if ((_0_valueOrError0).IsFailure(Structure_Compile.BeaconKeyItem._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_0_valueOrError0).<software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput>PropagateFailure(Structure_Compile.BeaconKeyItem._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput._typeDescriptor());
      return output;
    }
    dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends software.amazon.cryptography.services.dynamodb.internaldafny.types.AttributeValue> _1_branchKeyItem;
    _1_branchKeyItem = (_0_valueOrError0).Extract(Structure_Compile.BeaconKeyItem._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    dafny.DafnyMap<? extends dafny.DafnySequence<? extends Character>, ? extends dafny.DafnySequence<? extends Character>> _2_encryptionContext;
    _2_encryptionContext = Structure_Compile.__default.ToBranchKeyContext(_1_branchKeyItem, logicalKeyStoreName);
    Wrappers_Compile.Outcome<software.amazon.cryptography.keystore.internaldafny.types.Error> _3_valueOrError1 = Wrappers_Compile.Outcome.<software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    _3_valueOrError1 = Wrappers_Compile.__default.<software.amazon.cryptography.keystore.internaldafny.types.Error>Need(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), KmsArn_Compile.__default.ValidKmsArn_q(((dafny.DafnySequence<? extends Character>)(java.lang.Object)((_2_encryptionContext).get(Structure_Compile.__default.KMS__FIELD())))), software.amazon.cryptography.keystore.internaldafny.types.Error.create_KeyStoreException(KeyStoreErrorMessages_Compile.__default.RETRIEVED__KEYSTORE__ITEM__INVALID__KMS__ARN()));
    if ((_3_valueOrError1).IsFailure(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_3_valueOrError1).<software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput>PropagateFailure(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput._typeDescriptor());
      return output;
    }
    Wrappers_Compile.Outcome<software.amazon.cryptography.keystore.internaldafny.types.Error> _4_valueOrError2 = Wrappers_Compile.Outcome.<software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    _4_valueOrError2 = Wrappers_Compile.__default.<software.amazon.cryptography.keystore.internaldafny.types.Error>Need(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), KMSKeystoreOperations_Compile.__default.AttemptKmsOperation_q(kmsConfiguration, _2_encryptionContext), software.amazon.cryptography.keystore.internaldafny.types.Error.create_KeyStoreException(dafny.DafnySequence.asString("AWS KMS Key ARN does not match configured value")));
    if ((_4_valueOrError2).IsFailure(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_4_valueOrError2).<software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput>PropagateFailure(software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput._typeDescriptor());
      return output;
    }
    Wrappers_Compile.Result<software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse, software.amazon.cryptography.keystore.internaldafny.types.Error> _5_valueOrError3 = Wrappers_Compile.Result.<software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse, software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse.Default());
    Wrappers_Compile.Result<software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse, software.amazon.cryptography.keystore.internaldafny.types.Error> _out1;
    _out1 = KMSKeystoreOperations_Compile.__default.DecryptKey(_2_encryptionContext, _1_branchKeyItem, kmsConfiguration, grantTokens, kmsClient);
    _5_valueOrError3 = _out1;
    if ((_5_valueOrError3).IsFailure(software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_5_valueOrError3).<software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput>PropagateFailure(software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput._typeDescriptor());
      return output;
    }
    software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse _6_branchKey;
    _6_branchKey = (_5_valueOrError3).Extract(software.amazon.cryptography.services.kms.internaldafny.types.DecryptResponse._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    Wrappers_Compile.Result<software.amazon.cryptography.keystore.internaldafny.types.BeaconKeyMaterials, software.amazon.cryptography.keystore.internaldafny.types.Error> _7_valueOrError4 = Wrappers_Compile.Result.<software.amazon.cryptography.keystore.internaldafny.types.BeaconKeyMaterials, software.amazon.cryptography.keystore.internaldafny.types.Error>Default(software.amazon.cryptography.keystore.internaldafny.types.BeaconKeyMaterials._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.BeaconKeyMaterials.Default());
    _7_valueOrError4 = Structure_Compile.__default.ToBeaconKeyMaterials(_2_encryptionContext, ((_6_branchKey).dtor_Plaintext()).dtor_value());
    if ((_7_valueOrError4).IsFailure(software.amazon.cryptography.keystore.internaldafny.types.BeaconKeyMaterials._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor())) {
      output = (_7_valueOrError4).<software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput>PropagateFailure(software.amazon.cryptography.keystore.internaldafny.types.BeaconKeyMaterials._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput._typeDescriptor());
      return output;
    }
    software.amazon.cryptography.keystore.internaldafny.types.BeaconKeyMaterials _8_branchKeyMaterials;
    _8_branchKeyMaterials = (_7_valueOrError4).Extract(software.amazon.cryptography.keystore.internaldafny.types.BeaconKeyMaterials._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor());
    output = Wrappers_Compile.Result.<software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput, software.amazon.cryptography.keystore.internaldafny.types.Error>create_Success(software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.Error._typeDescriptor(), software.amazon.cryptography.keystore.internaldafny.types.GetBeaconKeyOutput.create(_8_branchKeyMaterials));
    return output;
  }
  @Override
  public java.lang.String toString() {
    return "GetKeys._default";
  }
}
