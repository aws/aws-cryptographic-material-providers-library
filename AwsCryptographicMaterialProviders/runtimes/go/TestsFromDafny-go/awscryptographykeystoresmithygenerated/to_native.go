// Code generated by smithy-go-codegen DO NOT EDIT.

package awscryptographykeystoresmithygenerated

import (
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/dynamodb/DynamoDBwrapped"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/dynamodb/comamazonawsdynamodbsmithygenerated"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/kms/KMSwrapped"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/kms/comamazonawskmssmithygenerated"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/AwsCryptographyKeyStoreTypes"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/awscryptographykeystoresmithygeneratedtypes"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/smithy-dafny-standard-library/Wrappers"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	"github.com/dafny-lang/DafnyRuntimeGo/v4/dafny"
)

func CreateKeyInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.CreateKeyInput) awscryptographykeystoresmithygeneratedtypes.CreateKeyInput {

	return awscryptographykeystoresmithygeneratedtypes.CreateKeyInput{BranchKeyIdentifier: aws_cryptography_keyStore_CreateKeyInput_branchKeyIdentifier_FromDafny(dafnyInput.Dtor_branchKeyIdentifier().UnwrapOr(nil)),
		EncryptionContext: aws_cryptography_keyStore_CreateKeyInput_encryptionContext_FromDafny(dafnyInput.Dtor_encryptionContext().UnwrapOr(nil)),
	}

}

func CreateKeyOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.CreateKeyOutput) awscryptographykeystoresmithygeneratedtypes.CreateKeyOutput {

	return awscryptographykeystoresmithygeneratedtypes.CreateKeyOutput{BranchKeyIdentifier: aws_cryptography_keyStore_CreateKeyOutput_branchKeyIdentifier_FromDafny(dafnyOutput.Dtor_branchKeyIdentifier())}

}

func CreateKeyStoreInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.CreateKeyStoreInput) awscryptographykeystoresmithygeneratedtypes.CreateKeyStoreInput {

	return awscryptographykeystoresmithygeneratedtypes.CreateKeyStoreInput{}

}

func CreateKeyStoreOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.CreateKeyStoreOutput) awscryptographykeystoresmithygeneratedtypes.CreateKeyStoreOutput {

	return awscryptographykeystoresmithygeneratedtypes.CreateKeyStoreOutput{TableArn: aws_cryptography_keyStore_CreateKeyStoreOutput_tableArn_FromDafny(dafnyOutput.Dtor_tableArn())}

}

func GetActiveBranchKeyInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.GetActiveBranchKeyInput) awscryptographykeystoresmithygeneratedtypes.GetActiveBranchKeyInput {

	return awscryptographykeystoresmithygeneratedtypes.GetActiveBranchKeyInput{BranchKeyIdentifier: aws_cryptography_keyStore_GetActiveBranchKeyInput_branchKeyIdentifier_FromDafny(dafnyInput.Dtor_branchKeyIdentifier())}

}

func GetActiveBranchKeyOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.GetActiveBranchKeyOutput) awscryptographykeystoresmithygeneratedtypes.GetActiveBranchKeyOutput {

	return awscryptographykeystoresmithygeneratedtypes.GetActiveBranchKeyOutput{BranchKeyMaterials: aws_cryptography_keyStore_GetActiveBranchKeyOutput_branchKeyMaterials_FromDafny(dafnyOutput.Dtor_branchKeyMaterials())}

}

func GetBeaconKeyInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.GetBeaconKeyInput) awscryptographykeystoresmithygeneratedtypes.GetBeaconKeyInput {

	return awscryptographykeystoresmithygeneratedtypes.GetBeaconKeyInput{BranchKeyIdentifier: aws_cryptography_keyStore_GetBeaconKeyInput_branchKeyIdentifier_FromDafny(dafnyInput.Dtor_branchKeyIdentifier())}

}

func GetBeaconKeyOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.GetBeaconKeyOutput) awscryptographykeystoresmithygeneratedtypes.GetBeaconKeyOutput {

	return awscryptographykeystoresmithygeneratedtypes.GetBeaconKeyOutput{BeaconKeyMaterials: aws_cryptography_keyStore_GetBeaconKeyOutput_beaconKeyMaterials_FromDafny(dafnyOutput.Dtor_beaconKeyMaterials())}

}

func GetBranchKeyVersionInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.GetBranchKeyVersionInput) awscryptographykeystoresmithygeneratedtypes.GetBranchKeyVersionInput {

	return awscryptographykeystoresmithygeneratedtypes.GetBranchKeyVersionInput{BranchKeyIdentifier: aws_cryptography_keyStore_GetBranchKeyVersionInput_branchKeyIdentifier_FromDafny(dafnyInput.Dtor_branchKeyIdentifier()),
		BranchKeyVersion: aws_cryptography_keyStore_GetBranchKeyVersionInput_branchKeyVersion_FromDafny(dafnyInput.Dtor_branchKeyVersion()),
	}

}

func GetBranchKeyVersionOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.GetBranchKeyVersionOutput) awscryptographykeystoresmithygeneratedtypes.GetBranchKeyVersionOutput {

	return awscryptographykeystoresmithygeneratedtypes.GetBranchKeyVersionOutput{BranchKeyMaterials: aws_cryptography_keyStore_GetBranchKeyVersionOutput_branchKeyMaterials_FromDafny(dafnyOutput.Dtor_branchKeyMaterials())}

}

func GetKeyStoreInfoOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.GetKeyStoreInfoOutput) awscryptographykeystoresmithygeneratedtypes.GetKeyStoreInfoOutput {

	return awscryptographykeystoresmithygeneratedtypes.GetKeyStoreInfoOutput{KeyStoreId: aws_cryptography_keyStore_GetKeyStoreInfoOutput_keyStoreId_FromDafny(dafnyOutput.Dtor_keyStoreId()),
		KeyStoreName:        aws_cryptography_keyStore_GetKeyStoreInfoOutput_keyStoreName_FromDafny(dafnyOutput.Dtor_keyStoreName()),
		LogicalKeyStoreName: aws_cryptography_keyStore_GetKeyStoreInfoOutput_logicalKeyStoreName_FromDafny(dafnyOutput.Dtor_logicalKeyStoreName()),
		GrantTokens:         aws_cryptography_keyStore_GetKeyStoreInfoOutput_grantTokens_FromDafny(dafnyOutput.Dtor_grantTokens()),
		KmsConfiguration:    aws_cryptography_keyStore_GetKeyStoreInfoOutput_kmsConfiguration_FromDafny(dafnyOutput.Dtor_kmsConfiguration()),
	}

}

func VersionKeyInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.VersionKeyInput) awscryptographykeystoresmithygeneratedtypes.VersionKeyInput {

	return awscryptographykeystoresmithygeneratedtypes.VersionKeyInput{BranchKeyIdentifier: aws_cryptography_keyStore_VersionKeyInput_branchKeyIdentifier_FromDafny(dafnyInput.Dtor_branchKeyIdentifier())}

}

func VersionKeyOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.VersionKeyOutput) awscryptographykeystoresmithygeneratedtypes.VersionKeyOutput {

	return awscryptographykeystoresmithygeneratedtypes.VersionKeyOutput{}

}

func DeleteMutationInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.DeleteMutationInput) awscryptographykeystoresmithygeneratedtypes.DeleteMutationInput {

	return awscryptographykeystoresmithygeneratedtypes.DeleteMutationInput{MutationCommitment: aws_cryptography_keyStore_DeleteMutationInput_MutationCommitment_FromDafny(dafnyInput.Dtor_MutationCommitment())}

}

func DeleteMutationOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.DeleteMutationOutput) awscryptographykeystoresmithygeneratedtypes.DeleteMutationOutput {

	return awscryptographykeystoresmithygeneratedtypes.DeleteMutationOutput{}

}

func KeyStorageInterface_FromDafny(dafnyResource AwsCryptographyKeyStoreTypes.IKeyStorageInterface) awscryptographykeystoresmithygeneratedtypes.IKeyStorageInterface {
	val, ok := dafnyResource.(*KeyStorageInterfaceNativeWrapper)
	if ok {
		return val.Impl
	}

	return &KeyStorageInterface{dafnyResource}
}

func GetEncryptedActiveBranchKeyInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.GetEncryptedActiveBranchKeyInput) awscryptographykeystoresmithygeneratedtypes.GetEncryptedActiveBranchKeyInput {

	return awscryptographykeystoresmithygeneratedtypes.GetEncryptedActiveBranchKeyInput{Identifier: aws_cryptography_keyStore_GetEncryptedActiveBranchKeyInput_Identifier_FromDafny(dafnyInput.Dtor_Identifier())}

}

func GetEncryptedActiveBranchKeyOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.GetEncryptedActiveBranchKeyOutput) awscryptographykeystoresmithygeneratedtypes.GetEncryptedActiveBranchKeyOutput {

	return awscryptographykeystoresmithygeneratedtypes.GetEncryptedActiveBranchKeyOutput{Item: aws_cryptography_keyStore_GetEncryptedActiveBranchKeyOutput_Item_FromDafny(dafnyOutput.Dtor_Item())}

}

func GetEncryptedBeaconKeyInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.GetEncryptedBeaconKeyInput) awscryptographykeystoresmithygeneratedtypes.GetEncryptedBeaconKeyInput {

	return awscryptographykeystoresmithygeneratedtypes.GetEncryptedBeaconKeyInput{Identifier: aws_cryptography_keyStore_GetEncryptedBeaconKeyInput_Identifier_FromDafny(dafnyInput.Dtor_Identifier())}

}

func GetEncryptedBeaconKeyOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.GetEncryptedBeaconKeyOutput) awscryptographykeystoresmithygeneratedtypes.GetEncryptedBeaconKeyOutput {

	return awscryptographykeystoresmithygeneratedtypes.GetEncryptedBeaconKeyOutput{Item: aws_cryptography_keyStore_GetEncryptedBeaconKeyOutput_Item_FromDafny(dafnyOutput.Dtor_Item())}

}

func GetEncryptedBranchKeyVersionInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.GetEncryptedBranchKeyVersionInput) awscryptographykeystoresmithygeneratedtypes.GetEncryptedBranchKeyVersionInput {

	return awscryptographykeystoresmithygeneratedtypes.GetEncryptedBranchKeyVersionInput{Identifier: aws_cryptography_keyStore_GetEncryptedBranchKeyVersionInput_Identifier_FromDafny(dafnyInput.Dtor_Identifier()),
		Version: aws_cryptography_keyStore_GetEncryptedBranchKeyVersionInput_Version_FromDafny(dafnyInput.Dtor_Version()),
	}

}

func GetEncryptedBranchKeyVersionOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.GetEncryptedBranchKeyVersionOutput) awscryptographykeystoresmithygeneratedtypes.GetEncryptedBranchKeyVersionOutput {

	return awscryptographykeystoresmithygeneratedtypes.GetEncryptedBranchKeyVersionOutput{Item: aws_cryptography_keyStore_GetEncryptedBranchKeyVersionOutput_Item_FromDafny(dafnyOutput.Dtor_Item())}

}

func GetItemsForInitializeMutationInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.GetItemsForInitializeMutationInput) awscryptographykeystoresmithygeneratedtypes.GetItemsForInitializeMutationInput {

	return awscryptographykeystoresmithygeneratedtypes.GetItemsForInitializeMutationInput{Identifier: aws_cryptography_keyStore_GetItemsForInitializeMutationInput_Identifier_FromDafny(dafnyInput.Dtor_Identifier())}

}

func GetItemsForInitializeMutationOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.GetItemsForInitializeMutationOutput) awscryptographykeystoresmithygeneratedtypes.GetItemsForInitializeMutationOutput {

	return awscryptographykeystoresmithygeneratedtypes.GetItemsForInitializeMutationOutput{ActiveItem: aws_cryptography_keyStore_GetItemsForInitializeMutationOutput_ActiveItem_FromDafny(dafnyOutput.Dtor_ActiveItem()),
		BeaconItem:         aws_cryptography_keyStore_GetItemsForInitializeMutationOutput_BeaconItem_FromDafny(dafnyOutput.Dtor_BeaconItem()),
		MutationCommitment: aws_cryptography_keyStore_GetItemsForInitializeMutationOutput_MutationCommitment_FromDafny(dafnyOutput.Dtor_MutationCommitment().UnwrapOr(nil)),
		MutationIndex:      aws_cryptography_keyStore_GetItemsForInitializeMutationOutput_MutationIndex_FromDafny(dafnyOutput.Dtor_MutationIndex().UnwrapOr(nil)),
	}

}

func GetKeyStorageInfoInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.GetKeyStorageInfoInput) awscryptographykeystoresmithygeneratedtypes.GetKeyStorageInfoInput {

	return awscryptographykeystoresmithygeneratedtypes.GetKeyStorageInfoInput{}

}

func GetKeyStorageInfoOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.GetKeyStorageInfoOutput) awscryptographykeystoresmithygeneratedtypes.GetKeyStorageInfoOutput {

	return awscryptographykeystoresmithygeneratedtypes.GetKeyStorageInfoOutput{Name: aws_cryptography_keyStore_GetKeyStorageInfoOutput_Name_FromDafny(dafnyOutput.Dtor_Name()),
		LogicalName: aws_cryptography_keyStore_GetKeyStorageInfoOutput_LogicalName_FromDafny(dafnyOutput.Dtor_LogicalName()),
	}

}

func GetMutationInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.GetMutationInput) awscryptographykeystoresmithygeneratedtypes.GetMutationInput {

	return awscryptographykeystoresmithygeneratedtypes.GetMutationInput{Identifier: aws_cryptography_keyStore_GetMutationInput_Identifier_FromDafny(dafnyInput.Dtor_Identifier())}

}

func GetMutationOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.GetMutationOutput) awscryptographykeystoresmithygeneratedtypes.GetMutationOutput {

	return awscryptographykeystoresmithygeneratedtypes.GetMutationOutput{MutationCommitment: aws_cryptography_keyStore_GetMutationOutput_MutationCommitment_FromDafny(dafnyOutput.Dtor_MutationCommitment().UnwrapOr(nil)),
		MutationIndex: aws_cryptography_keyStore_GetMutationOutput_MutationIndex_FromDafny(dafnyOutput.Dtor_MutationIndex().UnwrapOr(nil)),
	}

}

func QueryForVersionsInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.QueryForVersionsInput) awscryptographykeystoresmithygeneratedtypes.QueryForVersionsInput {

	return awscryptographykeystoresmithygeneratedtypes.QueryForVersionsInput{ExclusiveStartKey: aws_cryptography_keyStore_QueryForVersionsInput_ExclusiveStartKey_FromDafny(dafnyInput.Dtor_ExclusiveStartKey().UnwrapOr(nil)),
		Identifier: aws_cryptography_keyStore_QueryForVersionsInput_Identifier_FromDafny(dafnyInput.Dtor_Identifier()),
		PageSize:   aws_cryptography_keyStore_QueryForVersionsInput_PageSize_FromDafny(dafnyInput.Dtor_PageSize()),
	}

}

func QueryForVersionsOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.QueryForVersionsOutput) awscryptographykeystoresmithygeneratedtypes.QueryForVersionsOutput {

	return awscryptographykeystoresmithygeneratedtypes.QueryForVersionsOutput{ExclusiveStartKey: aws_cryptography_keyStore_QueryForVersionsOutput_ExclusiveStartKey_FromDafny(dafnyOutput.Dtor_ExclusiveStartKey()),
		Items: aws_cryptography_keyStore_QueryForVersionsOutput_Items_FromDafny(dafnyOutput.Dtor_Items()),
	}

}

func WriteAtomicMutationInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.WriteAtomicMutationInput) awscryptographykeystoresmithygeneratedtypes.WriteAtomicMutationInput {

	return awscryptographykeystoresmithygeneratedtypes.WriteAtomicMutationInput{Active: aws_cryptography_keyStore_WriteAtomicMutationInput_Active_FromDafny(dafnyInput.Dtor_Active()),
		Version: aws_cryptography_keyStore_WriteAtomicMutationInput_Version_FromDafny(dafnyInput.Dtor_Version()),
		Beacon:  aws_cryptography_keyStore_WriteAtomicMutationInput_Beacon_FromDafny(dafnyInput.Dtor_Beacon()),
		Items:   aws_cryptography_keyStore_WriteAtomicMutationInput_Items_FromDafny(dafnyInput.Dtor_Items()),
	}

}

func WriteAtomicMutationOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.WriteAtomicMutationOutput) awscryptographykeystoresmithygeneratedtypes.WriteAtomicMutationOutput {

	return awscryptographykeystoresmithygeneratedtypes.WriteAtomicMutationOutput{}

}

func WriteInitializeMutationInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.WriteInitializeMutationInput) awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationInput {

	return awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationInput{Active: aws_cryptography_keyStore_WriteInitializeMutationInput_Active_FromDafny(dafnyInput.Dtor_Active()),
		Version:            aws_cryptography_keyStore_WriteInitializeMutationInput_Version_FromDafny(dafnyInput.Dtor_Version()),
		Beacon:             aws_cryptography_keyStore_WriteInitializeMutationInput_Beacon_FromDafny(dafnyInput.Dtor_Beacon()),
		MutationCommitment: aws_cryptography_keyStore_WriteInitializeMutationInput_MutationCommitment_FromDafny(dafnyInput.Dtor_MutationCommitment()),
		MutationIndex:      aws_cryptography_keyStore_WriteInitializeMutationInput_MutationIndex_FromDafny(dafnyInput.Dtor_MutationIndex()),
	}

}

func WriteInitializeMutationOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.WriteInitializeMutationOutput) awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationOutput {

	return awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationOutput{}

}

func WriteMutatedVersionsInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.WriteMutatedVersionsInput) awscryptographykeystoresmithygeneratedtypes.WriteMutatedVersionsInput {

	return awscryptographykeystoresmithygeneratedtypes.WriteMutatedVersionsInput{Items: aws_cryptography_keyStore_WriteMutatedVersionsInput_Items_FromDafny(dafnyInput.Dtor_Items()),
		MutationCommitment: aws_cryptography_keyStore_WriteMutatedVersionsInput_MutationCommitment_FromDafny(dafnyInput.Dtor_MutationCommitment()),
		MutationIndex:      aws_cryptography_keyStore_WriteMutatedVersionsInput_MutationIndex_FromDafny(dafnyInput.Dtor_MutationIndex()),
		EndMutation:        aws_cryptography_keyStore_WriteMutatedVersionsInput_EndMutation_FromDafny(dafnyInput.Dtor_EndMutation()),
	}

}

func WriteMutatedVersionsOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.WriteMutatedVersionsOutput) awscryptographykeystoresmithygeneratedtypes.WriteMutatedVersionsOutput {

	return awscryptographykeystoresmithygeneratedtypes.WriteMutatedVersionsOutput{}

}

func WriteMutationIndexInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.WriteMutationIndexInput) awscryptographykeystoresmithygeneratedtypes.WriteMutationIndexInput {

	return awscryptographykeystoresmithygeneratedtypes.WriteMutationIndexInput{MutationCommitment: aws_cryptography_keyStore_WriteMutationIndexInput_MutationCommitment_FromDafny(dafnyInput.Dtor_MutationCommitment()),
		MutationIndex: aws_cryptography_keyStore_WriteMutationIndexInput_MutationIndex_FromDafny(dafnyInput.Dtor_MutationIndex()),
	}

}

func WriteMutationIndexOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.WriteMutationIndexOutput) awscryptographykeystoresmithygeneratedtypes.WriteMutationIndexOutput {

	return awscryptographykeystoresmithygeneratedtypes.WriteMutationIndexOutput{}

}

func WriteNewEncryptedBranchKeyInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.WriteNewEncryptedBranchKeyInput) awscryptographykeystoresmithygeneratedtypes.WriteNewEncryptedBranchKeyInput {

	return awscryptographykeystoresmithygeneratedtypes.WriteNewEncryptedBranchKeyInput{Active: aws_cryptography_keyStore_WriteNewEncryptedBranchKeyInput_Active_FromDafny(dafnyInput.Dtor_Active()),
		Version: aws_cryptography_keyStore_WriteNewEncryptedBranchKeyInput_Version_FromDafny(dafnyInput.Dtor_Version()),
		Beacon:  aws_cryptography_keyStore_WriteNewEncryptedBranchKeyInput_Beacon_FromDafny(dafnyInput.Dtor_Beacon()),
	}

}

func WriteNewEncryptedBranchKeyOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.WriteNewEncryptedBranchKeyOutput) awscryptographykeystoresmithygeneratedtypes.WriteNewEncryptedBranchKeyOutput {

	return awscryptographykeystoresmithygeneratedtypes.WriteNewEncryptedBranchKeyOutput{}

}

func WriteNewEncryptedBranchKeyVersionInput_FromDafny(dafnyInput AwsCryptographyKeyStoreTypes.WriteNewEncryptedBranchKeyVersionInput) awscryptographykeystoresmithygeneratedtypes.WriteNewEncryptedBranchKeyVersionInput {

	return awscryptographykeystoresmithygeneratedtypes.WriteNewEncryptedBranchKeyVersionInput{Active: aws_cryptography_keyStore_WriteNewEncryptedBranchKeyVersionInput_Active_FromDafny(dafnyInput.Dtor_Active()),
		Version: aws_cryptography_keyStore_WriteNewEncryptedBranchKeyVersionInput_Version_FromDafny(dafnyInput.Dtor_Version()),
	}

}

func WriteNewEncryptedBranchKeyVersionOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.WriteNewEncryptedBranchKeyVersionOutput) awscryptographykeystoresmithygeneratedtypes.WriteNewEncryptedBranchKeyVersionOutput {

	return awscryptographykeystoresmithygeneratedtypes.WriteNewEncryptedBranchKeyVersionOutput{}

}

func AlreadyExistsConditionFailed_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.Error) awscryptographykeystoresmithygeneratedtypes.AlreadyExistsConditionFailed {
	return awscryptographykeystoresmithygeneratedtypes.AlreadyExistsConditionFailed{Message: aws_cryptography_keyStore_AlreadyExistsConditionFailed_message_FromDafny(dafnyOutput.Dtor_message())}

}

func BranchKeyCiphertextException_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.Error) awscryptographykeystoresmithygeneratedtypes.BranchKeyCiphertextException {
	return awscryptographykeystoresmithygeneratedtypes.BranchKeyCiphertextException{Message: aws_cryptography_keyStore_BranchKeyCiphertextException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func HierarchyVersionException_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.Error) awscryptographykeystoresmithygeneratedtypes.HierarchyVersionException {
	return awscryptographykeystoresmithygeneratedtypes.HierarchyVersionException{Message: aws_cryptography_keyStore_HierarchyVersionException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func KeyManagementException_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.Error) awscryptographykeystoresmithygeneratedtypes.KeyManagementException {
	return awscryptographykeystoresmithygeneratedtypes.KeyManagementException{Message: aws_cryptography_keyStore_KeyManagementException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func KeyStorageException_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.Error) awscryptographykeystoresmithygeneratedtypes.KeyStorageException {
	return awscryptographykeystoresmithygeneratedtypes.KeyStorageException{Message: aws_cryptography_keyStore_KeyStorageException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func KeyStoreException_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.Error) awscryptographykeystoresmithygeneratedtypes.KeyStoreException {
	return awscryptographykeystoresmithygeneratedtypes.KeyStoreException{Message: aws_cryptography_keyStore_KeyStoreException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func MutationCommitmentConditionFailed_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.Error) awscryptographykeystoresmithygeneratedtypes.MutationCommitmentConditionFailed {
	return awscryptographykeystoresmithygeneratedtypes.MutationCommitmentConditionFailed{Message: aws_cryptography_keyStore_MutationCommitmentConditionFailed_message_FromDafny(dafnyOutput.Dtor_message())}

}

func NoLongerExistsConditionFailed_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.Error) awscryptographykeystoresmithygeneratedtypes.NoLongerExistsConditionFailed {
	return awscryptographykeystoresmithygeneratedtypes.NoLongerExistsConditionFailed{Message: aws_cryptography_keyStore_NoLongerExistsConditionFailed_message_FromDafny(dafnyOutput.Dtor_message())}

}

func OldEncConditionFailed_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.Error) awscryptographykeystoresmithygeneratedtypes.OldEncConditionFailed {
	return awscryptographykeystoresmithygeneratedtypes.OldEncConditionFailed{Message: aws_cryptography_keyStore_OldEncConditionFailed_message_FromDafny(dafnyOutput.Dtor_message())}

}

func VersionRaceException_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.Error) awscryptographykeystoresmithygeneratedtypes.VersionRaceException {
	return awscryptographykeystoresmithygeneratedtypes.VersionRaceException{Message: aws_cryptography_keyStore_VersionRaceException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func CollectionOfErrors_Output_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.Error) awscryptographykeystoresmithygeneratedtypes.CollectionOfErrors {
	listOfErrors := dafnyOutput.Dtor_list()
	message := dafnyOutput.Dtor_message()
	t := awscryptographykeystoresmithygeneratedtypes.CollectionOfErrors{}
	for i := dafny.Iterate(listOfErrors); ; {
		val, ok := i()
		if !ok {
			break
		}
		err := val.(AwsCryptographyKeyStoreTypes.Error)
		t.ListOfErrors = append(t.ListOfErrors, Error_FromDafny(err))

	}
	t.Message = func() string {
		var s string
		for i := dafny.Iterate(message); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
	return t
}
func OpaqueError_Output_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.Error) awscryptographykeystoresmithygeneratedtypes.OpaqueError {
	return awscryptographykeystoresmithygeneratedtypes.OpaqueError{
		ErrObject: dafnyOutput.Dtor_obj(),
	}
}

func Error_FromDafny(err AwsCryptographyKeyStoreTypes.Error) error {
	// Service Errors
	if err.Is_AlreadyExistsConditionFailed() {
		return AlreadyExistsConditionFailed_FromDafny(err)
	}

	if err.Is_BranchKeyCiphertextException() {
		return BranchKeyCiphertextException_FromDafny(err)
	}

	if err.Is_HierarchyVersionException() {
		return HierarchyVersionException_FromDafny(err)
	}

	if err.Is_KeyManagementException() {
		return KeyManagementException_FromDafny(err)
	}

	if err.Is_KeyStorageException() {
		return KeyStorageException_FromDafny(err)
	}

	if err.Is_KeyStoreException() {
		return KeyStoreException_FromDafny(err)
	}

	if err.Is_MutationCommitmentConditionFailed() {
		return MutationCommitmentConditionFailed_FromDafny(err)
	}

	if err.Is_NoLongerExistsConditionFailed() {
		return NoLongerExistsConditionFailed_FromDafny(err)
	}

	if err.Is_OldEncConditionFailed() {
		return OldEncConditionFailed_FromDafny(err)
	}

	if err.Is_VersionRaceException() {
		return VersionRaceException_FromDafny(err)
	}

	//DependentErrors
	if err.Is_ComAmazonawsDynamodb() {
		return comamazonawsdynamodbsmithygenerated.Error_FromDafny(err.Dtor_ComAmazonawsDynamodb())
	}

	if err.Is_ComAmazonawsKms() {
		return comamazonawskmssmithygenerated.Error_FromDafny(err.Dtor_ComAmazonawsKms())
	}

	//Unmodelled Errors
	if err.Is_CollectionOfErrors() {
		return CollectionOfErrors_Output_FromDafny(err)
	}

	return OpaqueError_Output_FromDafny(err)
}

func KeyStoreConfig_FromDafny(dafnyOutput AwsCryptographyKeyStoreTypes.KeyStoreConfig) awscryptographykeystoresmithygeneratedtypes.KeyStoreConfig {
	return awscryptographykeystoresmithygeneratedtypes.KeyStoreConfig{KmsConfiguration: aws_cryptography_keyStore_KeyStoreConfig_kmsConfiguration_FromDafny(dafnyOutput.Dtor_kmsConfiguration()),
		LogicalKeyStoreName: aws_cryptography_keyStore_KeyStoreConfig_logicalKeyStoreName_FromDafny(dafnyOutput.Dtor_logicalKeyStoreName()),
		KeyManagement:       aws_cryptography_keyStore_KeyStoreConfig_keyManagement_FromDafny(dafnyOutput.Dtor_keyManagement().UnwrapOr(nil)),
		DdbTableName:        aws_cryptography_keyStore_KeyStoreConfig_ddbTableName_FromDafny(dafnyOutput.Dtor_ddbTableName().UnwrapOr(nil)),
		Id:                  aws_cryptography_keyStore_KeyStoreConfig_id_FromDafny(dafnyOutput.Dtor_id().UnwrapOr(nil)),
		GrantTokens:         aws_cryptography_keyStore_KeyStoreConfig_grantTokens_FromDafny(dafnyOutput.Dtor_grantTokens().UnwrapOr(nil)),
		Storage:             aws_cryptography_keyStore_KeyStoreConfig_storage_FromDafny(dafnyOutput.Dtor_storage().UnwrapOr(nil)),
		DdbClient:           aws_cryptography_keyStore_KeyStoreConfig_ddbClient_FromDafny(dafnyOutput.Dtor_ddbClient().UnwrapOr(nil)),
		KmsClient:           aws_cryptography_keyStore_KeyStoreConfig_kmsClient_FromDafny(dafnyOutput.Dtor_kmsClient().UnwrapOr(nil)),
	}

}

func ActiveHierarchicalSymmetric_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.ActiveHierarchicalSymmetric {
	return awscryptographykeystoresmithygeneratedtypes.ActiveHierarchicalSymmetric{Version: aws_cryptography_keyStore_ActiveHierarchicalSymmetric_Version_FromDafny(input.(AwsCryptographyKeyStoreTypes.ActiveHierarchicalSymmetric).Dtor_Version())}

}

func ActiveHierarchicalSymmetricBeacon_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.ActiveHierarchicalSymmetricBeacon {
	return awscryptographykeystoresmithygeneratedtypes.ActiveHierarchicalSymmetricBeacon{}

}

func AwsKms_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.AwsKms {
	return awscryptographykeystoresmithygeneratedtypes.AwsKms{GrantTokens: aws_cryptography_keyStore_AwsKms_grantTokens_FromDafny(input.(AwsCryptographyKeyStoreTypes.AwsKms).Dtor_grantTokens().UnwrapOr(nil)),
		KmsClient: aws_cryptography_keyStore_AwsKms_kmsClient_FromDafny(input.(AwsCryptographyKeyStoreTypes.AwsKms).Dtor_kmsClient().UnwrapOr(nil)),
	}

}

func MutationCommitment_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.MutationCommitment {
	return awscryptographykeystoresmithygeneratedtypes.MutationCommitment{Identifier: aws_cryptography_keyStore_MutationCommitment_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationCommitment_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationCommitment_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_UUID()),
		Original:       aws_cryptography_keyStore_MutationCommitment_Original_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Original()),
		Terminal:       aws_cryptography_keyStore_MutationCommitment_Terminal_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Terminal()),
		Input:          aws_cryptography_keyStore_MutationCommitment_Input_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Input()),
		CiphertextBlob: aws_cryptography_keyStore_MutationCommitment_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CiphertextBlob()),
	}

}

func DynamoDBTable_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.DynamoDBTable {
	return awscryptographykeystoresmithygeneratedtypes.DynamoDBTable{DdbTableName: aws_cryptography_keyStore_DynamoDBTable_ddbTableName_FromDafny(input.(AwsCryptographyKeyStoreTypes.DynamoDBTable).Dtor_ddbTableName()),
		DdbClient: aws_cryptography_keyStore_DynamoDBTable_ddbClient_FromDafny(input.(AwsCryptographyKeyStoreTypes.DynamoDBTable).Dtor_ddbClient().UnwrapOr(nil)),
	}

}

func HierarchicalSymmetric_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.HierarchicalSymmetric {
	return awscryptographykeystoresmithygeneratedtypes.HierarchicalSymmetric{Version: aws_cryptography_keyStore_HierarchicalSymmetric_Version_FromDafny(input.(AwsCryptographyKeyStoreTypes.HierarchicalSymmetric).Dtor_Version())}

}

func HierarchicalKeyType_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.HierarchicalKeyType {
	var union awscryptographykeystoresmithygeneratedtypes.HierarchicalKeyType

	if (input.(AwsCryptographyKeyStoreTypes.HierarchicalKeyType)).Is_ActiveHierarchicalSymmetricVersion() {

		union = &awscryptographykeystoresmithygeneratedtypes.HierarchicalKeyTypeMemberActiveHierarchicalSymmetricVersion{
			Value: (aws_cryptography_keyStore_HierarchicalKeyType_ActiveHierarchicalSymmetricVersion_FromDafny((input.(AwsCryptographyKeyStoreTypes.HierarchicalKeyType)).Dtor_ActiveHierarchicalSymmetricVersion())),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.HierarchicalKeyType)).Is_HierarchicalSymmetricVersion() {

		union = &awscryptographykeystoresmithygeneratedtypes.HierarchicalKeyTypeMemberHierarchicalSymmetricVersion{
			Value: (aws_cryptography_keyStore_HierarchicalKeyType_HierarchicalSymmetricVersion_FromDafny((input.(AwsCryptographyKeyStoreTypes.HierarchicalKeyType)).Dtor_HierarchicalSymmetricVersion())),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.HierarchicalKeyType)).Is_ActiveHierarchicalSymmetricBeacon() {

		union = &awscryptographykeystoresmithygeneratedtypes.HierarchicalKeyTypeMemberActiveHierarchicalSymmetricBeacon{
			Value: (aws_cryptography_keyStore_HierarchicalKeyType_ActiveHierarchicalSymmetricBeacon_FromDafny((input.(AwsCryptographyKeyStoreTypes.HierarchicalKeyType)).Dtor_ActiveHierarchicalSymmetricBeacon())),
		}
	}

	return union

}

func EncryptedHierarchicalKey_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}

}

func MutationIndex_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.MutationIndex {
	return awscryptographykeystoresmithygeneratedtypes.MutationIndex{Identifier: aws_cryptography_keyStore_MutationIndex_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationIndex_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationIndex_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_UUID()),
		PageIndex:      aws_cryptography_keyStore_MutationIndex_PageIndex_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_PageIndex()),
		CiphertextBlob: aws_cryptography_keyStore_MutationIndex_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CiphertextBlob()),
	}

}

func HierarchyVersion_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.HierarchyVersion {
	return func() awscryptographykeystoresmithygeneratedtypes.HierarchyVersion {
		var u awscryptographykeystoresmithygeneratedtypes.HierarchyVersion
		inputEnum := input.(AwsCryptographyKeyStoreTypes.HierarchyVersion)
		index := -1
		for allEnums := dafny.Iterate(AwsCryptographyKeyStoreTypes.CompanionStruct_HierarchyVersion_{}.AllSingletonConstructors()); ; {
			enum, ok := allEnums()
			if ok {
				index++
				if enum.(AwsCryptographyKeyStoreTypes.HierarchyVersion).Equals(inputEnum) {
					break
				}
			}
		}

		return u.Values()[index]
	}()

}

func KeyManagement_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.KeyManagement {
	var union awscryptographykeystoresmithygeneratedtypes.KeyManagement

	if (input.(AwsCryptographyKeyStoreTypes.KeyManagement)).Is_kms() {

		union = &awscryptographykeystoresmithygeneratedtypes.KeyManagementMemberkms{
			Value: (aws_cryptography_keyStore_KeyManagement_kms_FromDafny((input.(AwsCryptographyKeyStoreTypes.KeyManagement)).Dtor_kms())),
		}
	}

	return union

}

func OverWriteEncryptedHierarchicalKey_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey{Item: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Item_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Item()),
		Old: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Old_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Old()),
	}

}

func WriteInitializeMutationVersion_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationVersion {
	var union awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationVersion

	if (input.(AwsCryptographyKeyStoreTypes.WriteInitializeMutationVersion)).Is_rotate() {

		union = &awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationVersionMemberrotate{
			Value: (aws_cryptography_keyStore_WriteInitializeMutationVersion_rotate_FromDafny((input.(AwsCryptographyKeyStoreTypes.WriteInitializeMutationVersion)).Dtor_rotate())),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.WriteInitializeMutationVersion)).Is_mutate() {

		union = &awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationVersionMembermutate{
			Value: (aws_cryptography_keyStore_WriteInitializeMutationVersion_mutate_FromDafny((input.(AwsCryptographyKeyStoreTypes.WriteInitializeMutationVersion)).Dtor_mutate())),
		}
	}

	return union

}

func OverWriteMutationIndex_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.OverWriteMutationIndex {
	return awscryptographykeystoresmithygeneratedtypes.OverWriteMutationIndex{Index: aws_cryptography_keyStore_OverWriteMutationIndex_Index_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteMutationIndex).Dtor_Index()),
		Old: aws_cryptography_keyStore_OverWriteMutationIndex_Old_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteMutationIndex).Dtor_Old()),
	}

}

func Storage_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.Storage {
	var union awscryptographykeystoresmithygeneratedtypes.Storage

	if (input.(AwsCryptographyKeyStoreTypes.Storage)).Is_ddb() {

		union = &awscryptographykeystoresmithygeneratedtypes.StorageMemberddb{
			Value: (aws_cryptography_keyStore_Storage_ddb_FromDafny((input.(AwsCryptographyKeyStoreTypes.Storage)).Dtor_ddb())),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.Storage)).Is_custom() {

		union = &awscryptographykeystoresmithygeneratedtypes.StorageMembercustom{
			Value: (KeyStorageInterface_FromDafny((input.(AwsCryptographyKeyStoreTypes.Storage)).Dtor_custom().(AwsCryptographyKeyStoreTypes.IKeyStorageInterface))),
		}
	}

	return union

}

func aws_cryptography_keyStore_CreateKeyInput_branchKeyIdentifier_FromDafny(input interface{}) *string {
	return func() *string {
		var s string
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_CreateKeyInput_encryptionContext_FromDafny(input interface{}) map[string]string {
	var m map[string]string = make(map[string]string)
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Map).Items()); ; {
		val, ok := i()
		if !ok {
			break
		}
		m[aws_cryptography_keyStore_EncryptionContext_key_FromDafny((*val.(dafny.Tuple).IndexInt(0)))] = aws_cryptography_keyStore_EncryptionContext_value_FromDafny((*val.(dafny.Tuple).IndexInt(1)))
	}
	return m

}
func aws_cryptography_keyStore_EncryptionContext_key_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				// UTF bytes should be always converted from bytes to string in go
				// Otherwise go treats the string as a unicode codepoint

				var valUint, _ = val.(uint8)
				var byteSlice = []byte{valUint}
				s = s + string(byteSlice)

			}
		}
	}()
}
func aws_cryptography_keyStore_EncryptionContext_value_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				// UTF bytes should be always converted from bytes to string in go
				// Otherwise go treats the string as a unicode codepoint

				var valUint, _ = val.(uint8)
				var byteSlice = []byte{valUint}
				s = s + string(byteSlice)

			}
		}
	}()
}
func aws_cryptography_keyStore_CreateKeyOutput_branchKeyIdentifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_CreateKeyStoreOutput_tableArn_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetActiveBranchKeyInput_branchKeyIdentifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetActiveBranchKeyOutput_branchKeyMaterials_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.BranchKeyMaterials {
	return awscryptographykeystoresmithygeneratedtypes.BranchKeyMaterials{BranchKeyIdentifier: aws_cryptography_keyStore_BranchKeyMaterials_branchKeyIdentifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.BranchKeyMaterials).Dtor_branchKeyIdentifier()),
		BranchKeyVersion:  aws_cryptography_keyStore_BranchKeyMaterials_branchKeyVersion_FromDafny(input.(AwsCryptographyKeyStoreTypes.BranchKeyMaterials).Dtor_branchKeyVersion()),
		EncryptionContext: aws_cryptography_keyStore_BranchKeyMaterials_encryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.BranchKeyMaterials).Dtor_encryptionContext()),
		BranchKey:         aws_cryptography_keyStore_BranchKeyMaterials_branchKey_FromDafny(input.(AwsCryptographyKeyStoreTypes.BranchKeyMaterials).Dtor_branchKey()),
	}
}
func aws_cryptography_keyStore_BranchKeyMaterials_branchKeyIdentifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_BranchKeyMaterials_branchKeyVersion_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				// UTF bytes should be always converted from bytes to string in go
				// Otherwise go treats the string as a unicode codepoint

				var valUint, _ = val.(uint8)
				var byteSlice = []byte{valUint}
				s = s + string(byteSlice)

			}
		}
	}()
}
func aws_cryptography_keyStore_BranchKeyMaterials_encryptionContext_FromDafny(input interface{}) map[string]string {
	var m map[string]string = make(map[string]string)
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Map).Items()); ; {
		val, ok := i()
		if !ok {
			break
		}
		m[aws_cryptography_keyStore_EncryptionContext_key_FromDafny((*val.(dafny.Tuple).IndexInt(0)))] = aws_cryptography_keyStore_EncryptionContext_value_FromDafny((*val.(dafny.Tuple).IndexInt(1)))
	}
	return m

}
func aws_cryptography_keyStore_BranchKeyMaterials_branchKey_FromDafny(input interface{}) []byte {
	return func() []byte {
		var b []byte
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetBeaconKeyInput_branchKeyIdentifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetBeaconKeyOutput_beaconKeyMaterials_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.BeaconKeyMaterials {
	return awscryptographykeystoresmithygeneratedtypes.BeaconKeyMaterials{BeaconKeyIdentifier: aws_cryptography_keyStore_BeaconKeyMaterials_beaconKeyIdentifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.BeaconKeyMaterials).Dtor_beaconKeyIdentifier()),
		EncryptionContext: aws_cryptography_keyStore_BeaconKeyMaterials_encryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.BeaconKeyMaterials).Dtor_encryptionContext()),
		BeaconKey:         aws_cryptography_keyStore_BeaconKeyMaterials_beaconKey_FromDafny(input.(AwsCryptographyKeyStoreTypes.BeaconKeyMaterials).Dtor_beaconKey().UnwrapOr(nil)),
		HmacKeys:          aws_cryptography_keyStore_BeaconKeyMaterials_hmacKeys_FromDafny(input.(AwsCryptographyKeyStoreTypes.BeaconKeyMaterials).Dtor_hmacKeys().UnwrapOr(nil)),
	}
}
func aws_cryptography_keyStore_BeaconKeyMaterials_beaconKeyIdentifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_BeaconKeyMaterials_encryptionContext_FromDafny(input interface{}) map[string]string {
	var m map[string]string = make(map[string]string)
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Map).Items()); ; {
		val, ok := i()
		if !ok {
			break
		}
		m[aws_cryptography_keyStore_EncryptionContext_key_FromDafny((*val.(dafny.Tuple).IndexInt(0)))] = aws_cryptography_keyStore_EncryptionContext_value_FromDafny((*val.(dafny.Tuple).IndexInt(1)))
	}
	return m

}
func aws_cryptography_keyStore_BeaconKeyMaterials_beaconKey_FromDafny(input interface{}) []byte {
	return func() []byte {
		var b []byte
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}()
}
func aws_cryptography_keyStore_BeaconKeyMaterials_hmacKeys_FromDafny(input interface{}) map[string][]byte {
	var m map[string][]byte = make(map[string][]byte)
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Map).Items()); ; {
		val, ok := i()
		if !ok {
			break
		}
		m[aws_cryptography_keyStore_HmacKeyMap_key_FromDafny((*val.(dafny.Tuple).IndexInt(0)))] = aws_cryptography_keyStore_HmacKeyMap_value_FromDafny((*val.(dafny.Tuple).IndexInt(1)))
	}
	return m

}
func aws_cryptography_keyStore_HmacKeyMap_key_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_HmacKeyMap_value_FromDafny(input interface{}) []byte {
	return func() []byte {
		var b []byte
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetBranchKeyVersionInput_branchKeyIdentifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetBranchKeyVersionInput_branchKeyVersion_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetBranchKeyVersionOutput_branchKeyMaterials_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.BranchKeyMaterials {
	return awscryptographykeystoresmithygeneratedtypes.BranchKeyMaterials{BranchKeyIdentifier: aws_cryptography_keyStore_BranchKeyMaterials_branchKeyIdentifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.BranchKeyMaterials).Dtor_branchKeyIdentifier()),
		BranchKeyVersion:  aws_cryptography_keyStore_BranchKeyMaterials_branchKeyVersion_FromDafny(input.(AwsCryptographyKeyStoreTypes.BranchKeyMaterials).Dtor_branchKeyVersion()),
		EncryptionContext: aws_cryptography_keyStore_BranchKeyMaterials_encryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.BranchKeyMaterials).Dtor_encryptionContext()),
		BranchKey:         aws_cryptography_keyStore_BranchKeyMaterials_branchKey_FromDafny(input.(AwsCryptographyKeyStoreTypes.BranchKeyMaterials).Dtor_branchKey()),
	}
}
func aws_cryptography_keyStore_GetKeyStoreInfoOutput_keyStoreId_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetKeyStoreInfoOutput_keyStoreName_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetKeyStoreInfoOutput_logicalKeyStoreName_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetKeyStoreInfoOutput_grantTokens_FromDafny(input interface{}) []string {
	fieldValue := make([]string, 0)
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, aws_cryptography_keyStore_GrantTokenList_member_FromDafny(val))
	}
	return fieldValue
}
func aws_cryptography_keyStore_GrantTokenList_member_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetKeyStoreInfoOutput_kmsConfiguration_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.KMSConfiguration {
	var union awscryptographykeystoresmithygeneratedtypes.KMSConfiguration

	if (input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Is_kmsKeyArn() {
		var dataSource = Wrappers.Companion_Option_.Create_Some_((input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Dtor_kmsKeyArn())
		union = &awscryptographykeystoresmithygeneratedtypes.KMSConfigurationMemberkmsKeyArn{
			Value: (aws_cryptography_keyStore_KMSConfiguration_kmsKeyArn_FromDafny(dataSource.UnwrapOr(nil))),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Is_kmsMRKeyArn() {
		var dataSource = Wrappers.Companion_Option_.Create_Some_((input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Dtor_kmsMRKeyArn())
		union = &awscryptographykeystoresmithygeneratedtypes.KMSConfigurationMemberkmsMRKeyArn{
			Value: (aws_cryptography_keyStore_KMSConfiguration_kmsMRKeyArn_FromDafny(dataSource.UnwrapOr(nil))),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Is_discovery() {

		union = &awscryptographykeystoresmithygeneratedtypes.KMSConfigurationMemberdiscovery{
			Value: (aws_cryptography_keyStore_KMSConfiguration_discovery_FromDafny((input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Dtor_discovery())),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Is_mrDiscovery() {

		union = &awscryptographykeystoresmithygeneratedtypes.KMSConfigurationMembermrDiscovery{
			Value: (aws_cryptography_keyStore_KMSConfiguration_mrDiscovery_FromDafny((input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Dtor_mrDiscovery())),
		}
	}

	return union

}
func aws_cryptography_keyStore_KMSConfiguration_kmsKeyArn_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_KMSConfiguration_kmsMRKeyArn_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_KMSConfiguration_discovery_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.Discovery {
	return awscryptographykeystoresmithygeneratedtypes.Discovery{}
}
func aws_cryptography_keyStore_KMSConfiguration_mrDiscovery_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.MRDiscovery {
	return awscryptographykeystoresmithygeneratedtypes.MRDiscovery{Region: aws_cryptography_keyStore_MRDiscovery_region_FromDafny(input.(AwsCryptographyKeyStoreTypes.MRDiscovery).Dtor_region())}
}
func aws_cryptography_keyStore_MRDiscovery_region_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_VersionKeyInput_branchKeyIdentifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_DeleteMutationInput_MutationCommitment_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.MutationCommitment {
	return awscryptographykeystoresmithygeneratedtypes.MutationCommitment{Identifier: aws_cryptography_keyStore_MutationCommitment_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationCommitment_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationCommitment_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_UUID()),
		Original:       aws_cryptography_keyStore_MutationCommitment_Original_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Original()),
		Terminal:       aws_cryptography_keyStore_MutationCommitment_Terminal_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Terminal()),
		Input:          aws_cryptography_keyStore_MutationCommitment_Input_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Input()),
		CiphertextBlob: aws_cryptography_keyStore_MutationCommitment_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_MutationCommitment_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_MutationCommitment_CreateTime_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_MutationCommitment_UUID_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_MutationCommitment_Original_FromDafny(input interface{}) []byte {
	return func() []byte {
		var b []byte
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}()
}
func aws_cryptography_keyStore_MutationCommitment_Terminal_FromDafny(input interface{}) []byte {
	return func() []byte {
		var b []byte
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}()
}
func aws_cryptography_keyStore_MutationCommitment_Input_FromDafny(input interface{}) []byte {
	return func() []byte {
		var b []byte
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}()
}
func aws_cryptography_keyStore_MutationCommitment_CiphertextBlob_FromDafny(input interface{}) []byte {
	return func() []byte {
		var b []byte
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetEncryptedActiveBranchKeyInput_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetEncryptedActiveBranchKeyOutput_Item_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.HierarchicalKeyType {
	var union awscryptographykeystoresmithygeneratedtypes.HierarchicalKeyType

	if (input.(AwsCryptographyKeyStoreTypes.HierarchicalKeyType)).Is_ActiveHierarchicalSymmetricVersion() {

		union = &awscryptographykeystoresmithygeneratedtypes.HierarchicalKeyTypeMemberActiveHierarchicalSymmetricVersion{
			Value: (aws_cryptography_keyStore_HierarchicalKeyType_ActiveHierarchicalSymmetricVersion_FromDafny((input.(AwsCryptographyKeyStoreTypes.HierarchicalKeyType)).Dtor_ActiveHierarchicalSymmetricVersion())),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.HierarchicalKeyType)).Is_HierarchicalSymmetricVersion() {

		union = &awscryptographykeystoresmithygeneratedtypes.HierarchicalKeyTypeMemberHierarchicalSymmetricVersion{
			Value: (aws_cryptography_keyStore_HierarchicalKeyType_HierarchicalSymmetricVersion_FromDafny((input.(AwsCryptographyKeyStoreTypes.HierarchicalKeyType)).Dtor_HierarchicalSymmetricVersion())),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.HierarchicalKeyType)).Is_ActiveHierarchicalSymmetricBeacon() {

		union = &awscryptographykeystoresmithygeneratedtypes.HierarchicalKeyTypeMemberActiveHierarchicalSymmetricBeacon{
			Value: (aws_cryptography_keyStore_HierarchicalKeyType_ActiveHierarchicalSymmetricBeacon_FromDafny((input.(AwsCryptographyKeyStoreTypes.HierarchicalKeyType)).Dtor_ActiveHierarchicalSymmetricBeacon())),
		}
	}

	return union

}
func aws_cryptography_keyStore_HierarchicalKeyType_ActiveHierarchicalSymmetricVersion_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.ActiveHierarchicalSymmetric {
	return awscryptographykeystoresmithygeneratedtypes.ActiveHierarchicalSymmetric{Version: aws_cryptography_keyStore_ActiveHierarchicalSymmetric_Version_FromDafny(input.(AwsCryptographyKeyStoreTypes.ActiveHierarchicalSymmetric).Dtor_Version())}
}
func aws_cryptography_keyStore_ActiveHierarchicalSymmetric_Version_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_HierarchicalKeyType_HierarchicalSymmetricVersion_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.HierarchicalSymmetric {
	return awscryptographykeystoresmithygeneratedtypes.HierarchicalSymmetric{Version: aws_cryptography_keyStore_HierarchicalSymmetric_Version_FromDafny(input.(AwsCryptographyKeyStoreTypes.HierarchicalSymmetric).Dtor_Version())}
}
func aws_cryptography_keyStore_HierarchicalSymmetric_Version_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_HierarchicalKeyType_ActiveHierarchicalSymmetricBeacon_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.ActiveHierarchicalSymmetricBeacon {
	return awscryptographykeystoresmithygeneratedtypes.ActiveHierarchicalSymmetricBeacon{}
}
func aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input interface{}) map[string]string {
	var m map[string]string = make(map[string]string)
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Map).Items()); ; {
		val, ok := i()
		if !ok {
			break
		}
		m[aws_cryptography_keyStore_EncryptionContextString_key_FromDafny((*val.(dafny.Tuple).IndexInt(0)))] = aws_cryptography_keyStore_EncryptionContextString_value_FromDafny((*val.(dafny.Tuple).IndexInt(1)))
	}
	return m

}
func aws_cryptography_keyStore_EncryptionContextString_key_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_EncryptionContextString_value_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input interface{}) []byte {
	return func() []byte {
		var b []byte
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetEncryptedBeaconKeyInput_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetEncryptedBeaconKeyOutput_Item_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_GetEncryptedBranchKeyVersionInput_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetEncryptedBranchKeyVersionInput_Version_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetEncryptedBranchKeyVersionOutput_Item_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_GetItemsForInitializeMutationInput_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetItemsForInitializeMutationOutput_ActiveItem_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_GetItemsForInitializeMutationOutput_BeaconItem_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_GetItemsForInitializeMutationOutput_MutationCommitment_FromDafny(input interface{}) *awscryptographykeystoresmithygeneratedtypes.MutationCommitment {
	if input == nil {
		return nil
	}
	return &awscryptographykeystoresmithygeneratedtypes.MutationCommitment{Identifier: aws_cryptography_keyStore_MutationCommitment_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationCommitment_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationCommitment_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_UUID()),
		Original:       aws_cryptography_keyStore_MutationCommitment_Original_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Original()),
		Terminal:       aws_cryptography_keyStore_MutationCommitment_Terminal_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Terminal()),
		Input:          aws_cryptography_keyStore_MutationCommitment_Input_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Input()),
		CiphertextBlob: aws_cryptography_keyStore_MutationCommitment_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_GetItemsForInitializeMutationOutput_MutationIndex_FromDafny(input interface{}) *awscryptographykeystoresmithygeneratedtypes.MutationIndex {
	if input == nil {
		return nil
	}
	return &awscryptographykeystoresmithygeneratedtypes.MutationIndex{Identifier: aws_cryptography_keyStore_MutationIndex_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationIndex_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationIndex_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_UUID()),
		PageIndex:      aws_cryptography_keyStore_MutationIndex_PageIndex_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_PageIndex()),
		CiphertextBlob: aws_cryptography_keyStore_MutationIndex_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_MutationIndex_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_MutationIndex_CreateTime_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_MutationIndex_UUID_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_MutationIndex_PageIndex_FromDafny(input interface{}) []byte {
	return func() []byte {
		var b []byte
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}()
}
func aws_cryptography_keyStore_MutationIndex_CiphertextBlob_FromDafny(input interface{}) []byte {
	return func() []byte {
		var b []byte
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetKeyStorageInfoOutput_Name_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				// UTF bytes should be always converted from bytes to string in go
				// Otherwise go treats the string as a unicode codepoint

				var valUint, _ = val.(uint8)
				var byteSlice = []byte{valUint}
				s = s + string(byteSlice)

			}
		}
	}()
}
func aws_cryptography_keyStore_GetKeyStorageInfoOutput_LogicalName_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				// UTF bytes should be always converted from bytes to string in go
				// Otherwise go treats the string as a unicode codepoint

				var valUint, _ = val.(uint8)
				var byteSlice = []byte{valUint}
				s = s + string(byteSlice)

			}
		}
	}()
}
func aws_cryptography_keyStore_GetMutationInput_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_GetMutationOutput_MutationCommitment_FromDafny(input interface{}) *awscryptographykeystoresmithygeneratedtypes.MutationCommitment {
	if input == nil {
		return nil
	}
	return &awscryptographykeystoresmithygeneratedtypes.MutationCommitment{Identifier: aws_cryptography_keyStore_MutationCommitment_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationCommitment_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationCommitment_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_UUID()),
		Original:       aws_cryptography_keyStore_MutationCommitment_Original_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Original()),
		Terminal:       aws_cryptography_keyStore_MutationCommitment_Terminal_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Terminal()),
		Input:          aws_cryptography_keyStore_MutationCommitment_Input_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Input()),
		CiphertextBlob: aws_cryptography_keyStore_MutationCommitment_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_GetMutationOutput_MutationIndex_FromDafny(input interface{}) *awscryptographykeystoresmithygeneratedtypes.MutationIndex {
	if input == nil {
		return nil
	}
	return &awscryptographykeystoresmithygeneratedtypes.MutationIndex{Identifier: aws_cryptography_keyStore_MutationIndex_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationIndex_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationIndex_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_UUID()),
		PageIndex:      aws_cryptography_keyStore_MutationIndex_PageIndex_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_PageIndex()),
		CiphertextBlob: aws_cryptography_keyStore_MutationIndex_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_QueryForVersionsInput_ExclusiveStartKey_FromDafny(input interface{}) []byte {
	return func() []byte {
		var b []byte
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}()
}
func aws_cryptography_keyStore_QueryForVersionsInput_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_QueryForVersionsInput_PageSize_FromDafny(input interface{}) int32 {
	return func() int32 {
		var b = input.(int32)
		return b
	}()
}
func aws_cryptography_keyStore_QueryForVersionsOutput_ExclusiveStartKey_FromDafny(input interface{}) []byte {
	return func() []byte {
		var b []byte
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return b
			} else {
				b = append(b, val.(byte))
			}
		}
	}()
}
func aws_cryptography_keyStore_QueryForVersionsOutput_Items_FromDafny(input interface{}) []awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	fieldValue := make([]awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey, 0)
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, aws_cryptography_keyStore_EncryptedHierarchicalKeys_member_FromDafny(val))
	}
	return fieldValue
}
func aws_cryptography_keyStore_EncryptedHierarchicalKeys_member_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_WriteAtomicMutationInput_Active_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey{Item: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Item_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Item()),
		Old: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Old_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Old()),
	}
}
func aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Item_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Old_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_WriteAtomicMutationInput_Version_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationVersion {
	var union awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationVersion

	if (input.(AwsCryptographyKeyStoreTypes.WriteInitializeMutationVersion)).Is_rotate() {

		union = &awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationVersionMemberrotate{
			Value: (aws_cryptography_keyStore_WriteInitializeMutationVersion_rotate_FromDafny((input.(AwsCryptographyKeyStoreTypes.WriteInitializeMutationVersion)).Dtor_rotate())),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.WriteInitializeMutationVersion)).Is_mutate() {

		union = &awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationVersionMembermutate{
			Value: (aws_cryptography_keyStore_WriteInitializeMutationVersion_mutate_FromDafny((input.(AwsCryptographyKeyStoreTypes.WriteInitializeMutationVersion)).Dtor_mutate())),
		}
	}

	return union

}
func aws_cryptography_keyStore_WriteInitializeMutationVersion_rotate_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_WriteInitializeMutationVersion_mutate_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey{Item: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Item_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Item()),
		Old: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Old_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Old()),
	}
}
func aws_cryptography_keyStore_WriteAtomicMutationInput_Beacon_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey{Item: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Item_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Item()),
		Old: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Old_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Old()),
	}
}
func aws_cryptography_keyStore_WriteAtomicMutationInput_Items_FromDafny(input interface{}) []awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey {
	fieldValue := make([]awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey, 0)
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKeys_member_FromDafny(val))
	}
	return fieldValue
}
func aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKeys_member_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey{Item: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Item_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Item()),
		Old: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Old_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Old()),
	}
}
func aws_cryptography_keyStore_WriteInitializeMutationInput_Active_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey{Item: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Item_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Item()),
		Old: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Old_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Old()),
	}
}
func aws_cryptography_keyStore_WriteInitializeMutationInput_Version_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationVersion {
	var union awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationVersion

	if (input.(AwsCryptographyKeyStoreTypes.WriteInitializeMutationVersion)).Is_rotate() {

		union = &awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationVersionMemberrotate{
			Value: (aws_cryptography_keyStore_WriteInitializeMutationVersion_rotate_FromDafny((input.(AwsCryptographyKeyStoreTypes.WriteInitializeMutationVersion)).Dtor_rotate())),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.WriteInitializeMutationVersion)).Is_mutate() {

		union = &awscryptographykeystoresmithygeneratedtypes.WriteInitializeMutationVersionMembermutate{
			Value: (aws_cryptography_keyStore_WriteInitializeMutationVersion_mutate_FromDafny((input.(AwsCryptographyKeyStoreTypes.WriteInitializeMutationVersion)).Dtor_mutate())),
		}
	}

	return union

}
func aws_cryptography_keyStore_WriteInitializeMutationInput_Beacon_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey{Item: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Item_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Item()),
		Old: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Old_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Old()),
	}
}
func aws_cryptography_keyStore_WriteInitializeMutationInput_MutationCommitment_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.MutationCommitment {
	return awscryptographykeystoresmithygeneratedtypes.MutationCommitment{Identifier: aws_cryptography_keyStore_MutationCommitment_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationCommitment_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationCommitment_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_UUID()),
		Original:       aws_cryptography_keyStore_MutationCommitment_Original_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Original()),
		Terminal:       aws_cryptography_keyStore_MutationCommitment_Terminal_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Terminal()),
		Input:          aws_cryptography_keyStore_MutationCommitment_Input_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Input()),
		CiphertextBlob: aws_cryptography_keyStore_MutationCommitment_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_WriteInitializeMutationInput_MutationIndex_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.MutationIndex {
	return awscryptographykeystoresmithygeneratedtypes.MutationIndex{Identifier: aws_cryptography_keyStore_MutationIndex_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationIndex_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationIndex_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_UUID()),
		PageIndex:      aws_cryptography_keyStore_MutationIndex_PageIndex_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_PageIndex()),
		CiphertextBlob: aws_cryptography_keyStore_MutationIndex_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_WriteMutatedVersionsInput_Items_FromDafny(input interface{}) []awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey {
	fieldValue := make([]awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey, 0)
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKeys_member_FromDafny(val))
	}
	return fieldValue
}
func aws_cryptography_keyStore_WriteMutatedVersionsInput_MutationCommitment_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.MutationCommitment {
	return awscryptographykeystoresmithygeneratedtypes.MutationCommitment{Identifier: aws_cryptography_keyStore_MutationCommitment_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationCommitment_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationCommitment_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_UUID()),
		Original:       aws_cryptography_keyStore_MutationCommitment_Original_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Original()),
		Terminal:       aws_cryptography_keyStore_MutationCommitment_Terminal_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Terminal()),
		Input:          aws_cryptography_keyStore_MutationCommitment_Input_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Input()),
		CiphertextBlob: aws_cryptography_keyStore_MutationCommitment_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_WriteMutatedVersionsInput_MutationIndex_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.OverWriteMutationIndex {
	return awscryptographykeystoresmithygeneratedtypes.OverWriteMutationIndex{Index: aws_cryptography_keyStore_OverWriteMutationIndex_Index_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteMutationIndex).Dtor_Index()),
		Old: aws_cryptography_keyStore_OverWriteMutationIndex_Old_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteMutationIndex).Dtor_Old()),
	}
}
func aws_cryptography_keyStore_OverWriteMutationIndex_Index_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.MutationIndex {
	return awscryptographykeystoresmithygeneratedtypes.MutationIndex{Identifier: aws_cryptography_keyStore_MutationIndex_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationIndex_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationIndex_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_UUID()),
		PageIndex:      aws_cryptography_keyStore_MutationIndex_PageIndex_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_PageIndex()),
		CiphertextBlob: aws_cryptography_keyStore_MutationIndex_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_OverWriteMutationIndex_Old_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.MutationIndex {
	return awscryptographykeystoresmithygeneratedtypes.MutationIndex{Identifier: aws_cryptography_keyStore_MutationIndex_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationIndex_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationIndex_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_UUID()),
		PageIndex:      aws_cryptography_keyStore_MutationIndex_PageIndex_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_PageIndex()),
		CiphertextBlob: aws_cryptography_keyStore_MutationIndex_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_WriteMutatedVersionsInput_EndMutation_FromDafny(input interface{}) bool {
	return input.(bool)
}
func aws_cryptography_keyStore_WriteMutationIndexInput_MutationCommitment_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.MutationCommitment {
	return awscryptographykeystoresmithygeneratedtypes.MutationCommitment{Identifier: aws_cryptography_keyStore_MutationCommitment_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationCommitment_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationCommitment_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_UUID()),
		Original:       aws_cryptography_keyStore_MutationCommitment_Original_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Original()),
		Terminal:       aws_cryptography_keyStore_MutationCommitment_Terminal_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Terminal()),
		Input:          aws_cryptography_keyStore_MutationCommitment_Input_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_Input()),
		CiphertextBlob: aws_cryptography_keyStore_MutationCommitment_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationCommitment).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_WriteMutationIndexInput_MutationIndex_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.MutationIndex {
	return awscryptographykeystoresmithygeneratedtypes.MutationIndex{Identifier: aws_cryptography_keyStore_MutationIndex_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_Identifier()),
		CreateTime:     aws_cryptography_keyStore_MutationIndex_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CreateTime()),
		UUID:           aws_cryptography_keyStore_MutationIndex_UUID_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_UUID()),
		PageIndex:      aws_cryptography_keyStore_MutationIndex_PageIndex_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_PageIndex()),
		CiphertextBlob: aws_cryptography_keyStore_MutationIndex_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.MutationIndex).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_WriteNewEncryptedBranchKeyInput_Active_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_WriteNewEncryptedBranchKeyInput_Version_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_WriteNewEncryptedBranchKeyInput_Beacon_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_WriteNewEncryptedBranchKeyVersionInput_Active_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.OverWriteEncryptedHierarchicalKey{Item: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Item_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Item()),
		Old: aws_cryptography_keyStore_OverWriteEncryptedHierarchicalKey_Old_FromDafny(input.(AwsCryptographyKeyStoreTypes.OverWriteEncryptedHierarchicalKey).Dtor_Old()),
	}
}
func aws_cryptography_keyStore_WriteNewEncryptedBranchKeyVersionInput_Version_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey {
	return awscryptographykeystoresmithygeneratedtypes.EncryptedHierarchicalKey{Identifier: aws_cryptography_keyStore_EncryptedHierarchicalKey_Identifier_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Identifier()),
		Type:              aws_cryptography_keyStore_EncryptedHierarchicalKey_Type_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_Type()),
		CreateTime:        aws_cryptography_keyStore_EncryptedHierarchicalKey_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CreateTime()),
		KmsArn:            aws_cryptography_keyStore_EncryptedHierarchicalKey_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_KmsArn()),
		EncryptionContext: aws_cryptography_keyStore_EncryptedHierarchicalKey_EncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_EncryptionContext()),
		CiphertextBlob:    aws_cryptography_keyStore_EncryptedHierarchicalKey_CiphertextBlob_FromDafny(input.(AwsCryptographyKeyStoreTypes.EncryptedHierarchicalKey).Dtor_CiphertextBlob()),
	}
}
func aws_cryptography_keyStore_AlreadyExistsConditionFailed_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_BranchKeyCiphertextException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_HierarchyVersionException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_KeyManagementException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_KeyStorageException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_KeyStoreException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_MutationCommitmentConditionFailed_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_NoLongerExistsConditionFailed_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_OldEncConditionFailed_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_VersionRaceException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_KeyStoreConfig_kmsConfiguration_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.KMSConfiguration {
	var union awscryptographykeystoresmithygeneratedtypes.KMSConfiguration

	if (input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Is_kmsKeyArn() {
		var dataSource = Wrappers.Companion_Option_.Create_Some_((input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Dtor_kmsKeyArn())
		union = &awscryptographykeystoresmithygeneratedtypes.KMSConfigurationMemberkmsKeyArn{
			Value: (aws_cryptography_keyStore_KMSConfiguration_kmsKeyArn_FromDafny(dataSource.UnwrapOr(nil))),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Is_kmsMRKeyArn() {
		var dataSource = Wrappers.Companion_Option_.Create_Some_((input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Dtor_kmsMRKeyArn())
		union = &awscryptographykeystoresmithygeneratedtypes.KMSConfigurationMemberkmsMRKeyArn{
			Value: (aws_cryptography_keyStore_KMSConfiguration_kmsMRKeyArn_FromDafny(dataSource.UnwrapOr(nil))),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Is_discovery() {

		union = &awscryptographykeystoresmithygeneratedtypes.KMSConfigurationMemberdiscovery{
			Value: (aws_cryptography_keyStore_KMSConfiguration_discovery_FromDafny((input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Dtor_discovery())),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Is_mrDiscovery() {

		union = &awscryptographykeystoresmithygeneratedtypes.KMSConfigurationMembermrDiscovery{
			Value: (aws_cryptography_keyStore_KMSConfiguration_mrDiscovery_FromDafny((input.(AwsCryptographyKeyStoreTypes.KMSConfiguration)).Dtor_mrDiscovery())),
		}
	}

	return union

}
func aws_cryptography_keyStore_KeyStoreConfig_logicalKeyStoreName_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_KeyStoreConfig_keyManagement_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.KeyManagement {
	var union awscryptographykeystoresmithygeneratedtypes.KeyManagement
	if input == nil {
		return nil
	}

	if (input.(AwsCryptographyKeyStoreTypes.KeyManagement)).Is_kms() {

		union = &awscryptographykeystoresmithygeneratedtypes.KeyManagementMemberkms{
			Value: (aws_cryptography_keyStore_KeyManagement_kms_FromDafny((input.(AwsCryptographyKeyStoreTypes.KeyManagement)).Dtor_kms())),
		}
	}

	return union

}
func aws_cryptography_keyStore_KeyManagement_kms_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.AwsKms {
	return awscryptographykeystoresmithygeneratedtypes.AwsKms{GrantTokens: aws_cryptography_keyStore_AwsKms_grantTokens_FromDafny(input.(AwsCryptographyKeyStoreTypes.AwsKms).Dtor_grantTokens().UnwrapOr(nil)),
		KmsClient: aws_cryptography_keyStore_AwsKms_kmsClient_FromDafny(input.(AwsCryptographyKeyStoreTypes.AwsKms).Dtor_kmsClient().UnwrapOr(nil)),
	}
}
func aws_cryptography_keyStore_AwsKms_grantTokens_FromDafny(input interface{}) []string {
	if input == nil {
		return nil
	}
	fieldValue := make([]string, 0)
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, aws_cryptography_keyStore_GrantTokenList_member_FromDafny(val))
	}
	return fieldValue
}
func aws_cryptography_keyStore_AwsKms_kmsClient_FromDafny(input interface{}) *kms.Client {
	shim, ok := input.(*KMSwrapped.Shim)
	if !ok {
		panic("Not able to convert client to native")
	}
	return shim.Client

}
func aws_cryptography_keyStore_KeyStoreConfig_ddbTableName_FromDafny(input interface{}) *string {
	return func() *string {
		var s string
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_KeyStoreConfig_id_FromDafny(input interface{}) *string {
	return func() *string {
		var s string
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_KeyStoreConfig_grantTokens_FromDafny(input interface{}) []string {
	if input == nil {
		return nil
	}
	fieldValue := make([]string, 0)
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, aws_cryptography_keyStore_GrantTokenList_member_FromDafny(val))
	}
	return fieldValue
}
func aws_cryptography_keyStore_KeyStoreConfig_storage_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.Storage {
	var union awscryptographykeystoresmithygeneratedtypes.Storage
	if input == nil {
		return nil
	}

	if (input.(AwsCryptographyKeyStoreTypes.Storage)).Is_ddb() {

		union = &awscryptographykeystoresmithygeneratedtypes.StorageMemberddb{
			Value: (aws_cryptography_keyStore_Storage_ddb_FromDafny((input.(AwsCryptographyKeyStoreTypes.Storage)).Dtor_ddb())),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.Storage)).Is_custom() {

		union = &awscryptographykeystoresmithygeneratedtypes.StorageMembercustom{
			Value: (KeyStorageInterface_FromDafny((input.(AwsCryptographyKeyStoreTypes.Storage)).Dtor_custom().(AwsCryptographyKeyStoreTypes.IKeyStorageInterface))),
		}
	}

	return union

}
func aws_cryptography_keyStore_Storage_ddb_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.DynamoDBTable {
	return awscryptographykeystoresmithygeneratedtypes.DynamoDBTable{DdbTableName: aws_cryptography_keyStore_DynamoDBTable_ddbTableName_FromDafny(input.(AwsCryptographyKeyStoreTypes.DynamoDBTable).Dtor_ddbTableName()),
		DdbClient: aws_cryptography_keyStore_DynamoDBTable_ddbClient_FromDafny(input.(AwsCryptographyKeyStoreTypes.DynamoDBTable).Dtor_ddbClient().UnwrapOr(nil)),
	}
}
func aws_cryptography_keyStore_DynamoDBTable_ddbTableName_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_DynamoDBTable_ddbClient_FromDafny(input interface{}) *dynamodb.Client {
	shim, ok := input.(*DynamoDBwrapped.Shim)
	if !ok {
		panic("Not able to convert client to native")
	}
	return shim.Client

}
func aws_cryptography_keyStore_KeyStoreConfig_ddbClient_FromDafny(input interface{}) *dynamodb.Client {
	shim, ok := input.(*DynamoDBwrapped.Shim)
	if !ok {
		panic("Not able to convert client to native")
	}
	return shim.Client

}
func aws_cryptography_keyStore_KeyStoreConfig_kmsClient_FromDafny(input interface{}) *kms.Client {
	shim, ok := input.(*KMSwrapped.Shim)
	if !ok {
		panic("Not able to convert client to native")
	}
	return shim.Client

}
