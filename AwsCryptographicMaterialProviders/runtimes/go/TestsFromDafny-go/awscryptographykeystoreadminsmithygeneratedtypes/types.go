// Code generated by smithy-go-codegen DO NOT EDIT.

package awscryptographykeystoreadminsmithygeneratedtypes

import (
	"fmt"
	"unicode/utf8"

	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/awscryptographykeystoresmithygeneratedtypes"
)

type MutationToken struct {
	CreateTime string

	Identifier string

	UUID string
}

func (input MutationToken) Validate() error {

	return nil
}

type AwsKmsDecryptEncrypt struct {
	Decrypt *awscryptographykeystoresmithygeneratedtypes.AwsKms

	Encrypt *awscryptographykeystoresmithygeneratedtypes.AwsKms
}

func (input AwsKmsDecryptEncrypt) Validate() error {
	if input.Decrypt != nil {
		if input.Decrypt.Validate() != nil {
			return input.Decrypt.Validate()
		}

	}
	if input.Encrypt != nil {
		if input.Encrypt.Validate() != nil {
			return input.Encrypt.Validate()
		}

	}

	return nil
}

type KmsSymmetricEncryption struct {
	AwsKms awscryptographykeystoresmithygeneratedtypes.AwsKms

	KmsArn string
}

func (input KmsSymmetricEncryption) Validate() error {
	if input.AwsKms.Validate() != nil {
		return input.AwsKms.Validate()
	}
	if len(input.KmsArn) < 1 {
		return fmt.Errorf("KeyIdType has a minimum length of 1 but has the length of %d.", len(input.KmsArn))
	}
	if len(input.KmsArn) > 2048 {
		return fmt.Errorf("KeyIdType has a maximum length of 2048 but has the length of %d.", len(input.KmsArn))
	}

	return nil
}

type TrustStorage struct {
}

func (input TrustStorage) Validate() error {

	return nil
}

type ApplyMutationInput struct {
	MutationToken MutationToken

	SystemKey SystemKey

	PageSize *int32

	Strategy KeyManagementStrategy
}

func (input ApplyMutationInput) Validate() error {
	if input.MutationToken.Validate() != nil {
		return input.MutationToken.Validate()
	}
	if input.SystemKey == nil {
		return fmt.Errorf("input.SystemKey is required but has a nil value.")
	}
	if input.aws_cryptography_keyStoreAdmin_ApplyMutationInput_SystemKey_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_ApplyMutationInput_SystemKey_Validate()
	}
	if input.aws_cryptography_keyStoreAdmin_ApplyMutationInput_Strategy_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_ApplyMutationInput_Strategy_Validate()
	}

	return nil
}

func (input ApplyMutationInput) aws_cryptography_keyStoreAdmin_ApplyMutationInput_SystemKey_Validate() error {
	if input.SystemKey == nil {
		return nil
	}
	switch unionType := input.SystemKey.(type) {
	case *SystemKeyMemberkmsSymmetricEncryption:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *SystemKeyMembertrustStorage:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input ApplyMutationInput) aws_cryptography_keyStoreAdmin_ApplyMutationInput_Strategy_Validate() error {
	if input.Strategy == nil {
		return nil
	}
	switch unionType := input.Strategy.(type) {
	case *KeyManagementStrategyMemberAwsKmsReEncrypt:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *KeyManagementStrategyMemberAwsKmsDecryptEncrypt:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}

type MutatedBranchKeyItem struct {
	Description string

	ItemType string
}

func (input MutatedBranchKeyItem) Validate() error {

	return nil
}

type MutationComplete struct {
}

func (input MutationComplete) Validate() error {

	return nil
}

type ApplyMutationOutput struct {
	MutatedBranchKeyItems []MutatedBranchKeyItem

	MutationResult ApplyMutationResult
}

func (input ApplyMutationOutput) Validate() error {
	if input.MutatedBranchKeyItems == nil {
		return fmt.Errorf("input.MutatedBranchKeyItems is required but has a nil value.")
	}
	if input.aws_cryptography_keyStoreAdmin_ApplyMutationOutput_MutatedBranchKeyItems_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_ApplyMutationOutput_MutatedBranchKeyItems_Validate()
	}
	if input.MutationResult == nil {
		return fmt.Errorf("input.MutationResult is required but has a nil value.")
	}
	if input.aws_cryptography_keyStoreAdmin_ApplyMutationOutput_MutationResult_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_ApplyMutationOutput_MutationResult_Validate()
	}

	return nil
}

func (input ApplyMutationOutput) aws_cryptography_keyStoreAdmin_ApplyMutationOutput_MutatedBranchKeyItems_Validate() error {
	for _, item := range input.MutatedBranchKeyItems {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}
func (input ApplyMutationOutput) aws_cryptography_keyStoreAdmin_ApplyMutationOutput_MutationResult_Validate() error {
	if input.MutationResult == nil {
		return nil
	}
	switch unionType := input.MutationResult.(type) {
	case *ApplyMutationResultMemberContinueMutation:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *ApplyMutationResultMemberCompleteMutation:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}

type CreateKeyInput struct {
	KmsArn KmsSymmetricKeyArn

	EncryptionContext map[string]string

	Identifier *string

	Strategy KeyManagementStrategy
}

func (input CreateKeyInput) Validate() error {
	if input.KmsArn == nil {
		return fmt.Errorf("input.KmsArn is required but has a nil value.")
	}
	if input.aws_cryptography_keyStoreAdmin_CreateKeyInput_KmsArn_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_CreateKeyInput_KmsArn_Validate()
	}
	if input.aws_cryptography_keyStoreAdmin_CreateKeyInput_EncryptionContext_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_CreateKeyInput_EncryptionContext_Validate()
	}
	if input.aws_cryptography_keyStoreAdmin_CreateKeyInput_Strategy_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_CreateKeyInput_Strategy_Validate()
	}

	return nil
}

func (input CreateKeyInput) aws_cryptography_keyStoreAdmin_CreateKeyInput_KmsArn_Validate() error {
	if input.KmsArn == nil {
		return nil
	}
	switch unionType := input.KmsArn.(type) {
	case *KmsSymmetricKeyArnMemberKmsKeyArn:
	case *KmsSymmetricKeyArnMemberKmsMRKeyArn:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input CreateKeyInput) aws_cryptography_keyStoreAdmin_CreateKeyInput_EncryptionContext_Validate() error {
	for key, value := range input.EncryptionContext {
		if !utf8.ValidString(key) {
			return fmt.Errorf("Invalid UTF bytes %s ", key)
		}
		if !utf8.ValidString(value) {
			return fmt.Errorf("Invalid UTF bytes %s ", value)
		}
	}

	return nil
}
func (input CreateKeyInput) aws_cryptography_keyStoreAdmin_CreateKeyInput_Strategy_Validate() error {
	if input.Strategy == nil {
		return nil
	}
	switch unionType := input.Strategy.(type) {
	case *KeyManagementStrategyMemberAwsKmsReEncrypt:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *KeyManagementStrategyMemberAwsKmsDecryptEncrypt:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}

type CreateKeyOutput struct {
	Identifier string
}

func (input CreateKeyOutput) Validate() error {

	return nil
}

type DescribeMutationInput struct {
	Identifier string
}

func (input DescribeMutationInput) Validate() error {

	return nil
}

type Mutations struct {
	TerminalEncryptionContext map[string]string

	TerminalKmsArn *string
}

func (input Mutations) Validate() error {

	return nil
}

type MutableBranchKeyProperties struct {
	CustomEncryptionContext map[string]string

	KmsArn string
}

func (input MutableBranchKeyProperties) Validate() error {
	if input.CustomEncryptionContext == nil {
		return fmt.Errorf("input.CustomEncryptionContext is required but has a nil value.")
	}

	return nil
}

type MutationDetails struct {
	CreateTime string

	Input Mutations

	Original MutableBranchKeyProperties

	SystemKey string

	Terminal MutableBranchKeyProperties

	UUID string
}

func (input MutationDetails) Validate() error {
	if input.Input.Validate() != nil {
		return input.Input.Validate()
	}
	if input.Original.Validate() != nil {
		return input.Original.Validate()
	}
	if input.Terminal.Validate() != nil {
		return input.Terminal.Validate()
	}

	return nil
}

type MutationDescription struct {
	MutationDetails MutationDetails

	MutationToken MutationToken
}

func (input MutationDescription) Validate() error {
	if input.MutationDetails.Validate() != nil {
		return input.MutationDetails.Validate()
	}
	if input.MutationToken.Validate() != nil {
		return input.MutationToken.Validate()
	}

	return nil
}

type DescribeMutationOutput struct {
	MutationInFlight MutationInFlight
}

func (input DescribeMutationOutput) Validate() error {
	if input.MutationInFlight == nil {
		return fmt.Errorf("input.MutationInFlight is required but has a nil value.")
	}
	if input.aws_cryptography_keyStoreAdmin_DescribeMutationOutput_MutationInFlight_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_DescribeMutationOutput_MutationInFlight_Validate()
	}

	return nil
}

func (input DescribeMutationOutput) aws_cryptography_keyStoreAdmin_DescribeMutationOutput_MutationInFlight_Validate() error {
	if input.MutationInFlight == nil {
		return nil
	}
	switch unionType := input.MutationInFlight.(type) {
	case *MutationInFlightMemberYes:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *MutationInFlightMemberNo:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}

type InitializeMutationInput struct {
	Identifier string

	Mutations Mutations

	SystemKey SystemKey

	DoNotVersion *bool

	Strategy KeyManagementStrategy
}

func (input InitializeMutationInput) Validate() error {
	if input.Mutations.Validate() != nil {
		return input.Mutations.Validate()
	}
	if input.SystemKey == nil {
		return fmt.Errorf("input.SystemKey is required but has a nil value.")
	}
	if input.aws_cryptography_keyStoreAdmin_InitializeMutationInput_SystemKey_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_InitializeMutationInput_SystemKey_Validate()
	}
	if input.aws_cryptography_keyStoreAdmin_InitializeMutationInput_Strategy_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_InitializeMutationInput_Strategy_Validate()
	}

	return nil
}

func (input InitializeMutationInput) aws_cryptography_keyStoreAdmin_InitializeMutationInput_SystemKey_Validate() error {
	if input.SystemKey == nil {
		return nil
	}
	switch unionType := input.SystemKey.(type) {
	case *SystemKeyMemberkmsSymmetricEncryption:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *SystemKeyMembertrustStorage:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input InitializeMutationInput) aws_cryptography_keyStoreAdmin_InitializeMutationInput_Strategy_Validate() error {
	if input.Strategy == nil {
		return nil
	}
	switch unionType := input.Strategy.(type) {
	case *KeyManagementStrategyMemberAwsKmsReEncrypt:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *KeyManagementStrategyMemberAwsKmsDecryptEncrypt:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}

type InitializeMutationOutput struct {
	InitializeMutationFlag InitializeMutationFlag

	LastModifiedTime string

	MutatedBranchKeyItems []MutatedBranchKeyItem

	MutationToken MutationToken
}

func (input InitializeMutationOutput) Validate() error {
	if input.MutatedBranchKeyItems == nil {
		return fmt.Errorf("input.MutatedBranchKeyItems is required but has a nil value.")
	}
	if input.aws_cryptography_keyStoreAdmin_InitializeMutationOutput_MutatedBranchKeyItems_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_InitializeMutationOutput_MutatedBranchKeyItems_Validate()
	}
	if input.MutationToken.Validate() != nil {
		return input.MutationToken.Validate()
	}

	return nil
}

func (input InitializeMutationOutput) aws_cryptography_keyStoreAdmin_InitializeMutationOutput_MutatedBranchKeyItems_Validate() error {
	for _, item := range input.MutatedBranchKeyItems {
		if item.Validate() != nil {
			return item.Validate()
		}
	}

	return nil
}

type VersionKeyInput struct {
	Identifier string

	KmsArn KmsSymmetricKeyArn

	Strategy KeyManagementStrategy
}

func (input VersionKeyInput) Validate() error {
	if input.KmsArn == nil {
		return fmt.Errorf("input.KmsArn is required but has a nil value.")
	}
	if input.aws_cryptography_keyStoreAdmin_VersionKeyInput_KmsArn_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_VersionKeyInput_KmsArn_Validate()
	}
	if input.aws_cryptography_keyStoreAdmin_VersionKeyInput_Strategy_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_VersionKeyInput_Strategy_Validate()
	}

	return nil
}

func (input VersionKeyInput) aws_cryptography_keyStoreAdmin_VersionKeyInput_KmsArn_Validate() error {
	if input.KmsArn == nil {
		return nil
	}
	switch unionType := input.KmsArn.(type) {
	case *KmsSymmetricKeyArnMemberKmsKeyArn:
	case *KmsSymmetricKeyArnMemberKmsMRKeyArn:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}
func (input VersionKeyInput) aws_cryptography_keyStoreAdmin_VersionKeyInput_Strategy_Validate() error {
	if input.Strategy == nil {
		return nil
	}
	switch unionType := input.Strategy.(type) {
	case *KeyManagementStrategyMemberAwsKmsReEncrypt:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *KeyManagementStrategyMemberAwsKmsDecryptEncrypt:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}

type VersionKeyOutput struct {
}

func (input VersionKeyOutput) Validate() error {

	return nil
}

type DdbClientReference struct {
}

func (input DdbClientReference) Validate() error {

	return nil
}

type KeyStoreAdminConfig struct {
	LogicalKeyStoreName string

	Storage awscryptographykeystoresmithygeneratedtypes.Storage
}

func (input KeyStoreAdminConfig) Validate() error {
	if input.Storage == nil {
		return fmt.Errorf("input.Storage is required but has a nil value.")
	}
	if input.aws_cryptography_keyStoreAdmin_KeyStoreAdminConfig_storage_Validate() != nil {
		return input.aws_cryptography_keyStoreAdmin_KeyStoreAdminConfig_storage_Validate()
	}

	return nil
}

func (input KeyStoreAdminConfig) aws_cryptography_keyStoreAdmin_KeyStoreAdminConfig_storage_Validate() error {
	if input.Storage == nil {
		return nil
	}
	switch unionType := input.Storage.(type) {
	case *awscryptographykeystoresmithygeneratedtypes.StorageMemberddb:
		if unionType.Value.Validate() != nil {
			return unionType.Value.Validate()
		}
	case *awscryptographykeystoresmithygeneratedtypes.StorageMembercustom:
	// Default case should not be reached.
	default:
		panic(fmt.Sprintf("Unhandled union type: %T ", unionType))
	}

	return nil
}

type KeyStoreReference struct {
}

func (input KeyStoreReference) Validate() error {

	return nil
}

type KmsClientReference struct {
}

func (input KmsClientReference) Validate() error {

	return nil
}

type PrimitivesReference struct {
}

func (input PrimitivesReference) Validate() error {

	return nil
}

// ApplyMutationResultMemberCompleteMutation
// ApplyMutationResultMemberContinueMutation
type ApplyMutationResult interface {
	isApplyMutationResult()
}

type ApplyMutationResultMemberCompleteMutation struct {
	Value MutationComplete
}

func (*ApplyMutationResultMemberCompleteMutation) isApplyMutationResult() {}

type ApplyMutationResultMemberContinueMutation struct {
	Value MutationToken
}

func (*ApplyMutationResultMemberContinueMutation) isApplyMutationResult() {}

// KeyManagementStrategyMemberAwsKmsDecryptEncrypt
// KeyManagementStrategyMemberAwsKmsReEncrypt
type KeyManagementStrategy interface {
	isKeyManagementStrategy()
}

type KeyManagementStrategyMemberAwsKmsDecryptEncrypt struct {
	Value AwsKmsDecryptEncrypt
}

func (*KeyManagementStrategyMemberAwsKmsDecryptEncrypt) isKeyManagementStrategy() {}

type KeyManagementStrategyMemberAwsKmsReEncrypt struct {
	Value awscryptographykeystoresmithygeneratedtypes.AwsKms
}

func (*KeyManagementStrategyMemberAwsKmsReEncrypt) isKeyManagementStrategy() {}

// KmsSymmetricKeyArnMemberKmsKeyArn
// KmsSymmetricKeyArnMemberKmsMRKeyArn
type KmsSymmetricKeyArn interface {
	isKmsSymmetricKeyArn()
}

type KmsSymmetricKeyArnMemberKmsKeyArn struct {
	Value string
}

func (*KmsSymmetricKeyArnMemberKmsKeyArn) isKmsSymmetricKeyArn() {}

type KmsSymmetricKeyArnMemberKmsMRKeyArn struct {
	Value string
}

func (*KmsSymmetricKeyArnMemberKmsMRKeyArn) isKmsSymmetricKeyArn() {}

// MutationInFlightMemberNo
// MutationInFlightMemberYes
type MutationInFlight interface {
	isMutationInFlight()
}

type MutationInFlightMemberNo struct {
	Value string
}

func (*MutationInFlightMemberNo) isMutationInFlight() {}

type MutationInFlightMemberYes struct {
	Value MutationDescription
}

func (*MutationInFlightMemberYes) isMutationInFlight() {}

// SystemKeyMemberkmsSymmetricEncryption
// SystemKeyMembertrustStorage
type SystemKey interface {
	isSystemKey()
}

type SystemKeyMemberkmsSymmetricEncryption struct {
	Value KmsSymmetricEncryption
}

func (*SystemKeyMemberkmsSymmetricEncryption) isSystemKey() {}

type SystemKeyMembertrustStorage struct {
	Value TrustStorage
}

func (*SystemKeyMembertrustStorage) isSystemKey() {}

type KeyStoreAdminBaseException interface {
	// This is a dummy method to allow type assertion since Go empty interfaces
	// aren't useful for type assertion checks. No concrete class is expected to implement
	// this method. This is also not exported.
	interfaceBindingMethod()
}
