// Code generated by smithy-go-codegen DO NOT EDIT.

package awscryptographykeystoreadminsmithygenerated

import (
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/dynamodb/DynamoDBwrapped"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/dynamodb/comamazonawsdynamodbsmithygenerated"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/kms/KMSwrapped"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/kms/comamazonawskmssmithygenerated"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/AwsCryptographyKeyStoreAdminTypes"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/AwsCryptographyKeyStoreTypes"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/awscryptographykeystoreadminsmithygeneratedtypes"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/awscryptographykeystoresmithygenerated"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/awscryptographykeystoresmithygeneratedtypes"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/primitives/awscryptographyprimitivessmithygenerated"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/smithy-dafny-standard-library/Wrappers"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	"github.com/dafny-lang/DafnyRuntimeGo/v4/dafny"
)

func ApplyMutationInput_FromDafny(dafnyInput AwsCryptographyKeyStoreAdminTypes.ApplyMutationInput) awscryptographykeystoreadminsmithygeneratedtypes.ApplyMutationInput {

	return awscryptographykeystoreadminsmithygeneratedtypes.ApplyMutationInput{MutationToken: aws_cryptography_keyStoreAdmin_ApplyMutationInput_MutationToken_FromDafny(dafnyInput.Dtor_MutationToken()),
		PageSize:  aws_cryptography_keyStoreAdmin_ApplyMutationInput_PageSize_FromDafny(dafnyInput.Dtor_PageSize().UnwrapOr(nil)),
		Strategy:  aws_cryptography_keyStoreAdmin_ApplyMutationInput_Strategy_FromDafny(dafnyInput.Dtor_Strategy().UnwrapOr(nil)),
		SystemKey: aws_cryptography_keyStoreAdmin_ApplyMutationInput_SystemKey_FromDafny(dafnyInput.Dtor_SystemKey()),
	}

}

func ApplyMutationOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.ApplyMutationOutput) awscryptographykeystoreadminsmithygeneratedtypes.ApplyMutationOutput {

	return awscryptographykeystoreadminsmithygeneratedtypes.ApplyMutationOutput{MutationResult: aws_cryptography_keyStoreAdmin_ApplyMutationOutput_MutationResult_FromDafny(dafnyOutput.Dtor_MutationResult()),
		MutatedBranchKeyItems: aws_cryptography_keyStoreAdmin_ApplyMutationOutput_MutatedBranchKeyItems_FromDafny(dafnyOutput.Dtor_MutatedBranchKeyItems()),
		LastModifiedTime:      aws_cryptography_keyStoreAdmin_ApplyMutationOutput_LastModifiedTime_FromDafny(dafnyOutput.Dtor_LastModifiedTime().UnwrapOr(nil)),
	}

}

func CreateKeyInput_FromDafny(dafnyInput AwsCryptographyKeyStoreAdminTypes.CreateKeyInput) awscryptographykeystoreadminsmithygeneratedtypes.CreateKeyInput {

	return awscryptographykeystoreadminsmithygeneratedtypes.CreateKeyInput{Identifier: aws_cryptography_keyStoreAdmin_CreateKeyInput_Identifier_FromDafny(dafnyInput.Dtor_Identifier().UnwrapOr(nil)),
		EncryptionContext: aws_cryptography_keyStoreAdmin_CreateKeyInput_EncryptionContext_FromDafny(dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil)),
		KmsArn:            aws_cryptography_keyStoreAdmin_CreateKeyInput_KmsArn_FromDafny(dafnyInput.Dtor_KmsArn()),
		Strategy:          aws_cryptography_keyStoreAdmin_CreateKeyInput_Strategy_FromDafny(dafnyInput.Dtor_Strategy().UnwrapOr(nil)),
	}

}

func CreateKeyOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.CreateKeyOutput) awscryptographykeystoreadminsmithygeneratedtypes.CreateKeyOutput {

	return awscryptographykeystoreadminsmithygeneratedtypes.CreateKeyOutput{Identifier: aws_cryptography_keyStoreAdmin_CreateKeyOutput_Identifier_FromDafny(dafnyOutput.Dtor_Identifier())}

}

func DescribeMutationInput_FromDafny(dafnyInput AwsCryptographyKeyStoreAdminTypes.DescribeMutationInput) awscryptographykeystoreadminsmithygeneratedtypes.DescribeMutationInput {

	return awscryptographykeystoreadminsmithygeneratedtypes.DescribeMutationInput{Identifier: aws_cryptography_keyStoreAdmin_DescribeMutationInput_Identifier_FromDafny(dafnyInput.Dtor_Identifier())}

}

func DescribeMutationOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.DescribeMutationOutput) awscryptographykeystoreadminsmithygeneratedtypes.DescribeMutationOutput {

	return awscryptographykeystoreadminsmithygeneratedtypes.DescribeMutationOutput{MutationInFlight: aws_cryptography_keyStoreAdmin_DescribeMutationOutput_MutationInFlight_FromDafny(dafnyOutput.Dtor_MutationInFlight())}

}

func InitializeMutationInput_FromDafny(dafnyInput AwsCryptographyKeyStoreAdminTypes.InitializeMutationInput) awscryptographykeystoreadminsmithygeneratedtypes.InitializeMutationInput {

	return awscryptographykeystoreadminsmithygeneratedtypes.InitializeMutationInput{Identifier: aws_cryptography_keyStoreAdmin_InitializeMutationInput_Identifier_FromDafny(dafnyInput.Dtor_Identifier()),
		Mutations:    aws_cryptography_keyStoreAdmin_InitializeMutationInput_Mutations_FromDafny(dafnyInput.Dtor_Mutations()),
		Strategy:     aws_cryptography_keyStoreAdmin_InitializeMutationInput_Strategy_FromDafny(dafnyInput.Dtor_Strategy().UnwrapOr(nil)),
		SystemKey:    aws_cryptography_keyStoreAdmin_InitializeMutationInput_SystemKey_FromDafny(dafnyInput.Dtor_SystemKey()),
		DoNotVersion: aws_cryptography_keyStoreAdmin_InitializeMutationInput_DoNotVersion_FromDafny(dafnyInput.Dtor_DoNotVersion().UnwrapOr(nil)),
	}

}

func InitializeMutationOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.InitializeMutationOutput) awscryptographykeystoreadminsmithygeneratedtypes.InitializeMutationOutput {

	return awscryptographykeystoreadminsmithygeneratedtypes.InitializeMutationOutput{MutationToken: aws_cryptography_keyStoreAdmin_InitializeMutationOutput_MutationToken_FromDafny(dafnyOutput.Dtor_MutationToken()),
		MutatedBranchKeyItems:  aws_cryptography_keyStoreAdmin_InitializeMutationOutput_MutatedBranchKeyItems_FromDafny(dafnyOutput.Dtor_MutatedBranchKeyItems()),
		InitializeMutationFlag: aws_cryptography_keyStoreAdmin_InitializeMutationOutput_InitializeMutationFlag_FromDafny(dafnyOutput.Dtor_InitializeMutationFlag()),
		LastModifiedTime:       aws_cryptography_keyStoreAdmin_InitializeMutationOutput_LastModifiedTime_FromDafny(dafnyOutput.Dtor_LastModifiedTime().UnwrapOr(nil)),
	}

}

func VersionKeyInput_FromDafny(dafnyInput AwsCryptographyKeyStoreAdminTypes.VersionKeyInput) awscryptographykeystoreadminsmithygeneratedtypes.VersionKeyInput {

	return awscryptographykeystoreadminsmithygeneratedtypes.VersionKeyInput{Identifier: aws_cryptography_keyStoreAdmin_VersionKeyInput_Identifier_FromDafny(dafnyInput.Dtor_Identifier()),
		KmsArn:   aws_cryptography_keyStoreAdmin_VersionKeyInput_KmsArn_FromDafny(dafnyInput.Dtor_KmsArn()),
		Strategy: aws_cryptography_keyStoreAdmin_VersionKeyInput_Strategy_FromDafny(dafnyInput.Dtor_Strategy().UnwrapOr(nil)),
	}

}

func VersionKeyOutput_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.VersionKeyOutput) awscryptographykeystoreadminsmithygeneratedtypes.VersionKeyOutput {

	return awscryptographykeystoreadminsmithygeneratedtypes.VersionKeyOutput{}

}

func KeyStoreAdminException_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.Error) awscryptographykeystoreadminsmithygeneratedtypes.KeyStoreAdminException {
	return awscryptographykeystoreadminsmithygeneratedtypes.KeyStoreAdminException{Message: aws_cryptography_keyStoreAdmin_KeyStoreAdminException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func MutationConflictException_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.Error) awscryptographykeystoreadminsmithygeneratedtypes.MutationConflictException {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutationConflictException{Message: aws_cryptography_keyStoreAdmin_MutationConflictException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func MutationFromException_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.Error) awscryptographykeystoreadminsmithygeneratedtypes.MutationFromException {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutationFromException{Message: aws_cryptography_keyStoreAdmin_MutationFromException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func MutationInvalidException_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.Error) awscryptographykeystoreadminsmithygeneratedtypes.MutationInvalidException {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutationInvalidException{Message: aws_cryptography_keyStoreAdmin_MutationInvalidException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func MutationToException_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.Error) awscryptographykeystoreadminsmithygeneratedtypes.MutationToException {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutationToException{Message: aws_cryptography_keyStoreAdmin_MutationToException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func MutationVerificationException_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.Error) awscryptographykeystoreadminsmithygeneratedtypes.MutationVerificationException {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutationVerificationException{Message: aws_cryptography_keyStoreAdmin_MutationVerificationException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func UnexpectedStateException_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.Error) awscryptographykeystoreadminsmithygeneratedtypes.UnexpectedStateException {
	return awscryptographykeystoreadminsmithygeneratedtypes.UnexpectedStateException{Message: aws_cryptography_keyStoreAdmin_UnexpectedStateException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func UnsupportedFeatureException_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.Error) awscryptographykeystoreadminsmithygeneratedtypes.UnsupportedFeatureException {
	return awscryptographykeystoreadminsmithygeneratedtypes.UnsupportedFeatureException{Message: aws_cryptography_keyStoreAdmin_UnsupportedFeatureException_message_FromDafny(dafnyOutput.Dtor_message())}

}

func CollectionOfErrors_Output_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.Error) awscryptographykeystoreadminsmithygeneratedtypes.CollectionOfErrors {
	listOfErrors := dafnyOutput.Dtor_list()
	message := dafnyOutput.Dtor_message()
	t := awscryptographykeystoreadminsmithygeneratedtypes.CollectionOfErrors{}
	for i := dafny.Iterate(listOfErrors); ; {
		val, ok := i()
		if !ok {
			break
		}
		err := val.(AwsCryptographyKeyStoreAdminTypes.Error)
		t.ListOfErrors = append(t.ListOfErrors, Error_FromDafny(err))

	}
	t.Message = func() string {
		var s string
		for i := dafny.Iterate(message); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
	return t
}
func OpaqueError_Output_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.Error) awscryptographykeystoreadminsmithygeneratedtypes.OpaqueError {
	return awscryptographykeystoreadminsmithygeneratedtypes.OpaqueError{
		ErrObject: dafnyOutput.Dtor_obj(),
	}
}

func Error_FromDafny(err AwsCryptographyKeyStoreAdminTypes.Error) error {
	// Service Errors
	if err.Is_KeyStoreAdminException() {
		return KeyStoreAdminException_FromDafny(err)
	}

	if err.Is_MutationConflictException() {
		return MutationConflictException_FromDafny(err)
	}

	if err.Is_MutationFromException() {
		return MutationFromException_FromDafny(err)
	}

	if err.Is_MutationInvalidException() {
		return MutationInvalidException_FromDafny(err)
	}

	if err.Is_MutationToException() {
		return MutationToException_FromDafny(err)
	}

	if err.Is_MutationVerificationException() {
		return MutationVerificationException_FromDafny(err)
	}

	if err.Is_UnexpectedStateException() {
		return UnexpectedStateException_FromDafny(err)
	}

	if err.Is_UnsupportedFeatureException() {
		return UnsupportedFeatureException_FromDafny(err)
	}

	//DependentErrors
	if err.Is_AwsCryptographyPrimitives() {
		return awscryptographyprimitivessmithygenerated.Error_FromDafny(err.Dtor_AwsCryptographyPrimitives())
	}

	if err.Is_ComAmazonawsDynamodb() {
		return comamazonawsdynamodbsmithygenerated.Error_FromDafny(err.Dtor_ComAmazonawsDynamodb())
	}

	if err.Is_ComAmazonawsKms() {
		return comamazonawskmssmithygenerated.Error_FromDafny(err.Dtor_ComAmazonawsKms())
	}

	if err.Is_AwsCryptographyKeyStore() {
		return awscryptographykeystoresmithygenerated.Error_FromDafny(err.Dtor_AwsCryptographyKeyStore())
	}

	//Unmodelled Errors
	if err.Is_CollectionOfErrors() {
		return CollectionOfErrors_Output_FromDafny(err)
	}

	return OpaqueError_Output_FromDafny(err)
}

func KeyStoreAdminConfig_FromDafny(dafnyOutput AwsCryptographyKeyStoreAdminTypes.KeyStoreAdminConfig) awscryptographykeystoreadminsmithygeneratedtypes.KeyStoreAdminConfig {
	return awscryptographykeystoreadminsmithygeneratedtypes.KeyStoreAdminConfig{LogicalKeyStoreName: aws_cryptography_keyStoreAdmin_KeyStoreAdminConfig_logicalKeyStoreName_FromDafny(dafnyOutput.Dtor_logicalKeyStoreName()),
		Storage: aws_cryptography_keyStoreAdmin_KeyStoreAdminConfig_storage_FromDafny(dafnyOutput.Dtor_storage()),
	}

}

func aws_cryptography_keyStoreAdmin_ApplyMutationInput_MutationToken_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.MutationToken {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutationToken{Identifier: aws_cryptography_keyStoreAdmin_MutationToken_Identifier_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationToken).Dtor_Identifier()),
		UUID:       aws_cryptography_keyStoreAdmin_MutationToken_UUID_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationToken).Dtor_UUID()),
		CreateTime: aws_cryptography_keyStoreAdmin_MutationToken_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationToken).Dtor_CreateTime()),
	}
}
func aws_cryptography_keyStoreAdmin_MutationToken_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutationToken_UUID_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutationToken_CreateTime_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_ApplyMutationInput_PageSize_FromDafny(input interface{}) *int32 {
	return func() *int32 {
		var b int32
		if input == nil {
			return nil
		}
		b = input.(int32)
		return &b
	}()
}
func aws_cryptography_keyStoreAdmin_ApplyMutationInput_Strategy_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategy {
	var union awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategy
	if input == nil {
		return nil
	}

	if (input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Is_AwsKmsReEncrypt() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategyMemberAwsKmsReEncrypt{
			Value: (aws_cryptography_keyStoreAdmin_KeyManagementStrategy_AwsKmsReEncrypt_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Dtor_AwsKmsReEncrypt())),
		}
	}
	if (input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Is_AwsKmsDecryptEncrypt() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategyMemberAwsKmsDecryptEncrypt{
			Value: (aws_cryptography_keyStoreAdmin_KeyManagementStrategy_AwsKmsDecryptEncrypt_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Dtor_AwsKmsDecryptEncrypt())),
		}
	}

	return union

}
func aws_cryptography_keyStoreAdmin_KeyManagementStrategy_AwsKmsReEncrypt_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.AwsKms {
	return awscryptographykeystoresmithygeneratedtypes.AwsKms{GrantTokens: aws_cryptography_keyStore_AwsKms_grantTokens_FromDafny(input.(AwsCryptographyKeyStoreTypes.AwsKms).Dtor_grantTokens().UnwrapOr(nil)),
		KmsClient: aws_cryptography_keyStore_AwsKms_kmsClient_FromDafny(input.(AwsCryptographyKeyStoreTypes.AwsKms).Dtor_kmsClient().UnwrapOr(nil)),
	}
}
func aws_cryptography_keyStore_AwsKms_grantTokens_FromDafny(input interface{}) []string {
	if input == nil {
		return nil
	}
	fieldValue := make([]string, 0)
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, aws_cryptography_keyStore_GrantTokenList_member_FromDafny(val))
	}
	return fieldValue
}
func aws_cryptography_keyStore_GrantTokenList_member_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_AwsKms_kmsClient_FromDafny(input interface{}) *kms.Client {
	shim, ok := input.(*KMSwrapped.Shim)
	if !ok {
		panic("Not able to convert client to native")
	}
	return shim.Client

}
func aws_cryptography_keyStoreAdmin_KeyManagementStrategy_AwsKmsDecryptEncrypt_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.AwsKmsDecryptEncrypt {
	return awscryptographykeystoreadminsmithygeneratedtypes.AwsKmsDecryptEncrypt{Decrypt: aws_cryptography_keyStoreAdmin_AwsKmsDecryptEncrypt_decrypt_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.AwsKmsDecryptEncrypt).Dtor_decrypt().UnwrapOr(nil)),
		Encrypt: aws_cryptography_keyStoreAdmin_AwsKmsDecryptEncrypt_encrypt_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.AwsKmsDecryptEncrypt).Dtor_encrypt().UnwrapOr(nil)),
	}
}
func aws_cryptography_keyStoreAdmin_AwsKmsDecryptEncrypt_decrypt_FromDafny(input interface{}) *awscryptographykeystoresmithygeneratedtypes.AwsKms {
	if input == nil {
		return nil
	}
	return &awscryptographykeystoresmithygeneratedtypes.AwsKms{GrantTokens: aws_cryptography_keyStore_AwsKms_grantTokens_FromDafny(input.(AwsCryptographyKeyStoreTypes.AwsKms).Dtor_grantTokens().UnwrapOr(nil)),
		KmsClient: aws_cryptography_keyStore_AwsKms_kmsClient_FromDafny(input.(AwsCryptographyKeyStoreTypes.AwsKms).Dtor_kmsClient().UnwrapOr(nil)),
	}
}
func aws_cryptography_keyStoreAdmin_AwsKmsDecryptEncrypt_encrypt_FromDafny(input interface{}) *awscryptographykeystoresmithygeneratedtypes.AwsKms {
	if input == nil {
		return nil
	}
	return &awscryptographykeystoresmithygeneratedtypes.AwsKms{GrantTokens: aws_cryptography_keyStore_AwsKms_grantTokens_FromDafny(input.(AwsCryptographyKeyStoreTypes.AwsKms).Dtor_grantTokens().UnwrapOr(nil)),
		KmsClient: aws_cryptography_keyStore_AwsKms_kmsClient_FromDafny(input.(AwsCryptographyKeyStoreTypes.AwsKms).Dtor_kmsClient().UnwrapOr(nil)),
	}
}
func aws_cryptography_keyStoreAdmin_ApplyMutationInput_SystemKey_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.SystemKey {
	var union awscryptographykeystoreadminsmithygeneratedtypes.SystemKey

	if (input.(AwsCryptographyKeyStoreAdminTypes.SystemKey)).Is_kmsSymmetricEncryption() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.SystemKeyMemberkmsSymmetricEncryption{
			Value: (aws_cryptography_keyStoreAdmin_SystemKey_kmsSymmetricEncryption_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.SystemKey)).Dtor_kmsSymmetricEncryption())),
		}
	}
	if (input.(AwsCryptographyKeyStoreAdminTypes.SystemKey)).Is_trustStorage() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.SystemKeyMembertrustStorage{
			Value: (aws_cryptography_keyStoreAdmin_SystemKey_trustStorage_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.SystemKey)).Dtor_trustStorage())),
		}
	}

	return union

}
func aws_cryptography_keyStoreAdmin_SystemKey_kmsSymmetricEncryption_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.KmsSymmetricEncryption {
	return awscryptographykeystoreadminsmithygeneratedtypes.KmsSymmetricEncryption{KmsArn: aws_cryptography_keyStoreAdmin_KmsSymmetricEncryption_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.KmsSymmetricEncryption).Dtor_KmsArn()),
		AwsKms: aws_cryptography_keyStoreAdmin_KmsSymmetricEncryption_AwsKms_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.KmsSymmetricEncryption).Dtor_AwsKms()),
	}
}
func aws_cryptography_keyStoreAdmin_KmsSymmetricEncryption_KmsArn_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_KmsSymmetricEncryption_AwsKms_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.AwsKms {
	return awscryptographykeystoresmithygeneratedtypes.AwsKms{GrantTokens: aws_cryptography_keyStore_AwsKms_grantTokens_FromDafny(input.(AwsCryptographyKeyStoreTypes.AwsKms).Dtor_grantTokens().UnwrapOr(nil)),
		KmsClient: aws_cryptography_keyStore_AwsKms_kmsClient_FromDafny(input.(AwsCryptographyKeyStoreTypes.AwsKms).Dtor_kmsClient().UnwrapOr(nil)),
	}
}
func aws_cryptography_keyStoreAdmin_SystemKey_trustStorage_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.TrustStorage {
	return awscryptographykeystoreadminsmithygeneratedtypes.TrustStorage{}
}
func aws_cryptography_keyStoreAdmin_ApplyMutationOutput_MutationResult_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.ApplyMutationResult {
	var union awscryptographykeystoreadminsmithygeneratedtypes.ApplyMutationResult

	if (input.(AwsCryptographyKeyStoreAdminTypes.ApplyMutationResult)).Is_ContinueMutation() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.ApplyMutationResultMemberContinueMutation{
			Value: (aws_cryptography_keyStoreAdmin_ApplyMutationResult_ContinueMutation_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.ApplyMutationResult)).Dtor_ContinueMutation())),
		}
	}
	if (input.(AwsCryptographyKeyStoreAdminTypes.ApplyMutationResult)).Is_CompleteMutation() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.ApplyMutationResultMemberCompleteMutation{
			Value: (aws_cryptography_keyStoreAdmin_ApplyMutationResult_CompleteMutation_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.ApplyMutationResult)).Dtor_CompleteMutation())),
		}
	}

	return union

}
func aws_cryptography_keyStoreAdmin_ApplyMutationResult_ContinueMutation_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.MutationToken {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutationToken{Identifier: aws_cryptography_keyStoreAdmin_MutationToken_Identifier_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationToken).Dtor_Identifier()),
		UUID:       aws_cryptography_keyStoreAdmin_MutationToken_UUID_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationToken).Dtor_UUID()),
		CreateTime: aws_cryptography_keyStoreAdmin_MutationToken_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationToken).Dtor_CreateTime()),
	}
}
func aws_cryptography_keyStoreAdmin_ApplyMutationResult_CompleteMutation_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.MutationComplete {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutationComplete{}
}
func aws_cryptography_keyStoreAdmin_ApplyMutationOutput_MutatedBranchKeyItems_FromDafny(input interface{}) []awscryptographykeystoreadminsmithygeneratedtypes.MutatedBranchKeyItem {
	fieldValue := make([]awscryptographykeystoreadminsmithygeneratedtypes.MutatedBranchKeyItem, 0)
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, aws_cryptography_keyStoreAdmin_MutatedBranchKeyItems_member_FromDafny(val))
	}
	return fieldValue
}
func aws_cryptography_keyStoreAdmin_MutatedBranchKeyItems_member_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.MutatedBranchKeyItem {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutatedBranchKeyItem{ItemType: aws_cryptography_keyStoreAdmin_MutatedBranchKeyItem_ItemType_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutatedBranchKeyItem).Dtor_ItemType()),
		Description: aws_cryptography_keyStoreAdmin_MutatedBranchKeyItem_Description_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutatedBranchKeyItem).Dtor_Description()),
	}
}
func aws_cryptography_keyStoreAdmin_MutatedBranchKeyItem_ItemType_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutatedBranchKeyItem_Description_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_ApplyMutationOutput_LastModifiedTime_FromDafny(input interface{}) *string {
	return func() *string {
		var s string
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_CreateKeyInput_Identifier_FromDafny(input interface{}) *string {
	return func() *string {
		var s string
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_CreateKeyInput_EncryptionContext_FromDafny(input interface{}) map[string]string {
	var m map[string]string = make(map[string]string)
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Map).Items()); ; {
		val, ok := i()
		if !ok {
			break
		}
		m[aws_cryptography_keyStore_EncryptionContext_key_FromDafny((*val.(dafny.Tuple).IndexInt(0)))] = aws_cryptography_keyStore_EncryptionContext_value_FromDafny((*val.(dafny.Tuple).IndexInt(1)))
	}
	return m

}
func aws_cryptography_keyStore_EncryptionContext_key_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				// UTF bytes should be always converted from bytes to string in go
				// Otherwise go treats the string as a unicode codepoint

				var valUint, _ = val.(uint8)
				var byteSlice = []byte{valUint}
				s = s + string(byteSlice)

			}
		}
	}()
}
func aws_cryptography_keyStore_EncryptionContext_value_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				// UTF bytes should be always converted from bytes to string in go
				// Otherwise go treats the string as a unicode codepoint

				var valUint, _ = val.(uint8)
				var byteSlice = []byte{valUint}
				s = s + string(byteSlice)

			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_CreateKeyInput_KmsArn_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.KmsSymmetricKeyArn {
	var union awscryptographykeystoreadminsmithygeneratedtypes.KmsSymmetricKeyArn

	if (input.(AwsCryptographyKeyStoreAdminTypes.KmsSymmetricKeyArn)).Is_KmsKeyArn() {
		var dataSource = Wrappers.Companion_Option_.Create_Some_((input.(AwsCryptographyKeyStoreAdminTypes.KmsSymmetricKeyArn)).Dtor_KmsKeyArn())
		union = &awscryptographykeystoreadminsmithygeneratedtypes.KmsSymmetricKeyArnMemberKmsKeyArn{
			Value: (aws_cryptography_keyStoreAdmin_KmsSymmetricKeyArn_KmsKeyArn_FromDafny(dataSource.UnwrapOr(nil))),
		}
	}
	if (input.(AwsCryptographyKeyStoreAdminTypes.KmsSymmetricKeyArn)).Is_KmsMRKeyArn() {
		var dataSource = Wrappers.Companion_Option_.Create_Some_((input.(AwsCryptographyKeyStoreAdminTypes.KmsSymmetricKeyArn)).Dtor_KmsMRKeyArn())
		union = &awscryptographykeystoreadminsmithygeneratedtypes.KmsSymmetricKeyArnMemberKmsMRKeyArn{
			Value: (aws_cryptography_keyStoreAdmin_KmsSymmetricKeyArn_KmsMRKeyArn_FromDafny(dataSource.UnwrapOr(nil))),
		}
	}

	return union

}
func aws_cryptography_keyStoreAdmin_KmsSymmetricKeyArn_KmsKeyArn_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_KmsSymmetricKeyArn_KmsMRKeyArn_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_CreateKeyInput_Strategy_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategy {
	var union awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategy
	if input == nil {
		return nil
	}

	if (input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Is_AwsKmsReEncrypt() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategyMemberAwsKmsReEncrypt{
			Value: (aws_cryptography_keyStoreAdmin_KeyManagementStrategy_AwsKmsReEncrypt_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Dtor_AwsKmsReEncrypt())),
		}
	}
	if (input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Is_AwsKmsDecryptEncrypt() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategyMemberAwsKmsDecryptEncrypt{
			Value: (aws_cryptography_keyStoreAdmin_KeyManagementStrategy_AwsKmsDecryptEncrypt_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Dtor_AwsKmsDecryptEncrypt())),
		}
	}

	return union

}
func aws_cryptography_keyStoreAdmin_CreateKeyOutput_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_DescribeMutationInput_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_DescribeMutationOutput_MutationInFlight_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.MutationInFlight {
	var union awscryptographykeystoreadminsmithygeneratedtypes.MutationInFlight

	if (input.(AwsCryptographyKeyStoreAdminTypes.MutationInFlight)).Is_Yes() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.MutationInFlightMemberYes{
			Value: (aws_cryptography_keyStoreAdmin_MutationInFlight_Yes_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.MutationInFlight)).Dtor_Yes())),
		}
	}
	if (input.(AwsCryptographyKeyStoreAdminTypes.MutationInFlight)).Is_No() {
		var dataSource = Wrappers.Companion_Option_.Create_Some_((input.(AwsCryptographyKeyStoreAdminTypes.MutationInFlight)).Dtor_No())
		union = &awscryptographykeystoreadminsmithygeneratedtypes.MutationInFlightMemberNo{
			Value: (aws_cryptography_keyStoreAdmin_MutationInFlight_No_FromDafny(dataSource.UnwrapOr(nil))),
		}
	}

	return union

}
func aws_cryptography_keyStoreAdmin_MutationInFlight_Yes_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.MutationDescription {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutationDescription{MutationDetails: aws_cryptography_keyStoreAdmin_MutationDescription_MutationDetails_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationDescription).Dtor_MutationDetails()),
		MutationToken:    aws_cryptography_keyStoreAdmin_MutationDescription_MutationToken_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationDescription).Dtor_MutationToken()),
		LastModifiedTime: aws_cryptography_keyStoreAdmin_MutationDescription_LastModifiedTime_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationDescription).Dtor_LastModifiedTime().UnwrapOr(nil)),
	}
}
func aws_cryptography_keyStoreAdmin_MutationDescription_MutationDetails_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.MutationDetails {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutationDetails{Original: aws_cryptography_keyStoreAdmin_MutationDetails_Original_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationDetails).Dtor_Original()),
		Terminal:   aws_cryptography_keyStoreAdmin_MutationDetails_Terminal_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationDetails).Dtor_Terminal()),
		Input:      aws_cryptography_keyStoreAdmin_MutationDetails_Input_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationDetails).Dtor_Input()),
		SystemKey:  aws_cryptography_keyStoreAdmin_MutationDetails_SystemKey_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationDetails).Dtor_SystemKey()),
		CreateTime: aws_cryptography_keyStoreAdmin_MutationDetails_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationDetails).Dtor_CreateTime()),
		UUID:       aws_cryptography_keyStoreAdmin_MutationDetails_UUID_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationDetails).Dtor_UUID()),
	}
}
func aws_cryptography_keyStoreAdmin_MutationDetails_Original_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.MutableBranchKeyProperties {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutableBranchKeyProperties{KmsArn: aws_cryptography_keyStoreAdmin_MutableBranchKeyProperties_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutableBranchKeyProperties).Dtor_KmsArn()),
		CustomEncryptionContext: aws_cryptography_keyStoreAdmin_MutableBranchKeyProperties_CustomEncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutableBranchKeyProperties).Dtor_CustomEncryptionContext()),
	}
}
func aws_cryptography_keyStoreAdmin_MutableBranchKeyProperties_KmsArn_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutableBranchKeyProperties_CustomEncryptionContext_FromDafny(input interface{}) map[string]string {
	var m map[string]string = make(map[string]string)
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Map).Items()); ; {
		val, ok := i()
		if !ok {
			break
		}
		m[aws_cryptography_keyStore_EncryptionContextString_key_FromDafny((*val.(dafny.Tuple).IndexInt(0)))] = aws_cryptography_keyStore_EncryptionContextString_value_FromDafny((*val.(dafny.Tuple).IndexInt(1)))
	}
	return m

}
func aws_cryptography_keyStore_EncryptionContextString_key_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_EncryptionContextString_value_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutationDetails_Terminal_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.MutableBranchKeyProperties {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutableBranchKeyProperties{KmsArn: aws_cryptography_keyStoreAdmin_MutableBranchKeyProperties_KmsArn_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutableBranchKeyProperties).Dtor_KmsArn()),
		CustomEncryptionContext: aws_cryptography_keyStoreAdmin_MutableBranchKeyProperties_CustomEncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutableBranchKeyProperties).Dtor_CustomEncryptionContext()),
	}
}
func aws_cryptography_keyStoreAdmin_MutationDetails_Input_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.Mutations {
	return awscryptographykeystoreadminsmithygeneratedtypes.Mutations{TerminalKmsArn: aws_cryptography_keyStoreAdmin_Mutations_TerminalKmsArn_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.Mutations).Dtor_TerminalKmsArn().UnwrapOr(nil)),
		TerminalEncryptionContext: aws_cryptography_keyStoreAdmin_Mutations_TerminalEncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.Mutations).Dtor_TerminalEncryptionContext().UnwrapOr(nil)),
	}
}
func aws_cryptography_keyStoreAdmin_Mutations_TerminalKmsArn_FromDafny(input interface{}) *string {
	return func() *string {
		var s string
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_Mutations_TerminalEncryptionContext_FromDafny(input interface{}) map[string]string {
	var m map[string]string = make(map[string]string)
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Map).Items()); ; {
		val, ok := i()
		if !ok {
			break
		}
		m[aws_cryptography_keyStore_EncryptionContextString_key_FromDafny((*val.(dafny.Tuple).IndexInt(0)))] = aws_cryptography_keyStore_EncryptionContextString_value_FromDafny((*val.(dafny.Tuple).IndexInt(1)))
	}
	return m

}
func aws_cryptography_keyStoreAdmin_MutationDetails_SystemKey_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutationDetails_CreateTime_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutationDetails_UUID_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutationDescription_MutationToken_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.MutationToken {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutationToken{Identifier: aws_cryptography_keyStoreAdmin_MutationToken_Identifier_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationToken).Dtor_Identifier()),
		UUID:       aws_cryptography_keyStoreAdmin_MutationToken_UUID_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationToken).Dtor_UUID()),
		CreateTime: aws_cryptography_keyStoreAdmin_MutationToken_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationToken).Dtor_CreateTime()),
	}
}
func aws_cryptography_keyStoreAdmin_MutationDescription_LastModifiedTime_FromDafny(input interface{}) *string {
	return func() *string {
		var s string
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutationInFlight_No_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_InitializeMutationInput_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_InitializeMutationInput_Mutations_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.Mutations {
	return awscryptographykeystoreadminsmithygeneratedtypes.Mutations{TerminalKmsArn: aws_cryptography_keyStoreAdmin_Mutations_TerminalKmsArn_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.Mutations).Dtor_TerminalKmsArn().UnwrapOr(nil)),
		TerminalEncryptionContext: aws_cryptography_keyStoreAdmin_Mutations_TerminalEncryptionContext_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.Mutations).Dtor_TerminalEncryptionContext().UnwrapOr(nil)),
	}
}
func aws_cryptography_keyStoreAdmin_InitializeMutationInput_Strategy_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategy {
	var union awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategy
	if input == nil {
		return nil
	}

	if (input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Is_AwsKmsReEncrypt() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategyMemberAwsKmsReEncrypt{
			Value: (aws_cryptography_keyStoreAdmin_KeyManagementStrategy_AwsKmsReEncrypt_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Dtor_AwsKmsReEncrypt())),
		}
	}
	if (input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Is_AwsKmsDecryptEncrypt() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategyMemberAwsKmsDecryptEncrypt{
			Value: (aws_cryptography_keyStoreAdmin_KeyManagementStrategy_AwsKmsDecryptEncrypt_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Dtor_AwsKmsDecryptEncrypt())),
		}
	}

	return union

}
func aws_cryptography_keyStoreAdmin_InitializeMutationInput_SystemKey_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.SystemKey {
	var union awscryptographykeystoreadminsmithygeneratedtypes.SystemKey

	if (input.(AwsCryptographyKeyStoreAdminTypes.SystemKey)).Is_kmsSymmetricEncryption() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.SystemKeyMemberkmsSymmetricEncryption{
			Value: (aws_cryptography_keyStoreAdmin_SystemKey_kmsSymmetricEncryption_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.SystemKey)).Dtor_kmsSymmetricEncryption())),
		}
	}
	if (input.(AwsCryptographyKeyStoreAdminTypes.SystemKey)).Is_trustStorage() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.SystemKeyMembertrustStorage{
			Value: (aws_cryptography_keyStoreAdmin_SystemKey_trustStorage_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.SystemKey)).Dtor_trustStorage())),
		}
	}

	return union

}
func aws_cryptography_keyStoreAdmin_InitializeMutationInput_DoNotVersion_FromDafny(input interface{}) *bool {
	return func() *bool {
		var b bool
		if input == nil {
			return nil
		}
		b = input.(bool)
		return &b
	}()
}
func aws_cryptography_keyStoreAdmin_InitializeMutationOutput_MutationToken_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.MutationToken {
	return awscryptographykeystoreadminsmithygeneratedtypes.MutationToken{Identifier: aws_cryptography_keyStoreAdmin_MutationToken_Identifier_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationToken).Dtor_Identifier()),
		UUID:       aws_cryptography_keyStoreAdmin_MutationToken_UUID_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationToken).Dtor_UUID()),
		CreateTime: aws_cryptography_keyStoreAdmin_MutationToken_CreateTime_FromDafny(input.(AwsCryptographyKeyStoreAdminTypes.MutationToken).Dtor_CreateTime()),
	}
}
func aws_cryptography_keyStoreAdmin_InitializeMutationOutput_MutatedBranchKeyItems_FromDafny(input interface{}) []awscryptographykeystoreadminsmithygeneratedtypes.MutatedBranchKeyItem {
	fieldValue := make([]awscryptographykeystoreadminsmithygeneratedtypes.MutatedBranchKeyItem, 0)
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, aws_cryptography_keyStoreAdmin_MutatedBranchKeyItems_member_FromDafny(val))
	}
	return fieldValue
}
func aws_cryptography_keyStoreAdmin_InitializeMutationOutput_InitializeMutationFlag_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.InitializeMutationFlag {
	return func() awscryptographykeystoreadminsmithygeneratedtypes.InitializeMutationFlag {
		var u awscryptographykeystoreadminsmithygeneratedtypes.InitializeMutationFlag
		inputEnum := input.(AwsCryptographyKeyStoreAdminTypes.InitializeMutationFlag)
		index := -1
		for allEnums := dafny.Iterate(AwsCryptographyKeyStoreAdminTypes.CompanionStruct_InitializeMutationFlag_{}.AllSingletonConstructors()); ; {
			enum, ok := allEnums()
			if ok {
				index++
				if enum.(AwsCryptographyKeyStoreAdminTypes.InitializeMutationFlag).Equals(inputEnum) {
					break
				}
			}
		}

		return u.Values()[index]
	}()
}
func aws_cryptography_keyStoreAdmin_InitializeMutationOutput_LastModifiedTime_FromDafny(input interface{}) *string {
	return func() *string {
		var s string
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_VersionKeyInput_Identifier_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_VersionKeyInput_KmsArn_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.KmsSymmetricKeyArn {
	var union awscryptographykeystoreadminsmithygeneratedtypes.KmsSymmetricKeyArn

	if (input.(AwsCryptographyKeyStoreAdminTypes.KmsSymmetricKeyArn)).Is_KmsKeyArn() {
		var dataSource = Wrappers.Companion_Option_.Create_Some_((input.(AwsCryptographyKeyStoreAdminTypes.KmsSymmetricKeyArn)).Dtor_KmsKeyArn())
		union = &awscryptographykeystoreadminsmithygeneratedtypes.KmsSymmetricKeyArnMemberKmsKeyArn{
			Value: (aws_cryptography_keyStoreAdmin_KmsSymmetricKeyArn_KmsKeyArn_FromDafny(dataSource.UnwrapOr(nil))),
		}
	}
	if (input.(AwsCryptographyKeyStoreAdminTypes.KmsSymmetricKeyArn)).Is_KmsMRKeyArn() {
		var dataSource = Wrappers.Companion_Option_.Create_Some_((input.(AwsCryptographyKeyStoreAdminTypes.KmsSymmetricKeyArn)).Dtor_KmsMRKeyArn())
		union = &awscryptographykeystoreadminsmithygeneratedtypes.KmsSymmetricKeyArnMemberKmsMRKeyArn{
			Value: (aws_cryptography_keyStoreAdmin_KmsSymmetricKeyArn_KmsMRKeyArn_FromDafny(dataSource.UnwrapOr(nil))),
		}
	}

	return union

}
func aws_cryptography_keyStoreAdmin_VersionKeyInput_Strategy_FromDafny(input interface{}) awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategy {
	var union awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategy
	if input == nil {
		return nil
	}

	if (input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Is_AwsKmsReEncrypt() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategyMemberAwsKmsReEncrypt{
			Value: (aws_cryptography_keyStoreAdmin_KeyManagementStrategy_AwsKmsReEncrypt_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Dtor_AwsKmsReEncrypt())),
		}
	}
	if (input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Is_AwsKmsDecryptEncrypt() {

		union = &awscryptographykeystoreadminsmithygeneratedtypes.KeyManagementStrategyMemberAwsKmsDecryptEncrypt{
			Value: (aws_cryptography_keyStoreAdmin_KeyManagementStrategy_AwsKmsDecryptEncrypt_FromDafny((input.(AwsCryptographyKeyStoreAdminTypes.KeyManagementStrategy)).Dtor_AwsKmsDecryptEncrypt())),
		}
	}

	return union

}
func aws_cryptography_keyStoreAdmin_KeyStoreAdminException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutationConflictException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutationFromException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutationInvalidException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutationToException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_MutationVerificationException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_UnexpectedStateException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_UnsupportedFeatureException_message_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_KeyStoreAdminConfig_logicalKeyStoreName_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStoreAdmin_KeyStoreAdminConfig_storage_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.Storage {
	var union awscryptographykeystoresmithygeneratedtypes.Storage

	if (input.(AwsCryptographyKeyStoreTypes.Storage)).Is_ddb() {

		union = &awscryptographykeystoresmithygeneratedtypes.StorageMemberddb{
			Value: (aws_cryptography_keyStore_Storage_ddb_FromDafny((input.(AwsCryptographyKeyStoreTypes.Storage)).Dtor_ddb())),
		}
	}
	if (input.(AwsCryptographyKeyStoreTypes.Storage)).Is_custom() {

		union = &awscryptographykeystoresmithygeneratedtypes.StorageMembercustom{
			Value: (awscryptographykeystoresmithygenerated.KeyStorageInterface_FromDafny((input.(AwsCryptographyKeyStoreTypes.Storage)).Dtor_custom().(AwsCryptographyKeyStoreTypes.IKeyStorageInterface))),
		}
	}

	return union

}
func aws_cryptography_keyStore_Storage_ddb_FromDafny(input interface{}) awscryptographykeystoresmithygeneratedtypes.DynamoDBTable {
	return awscryptographykeystoresmithygeneratedtypes.DynamoDBTable{DdbTableName: aws_cryptography_keyStore_DynamoDBTable_ddbTableName_FromDafny(input.(AwsCryptographyKeyStoreTypes.DynamoDBTable).Dtor_ddbTableName()),
		DdbClient: aws_cryptography_keyStore_DynamoDBTable_ddbClient_FromDafny(input.(AwsCryptographyKeyStoreTypes.DynamoDBTable).Dtor_ddbClient().UnwrapOr(nil)),
	}
}
func aws_cryptography_keyStore_DynamoDBTable_ddbTableName_FromDafny(input interface{}) string {
	return func() string {
		var s string
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
}
func aws_cryptography_keyStore_DynamoDBTable_ddbClient_FromDafny(input interface{}) *dynamodb.Client {
	shim, ok := input.(*DynamoDBwrapped.Shim)
	if !ok {
		panic("Not able to convert client to native")
	}
	return shim.Client

}
