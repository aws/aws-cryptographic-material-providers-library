// Code generated by smithy-go-codegen DO NOT EDIT.

package awscryptographykeystoreadminsmithygenerated

import (
	"context"

	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/AwsCryptographyKeyStoreAdminTypes"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/KeyStoreAdmin"
	"github.com/aws/aws-cryptographic-material-providers-library/releases/go/mpl/awscryptographykeystoreadminsmithygeneratedtypes"
)

type Client struct {
	DafnyClient AwsCryptographyKeyStoreAdminTypes.IKeyStoreAdminClient
}

func NewClient(clientConfig awscryptographykeystoreadminsmithygeneratedtypes.KeyStoreAdminConfig) (*Client, error) {
	var dafnyConfig = KeyStoreAdminConfig_ToDafny(clientConfig)
	var dafny_response = KeyStoreAdmin.Companion_Default___.KeyStoreAdmin(dafnyConfig)
	if dafny_response.Is_Failure() {
		panic("Client construction failed. This should never happen")
	}
	var dafnyClient = dafny_response.Extract().(AwsCryptographyKeyStoreAdminTypes.IKeyStoreAdminClient)
	client := &Client{dafnyClient}
	return client, nil
}

func (client *Client) CreateKey(ctx context.Context, params awscryptographykeystoreadminsmithygeneratedtypes.CreateKeyInput) (*awscryptographykeystoreadminsmithygeneratedtypes.CreateKeyOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographykeystoreadminsmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyKeyStoreAdminTypes.CreateKeyInput = CreateKeyInput_ToDafny(params)
	var dafny_response = client.DafnyClient.CreateKey(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyKeyStoreAdminTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = CreateKeyOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyKeyStoreAdminTypes.CreateKeyOutput))
	return &native_response, nil

}

func (client *Client) VersionKey(ctx context.Context, params awscryptographykeystoreadminsmithygeneratedtypes.VersionKeyInput) (*awscryptographykeystoreadminsmithygeneratedtypes.VersionKeyOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographykeystoreadminsmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyKeyStoreAdminTypes.VersionKeyInput = VersionKeyInput_ToDafny(params)
	var dafny_response = client.DafnyClient.VersionKey(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyKeyStoreAdminTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = VersionKeyOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyKeyStoreAdminTypes.VersionKeyOutput))
	return &native_response, nil

}

func (client *Client) InitializeMutation(ctx context.Context, params awscryptographykeystoreadminsmithygeneratedtypes.InitializeMutationInput) (*awscryptographykeystoreadminsmithygeneratedtypes.InitializeMutationOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographykeystoreadminsmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyKeyStoreAdminTypes.InitializeMutationInput = InitializeMutationInput_ToDafny(params)
	var dafny_response = client.DafnyClient.InitializeMutation(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyKeyStoreAdminTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = InitializeMutationOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyKeyStoreAdminTypes.InitializeMutationOutput))
	return &native_response, nil

}

func (client *Client) ApplyMutation(ctx context.Context, params awscryptographykeystoreadminsmithygeneratedtypes.ApplyMutationInput) (*awscryptographykeystoreadminsmithygeneratedtypes.ApplyMutationOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographykeystoreadminsmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyKeyStoreAdminTypes.ApplyMutationInput = ApplyMutationInput_ToDafny(params)
	var dafny_response = client.DafnyClient.ApplyMutation(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyKeyStoreAdminTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = ApplyMutationOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyKeyStoreAdminTypes.ApplyMutationOutput))
	return &native_response, nil

}

func (client *Client) DescribeMutation(ctx context.Context, params awscryptographykeystoreadminsmithygeneratedtypes.DescribeMutationInput) (*awscryptographykeystoreadminsmithygeneratedtypes.DescribeMutationOutput, error) {
	err := params.Validate()
	if err != nil {
		opaqueErr := awscryptographykeystoreadminsmithygeneratedtypes.OpaqueError{
			ErrObject: err,
		}
		return nil, opaqueErr
	}

	var dafny_request AwsCryptographyKeyStoreAdminTypes.DescribeMutationInput = DescribeMutationInput_ToDafny(params)
	var dafny_response = client.DafnyClient.DescribeMutation(dafny_request)

	if dafny_response.Is_Failure() {
		err := dafny_response.Dtor_error().(AwsCryptographyKeyStoreAdminTypes.Error)
		return nil, Error_FromDafny(err)
	}
	var native_response = DescribeMutationOutput_FromDafny(dafny_response.Dtor_value().(AwsCryptographyKeyStoreAdminTypes.DescribeMutationOutput))
	return &native_response, nil

}
