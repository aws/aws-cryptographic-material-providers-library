name: Fuzz Testing Interoperability

on:
  push: # Run on push to any branch
  pull_request:
    branches: [main, master] # Run on PRs to main branches
  workflow_dispatch: # Allow manual triggering
    inputs:
      dafny:
        description: "The Dafny version to run"
        required: false
        default: "4.9.0"
        type: string

jobs:
  fuzzInteropTest:
    strategy:
      fail-fast: false # Continue testing other combinations even if one fails
      matrix:
        library: [TestVectorsAwsCryptographicMaterialProviders]
        os: [ubuntu-22.04] # Focus on one OS to reduce matrix size
        # Test key language combinations for interoperability
        #TODO-Fuzztesting:  Add more combinations
        # encrypt_lang: [go, python, java, net]
        # decrypt_lang: [go, python, java, net]
        
        include:
          - encrypt_lang: go
            decrypt_lang: python
          - encrypt_lang: python
            decrypt_lang: go
          - encrypt_lang: java
            decrypt_lang: python
          - encrypt_lang: python
            decrypt_lang: java
          - encrypt_lang: net
            decrypt_lang: python
          - encrypt_lang: python
            decrypt_lang: net
        dotnet-version: ["6.0.x"]
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write # Needed for AWS credentials
      contents: read # Needed for checkout
    steps:
      - name: Support longpaths on Git checkout
        run: |
          git config --global core.longpaths true

      # Configure AWS credentials for KMS access
      - name: Configure AWS Credentials for Tests
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::370957321024:role/GitHub-CI-MPL-Dafny-Role-us-west-2
          role-session-name: FuzzInteropTests

      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Init Submodules
        shell: bash
        run: |
          git submodule update --init --recursive smithy-dafny

      # Set up Python for running the fuzz generator
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          architecture: x64
      - run: |
          python -m pip install --upgrade pip
          pip install --upgrade tox
          pip install poetry
          pip install hypothesis

      # Set up language runtimes based on matrix
      - name: Setup Java
        if: matrix.encrypt_lang == 'java' || matrix.decrypt_lang == 'java'
        uses: actions/setup-java@v3
        with:
          distribution: "corretto"
          java-version: 17

      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        if: matrix.encrypt_lang == 'net' || matrix.decrypt_lang == 'net'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Setup Go
        if: matrix.encrypt_lang == 'go' || matrix.decrypt_lang == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install Go imports
        if: matrix.encrypt_lang == 'go' || matrix.decrypt_lang == 'go'
        run: |
          go install golang.org/x/tools/cmd/goimports@latest

      # Setup Dafny
      - name: Setup Dafny
        uses: ./.github/actions/setup_dafny
        with:
          dafny-version: ${{ inputs.dafny || '4.9.0' }}

      # Install Smithy-Dafny codegen dependencies - critical for transpile commands
      - name: Install Smithy-Dafny codegen dependencies
        uses: ./.github/actions/install_smithy_dafny_codegen_dependencies

      # Build Python implementation (always needed for fuzz generator)
      - name: Build Python implementation
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          CORES=$(node -e 'console.log(os.cpus().length)')
          make transpile_python

      # Build Java implementation if needed
      - name: Build Java implementation
        if: matrix.encrypt_lang == 'java' || matrix.decrypt_lang == 'java'
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          CORES=$(node -e 'console.log(os.cpus().length)')
          make build_java CORES=$CORES

      # Build .NET implementation if needed
      - name: Build .NET implementation
        if: matrix.encrypt_lang == 'net' || matrix.decrypt_lang == 'net'
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          CORES=$(node -e 'console.log(os.cpus().length)')
          make transpile_net

      # Build Go implementation if needed
      - name: Build Go implementation
        if: matrix.encrypt_lang == 'go' || matrix.decrypt_lang == 'go'
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          CORES=$(node -e 'console.log(os.cpus().length)')
          make transpile_go

      # Purge polymorph code in Go
      - name: Purge polymorph code in Go
        if: matrix.encrypt_lang == 'go' || matrix.decrypt_lang == 'go'
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          make purge_polymorph_code

      # Setup gradle for Java
      - name: Setup gradle
        if: matrix.encrypt_lang == 'java' || matrix.decrypt_lang == 'java'
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 7.2

      # Run the interoperability test using our Makefile command
      #TODO-Fuzztesting: need to log/save failures
      - name: Run fuzz interoperability test
        working-directory: ./${{ matrix.library }}
        run: make test_fuzz_interop ENCRYPT_LANG=${{ matrix.encrypt_lang }} DECRYPT_LANG=${{ matrix.decrypt_lang }}