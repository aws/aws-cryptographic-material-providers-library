name: Fuzz Testing Interoperability

on:
  push: # Run on push to any branch
  pull_request:
    branches: [main, master] # Run on PRs to main branches
  workflow_dispatch: # Allow manual triggering
    inputs:
      dafny:
        description: "The Dafny version to run"
        required: false
        default: "4.2.0"
        type: string
      regenerate-code:
        description: "Regenerate code using smithy-dafny"
        required: false
        default: false
        type: boolean

jobs:
  fuzzInteropTest:
    strategy:
      fail-fast: false # Continue testing other combinations even if one fails
      matrix:
        library: [TestVectorsAwsCryptographicMaterialProviders]
        os: [ubuntu-22.04] # Focus on one OS to reduce matrix size
        # Randomize encryption and decryption languages
        include:
          - encrypt_lang: go
            decrypt_lang: java
          - encrypt_lang: java
            decrypt_lang: go
          - encrypt_lang: python
            decrypt_lang: go
          - encrypt_lang: go
            decrypt_lang: python
          - encrypt_lang: rust
            decrypt_lang: net
          - encrypt_lang: net
            decrypt_lang: rust
          - encrypt_lang: python
            decrypt_lang: rust
          - encrypt_lang: java
            decrypt_lang: python
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write # Needed for AWS credentials
      contents: read # Needed for checkout
    steps:
      - name: Support longpaths on Git checkout
        run: |
          git config --global core.longpaths true

      # Configure AWS credentials for KMS access
      - name: Configure AWS Credentials for Tests
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::370957321024:role/GitHub-CI-MPL-Dafny-Role-us-west-2
          role-session-name: FuzzInteropTests

      - uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Init Submodules
        shell: bash
        run: |
          git submodule update --init --recursive smithy-dafny

      # Set up Python for running the fuzz generator
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          architecture: x64
      - run: |
          python -m pip install --upgrade pip
          pip install --upgrade tox
          pip install poetry
          pip install hypothesis

      # Set up language runtimes based on matrix
      - name: Setup Java
        if: matrix.encrypt_lang == 'java' || matrix.decrypt_lang == 'java'
        uses: actions/setup-java@v3
        with:
          distribution: "corretto"
          java-version: 17

      - name: Setup .NET
        if: matrix.encrypt_lang == 'net' || matrix.decrypt_lang == 'net'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.0.x"

      - name: Setup Rust
        if: matrix.encrypt_lang == 'rust' || matrix.decrypt_lang == 'rust'
        uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
        with:
          components: rustfmt

      - name: Setup Go
        if: matrix.encrypt_lang == 'go' || matrix.decrypt_lang == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install Go imports
        if: matrix.encrypt_lang == 'go' || matrix.decrypt_lang == 'go'
        run: |
          go install golang.org/x/tools/cmd/goimports@latest

      # Setup Dafny with different versions for Rust vs other languages
      - name: Setup Dafny for Rust
        if: matrix.encrypt_lang == 'rust' || matrix.decrypt_lang == 'rust'
        uses: ./.github/actions/setup_dafny
        with:
          dafny-version: nightly-2025-01-30-7db1e5f

      - name: Setup Dafny for non-Rust
        if: matrix.encrypt_lang != 'rust' && matrix.decrypt_lang != 'rust'
        uses: ./.github/actions/setup_dafny
        with:
          dafny-version: ${{ inputs.dafny || '4.2.0' }}

      # Install Smithy-Dafny codegen dependencies - critical for transpile commands
      - name: Install Smithy-Dafny codegen dependencies
        uses: ./.github/actions/install_smithy_dafny_codegen_dependencies

      # Check directory structure before building
      - name: Check directory structure
        run: |
          echo "Checking directory structure in StandardLibrary..."
          ls -la StandardLibrary
          echo "Checking for dafny directory in StandardLibrary..."
          ls -la StandardLibrary/dafny || echo "dafny directory not found"
          echo "Checking for src directory in StandardLibrary..."
          ls -la StandardLibrary/src || echo "src directory not found"
          echo "Checking directory structure in ${{ matrix.library }}..."
          ls -la ${{ matrix.library }}
          echo "Checking for dafny directory in ${{ matrix.library }}..."
          ls -la ${{ matrix.library }}/dafny || echo "dafny directory not found"

      # Regenerate code using smithy-dafny if necessary
      - name: Regenerate code using smithy-dafny if necessary
        if: ${{ inputs.regenerate-code }}
        uses: ./.github/actions/polymorph_codegen
        with:
          dafny: ${{ inputs.dafny || '4.2.0' }}
          library: ${{ matrix.library }}
          diff-generated-code: false

      # Update simplified_fuzz_generator.py to accept command-line arguments
      - name: Update fuzz generator
        run: |
          cat <<EOF >> TestVectorsAwsCryptographicMaterialProviders/runtimes/python/simplified_fuzz_generator.py

          # Add command-line argument support
          if __name__ == "__main__":
              import argparse
              parser = argparse.ArgumentParser(description='Generate fuzzed test vectors')
              parser.add_argument('--num-vectors', type=int, default=4, help='Number of test vectors to generate')
              args = parser.parse_args()
              
              # Override the default number of vectors
              test_vectors, new_keys = generate_fuzz_test_vectors(num_vectors=args.num_vectors)
              
              # Load and update keys.json
              try:
                  with open("keys.json", "r") as f:
                      keys_data = json.load(f)
              except FileNotFoundError:
                  print("Error: keys.json not found!")
                  exit(1)
              
              keys_data["keys"].update(new_keys)
              
              with open("keys.json", "w") as f:
                  json.dump(keys_data, f, indent=2, ensure_ascii=False)
              
              # Create and save manifest.json
              manifest_data = {
                  "manifest": {"version": 4, "type": "awses-mpl-encrypt"},
                  "keys": "file://keys.json",
                  "tests": test_vectors
              }
              
              with open("manifest.json", "w") as f:
                  json.dump(manifest_data, f, indent=2, ensure_ascii=False)
              
              print(f"Generated {len(test_vectors)} test vectors with {len(new_keys)} new keys")
          EOF

      # Build implementations based on matrix - following the exact pattern from library_interop_tests.yml

      # Build Python implementation (always needed for fuzz generator)
      - name: Build Python implementation
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Searching for dafny directory:"
          find . -name dafny -type d
          echo "Searching for src directories:"
          find . -name src -type d
          echo "Searching for Index.dfy files:"
          find . -name Index.dfy
          # Original command
          CORES=$(node -e 'console.log(os.cpus().length)')
          make transpile_python

      # Build Java implementation if needed
      - name: Build Java implementation
        if: matrix.encrypt_lang == 'java' || matrix.decrypt_lang == 'java'
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          # This works because `node` is installed by default on GHA runners
          CORES=$(node -e 'console.log(os.cpus().length)')
          make build_java CORES=$CORES

      # Build .NET implementation if needed
      - name: Build .NET implementation
        if: matrix.encrypt_lang == 'net' || matrix.decrypt_lang == 'net'
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          # This works because `node` is installed by default on GHA runners
          CORES=$(node -e 'console.log(os.cpus().length)')
          make transpile_net

      # We do not check in Rust polymorph code
      - name: Run make polymorph_rust
        if: matrix.encrypt_lang == 'rust' || matrix.decrypt_lang == 'rust'
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          make polymorph_rust

      # Build Rust implementation if needed
      - name: Build Rust implementation
        if: matrix.encrypt_lang == 'rust' || matrix.decrypt_lang == 'rust'
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          CORES=$(node -e 'console.log(os.cpus().length)')
          make transpile_rust TRANSPILE_TESTS_IN_RUST=1 CORES=$CORES

      # Build Go implementation if needed
      - name: Build Go implementation
        if: matrix.encrypt_lang == 'go' || matrix.decrypt_lang == 'go'
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          # This works because `node` is installed by default on GHA runners
          CORES=$(node -e 'console.log(os.cpus().length)')
          make transpile_go

      # TODO: Remove this after Go polymorph does not generate unwanted duplicate code.
      - name: Purge polymorph code in Go
        if: matrix.encrypt_lang == 'go' || matrix.decrypt_lang == 'go'
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          make purge_polymorph_code

      # Setup gradle for Java
      - name: Setup gradle
        if: matrix.encrypt_lang == 'java' || matrix.decrypt_lang == 'java'
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 7.2

      # Run the interoperability test using our new Makefile command
      - name: Run fuzz interoperability test
        working-directory: ./${{ matrix.library }}
        run: make test_fuzz_interop ENCRYPT_LANG=${{ matrix.encrypt_lang }} DECRYPT_LANG=${{ matrix.decrypt_lang }}
