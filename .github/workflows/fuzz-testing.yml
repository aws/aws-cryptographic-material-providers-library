name: MPL Fuzz Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      duration:
        description: 'Duration of the fuzz testing in minutes'
        required: false
        default: '10'
        type: string

jobs:
  fuzz-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Set up Dafny
      uses: dafny-lang/setup-dafny-action@v1.6.1
      with:
        dafny-version: '4.2.0'

    - name: Setup dependencies
      run: |
        # Install system dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential jq

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install pytest, hypothesis and other testing dependencies
        pip install pytest pytest-xdist pytest-cov hypothesis boto3 poetry tox

    - name: Prepare and install Python packages
      run: |
        # Install packages directly in the correct dependency order
        echo "Installing StandardLibrary..."
        pip install -e ./StandardLibrary/runtimes/python/
        
        echo "Installing AwsCryptographyPrimitives..."
        pip install -e ./AwsCryptographyPrimitives/runtimes/python/
        
        echo "Installing ComAmazonawsKms..."
        pip install -e ./ComAmazonawsKms/runtimes/python/
        
        echo "Installing ComAmazonawsDynamodb..."
        pip install -e ./ComAmazonawsDynamodb/runtimes/python/
        
        # Create needed directories/files for the MPL package based on test imports
        mkdir -p ./AwsCryptographicMaterialProviders/runtimes/python/src/aws_cryptographic_material_providers/internaldafny/generated/
        mkdir -p ./AwsCryptographicMaterialProviders/runtimes/python/src/aws_cryptographic_material_providers/smithygenerated/aws_cryptography_materialproviders/
        
        # Create necessary __init__.py files
        touch ./AwsCryptographicMaterialProviders/runtimes/python/src/aws_cryptographic_material_providers/internaldafny/__init__.py
        touch ./AwsCryptographicMaterialProviders/runtimes/python/src/aws_cryptographic_material_providers/internaldafny/generated/__init__.py
        touch ./AwsCryptographicMaterialProviders/runtimes/python/src/aws_cryptographic_material_providers/smithygenerated/__init__.py
        touch ./AwsCryptographicMaterialProviders/runtimes/python/src/aws_cryptographic_material_providers/smithygenerated/aws_cryptography_materialproviders/__init__.py
        
        # Create the missing module_ file
        echo "# Empty module_ placeholder for testing" > ./AwsCryptographicMaterialProviders/runtimes/python/src/aws_cryptographic_material_providers/internaldafny/generated/module_.py
        
        echo "Installing AwsCryptographicMaterialProviders..."
        pip install -e ./AwsCryptographicMaterialProviders/runtimes/python/
        
        echo "Installing TestVectorsAwsCryptographicMaterialProviders..."
        pip install -e ./TestVectorsAwsCryptographicMaterialProviders/runtimes/python/
        
        # Install test requirements specifically
        cd TestVectorsAwsCryptographicMaterialProviders/runtimes/python
        if [ -f "requirements-test.txt" ]; then
          pip install -r requirements-test.txt
        fi
        cd ../../../

    # Source the CI account credentials if available (only on protected branches/internal PRs)
    - name: Setup AWS Credentials
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      run: |
        # Set AWS region even if we can't assume the role
        export AWS_REGION=us-west-2
        
        # If the assume-ci-role.sh script exists, source it to get AWS credentials
        if [ -f "assume-ci-role.sh" ]; then
          echo "Setting up AWS credentials for KMS testing"
          chmod +x ./assume-ci-role.sh
          source ./assume-ci-role.sh || echo "Failed to assume role, continuing without AWS credentials"
        else
          echo "No assume-ci-role.sh script found, skipping AWS credentials setup"
        fi
      shell: bash
      continue-on-error: true

    # Run the CI-friendly fuzz tests
    - name: Run Basic Fuzz Tests (CI mode)
      run: |
        cd TestVectorsAwsCryptographicMaterialProviders/runtimes/python
        python -m pytest -xvs test/test_fuzz_ci.py::test_encryption_decryption_roundtrip_ci test/test_fuzz_ci.py::test_multi_keyring_handling_ci

    # Run the more intensive CI-friendly fuzz tests with longer duration
    - name: Run Extended Fuzz Tests (CI mode)
      if: github.event_name == 'workflow_dispatch'
      env:
        TEST_DURATION: ${{ github.event.inputs.duration }}
      run: |
        # Set environment variables for hypothesis
        export HYPOTHESIS_MAX_EXAMPLES=100  # Reduced for CI
        export HYPOTHESIS_DEADLINE=30000    # 30 seconds
        
        cd TestVectorsAwsCryptographicMaterialProviders/runtimes/python
        # Run the CI tests with more examples
        python -m pytest -xvs test/test_fuzz_ci.py

    # Add a step to test with KMS if AWS credentials are available
    - name: Run KMS Keyring Test (CI mode)
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      run: |
        # Check if AWS credentials are available
        if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ]; then
          echo "Running KMS keyring test with AWS credentials"
          cd TestVectorsAwsCryptographicMaterialProviders/runtimes/python
          python -m pytest -xvs test/test_fuzz_ci.py::test_kms_keyring_if_available_ci
        else
          echo "AWS credentials not available, skipping KMS keyring test"
          # Exit with success so this step doesn't fail the workflow
          exit 0
        fi
      shell: bash
      continue-on-error: true
