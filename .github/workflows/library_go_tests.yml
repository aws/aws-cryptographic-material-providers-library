# This workflow performs tests in Go.
name: Library Go tests

on:
  workflow_call:
    inputs:
      dafny:
        description: "The Dafny version to run"
        required: true
        type: string
      regenerate-code:
        description: "Regenerate code using smithy-dafny"
        required: false
        default: false
        type: boolean

jobs:
  testGo:
    strategy:
      fail-fast: false
      matrix:
        library:
          [
            StandardLibrary,
            ComAmazonawsKms,
            ComAmazonawsDynamodb,
            AwsCryptographyPrimitives,
            AwsCryptographicMaterialProviders,
          ]
        go-version: ["1.23"]
        os: [
            # TODO fix Dafny-generated tests on Windows;
            # the sys.path workaround for generated Dafny doesn't work on Windows.
            # Note: only tests use the sys.path workaround, not source code.
            # Windows source code is tested downstream (ex. ESDK-Python CI).
            # windows-latest,
            ubuntu-latest,
            macos-13,
          ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Support longpaths on Git checkout
        run: |
          git config --global core.longpaths true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::370957321024:role/GitHub-CI-MPL-Dafny-Role-us-west-2
          role-session-name: GoTests

      - uses: actions/checkout@v4
      # The specification submodule is private so we don't have access, but we don't need
      # it to verify the Dafny code. Instead we manually pull the submodules we DO need.
      - run: git submodule update --init libraries
      - run: git submodule update --init smithy-dafny

      - name: Setup Dafny
        uses: dafny-lang/setup-dafny-action@v1.7.0
        with:
          dafny-version: ${{ inputs.dafny }}

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install Go imports
        run: |
          go install golang.org/x/tools/cmd/goimports@latest

      - name: Build ${{ matrix.library }} implementation
        working-directory: ./${{ matrix.library }}
        run: |
          # This works because `node` is installed by default on GHA runners
          CORES=$(node -e 'console.log(os.cpus().length)')
          make transpile_go CORES=$CORES

      - name: Test ${{ matrix.library }}
        working-directory: ./${{ matrix.library }}
        shell: bash
        run: |
          make test_go
