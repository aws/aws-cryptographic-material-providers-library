# This workflow performs tests in .NET.
name: Library net tests

on:
  workflow_call:
    inputs:
      dafny:
        description: "The Dafny version to run"
        required: true
        type: string

jobs:
  testDotNet:
    strategy:
      matrix:
        library:
          [
            StandardLibrary,
            AwsCryptographyPrimitives,
            ComAmazonawsKms,
            ComAmazonawsDynamodb,
            # AwsCryptographicMaterialProviders,
            # TestVectorsAwsCryptographicMaterialProviders,
          ]
        dotnet-version: ["6.0.x"]
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
    steps:
      - name: Support longpaths on Git checkout
        run: |
          git config --global core.longpaths true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::370957321024:role/GitHub-CI-MPL-Dafny-Role-us-west-2
          role-session-name: NetTests

      - uses: actions/checkout@v3
      # The specification submodule is private so we don't have access, but we don't need
      # it to verify the Dafny code. Instead we manually pull the submodule we DO need.
      - run: git submodule update --init libraries

      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Setup Dafny
        uses: dafny-lang/setup-dafny-action@v1.6.1
        with:
          dafny-version: ${{ inputs.dafny }}

      - name: Download Dependencies
        working-directory: ./${{ matrix.library }}
        run: make setup_net

      - name: Compile ${{ matrix.library }} implementation
        shell: bash
        working-directory: ./${{ matrix.library }}
        run: |
          # This works because `node` is installed by default on GHA runners
          CORES=$(node -e 'console.log(os.cpus().length)')
          make transpile_net CORES=$CORES

      # - name: Test ${{ matrix.library }} .NET Framework net48
      #   working-directory: ./${{ matrix.library }}
      #   shell: bash
      #   run: |
      #     make test_net FRAMEWORK=net48
          
      # - name: Test ${{ matrix.library }} .NET net6.0
      #   working-directory: ./${{ matrix.library }}
      #   shell: bash
      #   run: |
      #     if [ "$RUNNER_OS" == "macOS" ]; then
      #       make test_net_mac_intel FRAMEWORK=net6.0
      #     else
      #       make test_net FRAMEWORK=net6.0
      #     fi

      # - name: Test Cache Thread Safety
      #   if: matrix.library == 'AwsCryptographicMaterialProviders'
      #   working-directory: ./${{ matrix.library }}
      #   shell: bash
      #   ## Run .NET 6.0 and .NET Framework net48
      #   run: |
      #     dotnet restore runtimes/net/tests/LocalCMC.Tests/
      #     dotnet build runtimes/net/tests/LocalCMC.Tests/
      #     dotnet test runtimes/net/tests/LocalCMC.Tests/ \
      #         --framework net6.0
      #     dotnet test runtimes/net/tests/LocalCMC.Tests/ \
      #         --framework net48

      # - name: Setup .NET Core SDK netcoreapp2.0
      #   uses: actions/setup-dotnet@v3
      #   with:
      #     dotnet-version: '2.0.9' # netcoreapp2.0 translate to 2.0.9... ask MSFT

      # For setting up netcoreapp2.0
      # See https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script#examples 
      - name: Setup .NET Core SDK netcoreapp2.0 Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Run a separate PowerShell process because the script calls exit, so it will end the current PowerShell session.
          &powershell -NoProfile -ExecutionPolicy unrestricted -Command "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; &([scriptblock]::Create((Invoke-WebRequest -UseBasicParsing 'https://dot.net/v1/dotnet-install.ps1'))) -Runtime dotnet -Version 2.0.9"

      - name: Setup .NET Core SDK netcoreapp2.0 Linux/Macos
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --runtime dotnet --version 2.0.9
          
      - name: Debug Setup .NET Core SDK netcoreapp2.0 Linux/Macos
        shell: bash
        run: |
          PATH=/home/runner/.dotnet:$PATH
          ls /home/runner/.dotnet/tools
          dotnet --list-runtimes
          
      - name: Test ${{ matrix.library }} .NET Framework netcoreapp2.0
        working-directory: ./${{ matrix.library }}
        shell: bash
        run: |
          make test_net FRAMEWORK=netcoreapp2.0

      - name: Test Cache Thread Safety netcoreapp2.0
        if: matrix.library == 'AwsCryptographicMaterialProviders'
        working-directory: ./${{ matrix.library }}
        shell: bash
        ## Run .NET 6.0 and .NET Framework net48
        run: |
          dotnet restore runtimes/net/tests/LocalCMC.Tests/
          dotnet build runtimes/net/tests/LocalCMC.Tests/
          dotnet test runtimes/net/tests/LocalCMC.Tests/ \
              --framework netcoreapp2.0
