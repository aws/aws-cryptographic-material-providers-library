# Code generated by smithy-python-codegen DO NOT EDIT.

import com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk
import module_
from software_amazon_cryptography_services_kms_internaldafny_types import (
    AlgorithmSpec_RSAES__OAEP__SHA__1,
    AlgorithmSpec_RSAES__OAEP__SHA__256,
    AlgorithmSpec_RSAES__PKCS1__V1__5,
    ConnectionErrorCodeType_CLUSTER__NOT__FOUND,
    ConnectionErrorCodeType_INSUFFICIENT__CLOUDHSM__HSMS,
    ConnectionErrorCodeType_INTERNAL__ERROR,
    ConnectionErrorCodeType_INVALID__CREDENTIALS,
    ConnectionErrorCodeType_NETWORK__ERRORS,
    ConnectionErrorCodeType_SUBNET__NOT__FOUND,
    ConnectionErrorCodeType_USER__LOCKED__OUT,
    ConnectionErrorCodeType_USER__LOGGED__IN,
    ConnectionErrorCodeType_USER__NOT__FOUND,
    ConnectionStateType_CONNECTED,
    ConnectionStateType_CONNECTING,
    ConnectionStateType_DISCONNECTED,
    ConnectionStateType_DISCONNECTING,
    ConnectionStateType_FAILED,
    CustomerMasterKeySpec_ECC__NIST__P256,
    CustomerMasterKeySpec_ECC__NIST__P384,
    CustomerMasterKeySpec_ECC__NIST__P521,
    CustomerMasterKeySpec_ECC__SECG__P256K1,
    CustomerMasterKeySpec_RSA__2048,
    CustomerMasterKeySpec_RSA__3072,
    CustomerMasterKeySpec_RSA__4096,
    CustomerMasterKeySpec_SYMMETRIC__DEFAULT,
    DataKeyPairSpec_ECC__NIST__P256,
    DataKeyPairSpec_ECC__NIST__P384,
    DataKeyPairSpec_ECC__NIST__P521,
    DataKeyPairSpec_ECC__SECG__P256K1,
    DataKeyPairSpec_RSA__2048,
    DataKeyPairSpec_RSA__3072,
    DataKeyPairSpec_RSA__4096,
    DataKeySpec_AES__128,
    DataKeySpec_AES__256,
    EncryptionAlgorithmSpec_RSAES__OAEP__SHA__1,
    EncryptionAlgorithmSpec_RSAES__OAEP__SHA__256,
    EncryptionAlgorithmSpec_SYMMETRIC__DEFAULT,
    ExpirationModelType_KEY__MATERIAL__DOES__NOT__EXPIRE,
    ExpirationModelType_KEY__MATERIAL__EXPIRES,
    GrantOperation_CreateGrant,
    GrantOperation_Decrypt,
    GrantOperation_DescribeKey,
    GrantOperation_Encrypt,
    GrantOperation_GenerateDataKey,
    GrantOperation_GenerateDataKeyPair,
    GrantOperation_GenerateDataKeyPairWithoutPlaintext,
    GrantOperation_GenerateDataKeyWithoutPlaintext,
    GrantOperation_GetPublicKey,
    GrantOperation_ReEncryptFrom,
    GrantOperation_ReEncryptTo,
    GrantOperation_RetireGrant,
    GrantOperation_Sign,
    GrantOperation_Verify,
    KeyManagerType_AWS,
    KeyManagerType_CUSTOMER,
    KeySpec_ECC__NIST__P256,
    KeySpec_ECC__NIST__P384,
    KeySpec_ECC__NIST__P521,
    KeySpec_ECC__SECG__P256K1,
    KeySpec_RSA__2048,
    KeySpec_RSA__3072,
    KeySpec_RSA__4096,
    KeySpec_SYMMETRIC__DEFAULT,
    KeyState_Creating,
    KeyState_Disabled,
    KeyState_Enabled,
    KeyState_PendingDeletion,
    KeyState_PendingImport,
    KeyState_PendingReplicaDeletion,
    KeyState_Unavailable,
    KeyState_Updating,
    KeyUsageType_ENCRYPT__DECRYPT,
    KeyUsageType_SIGN__VERIFY,
    MessageType_DIGEST,
    MessageType_RAW,
    MultiRegionKeyType_PRIMARY,
    MultiRegionKeyType_REPLICA,
    OriginType_AWS__CLOUDHSM,
    OriginType_AWS__KMS,
    OriginType_EXTERNAL,
    SigningAlgorithmSpec_ECDSA__SHA__256,
    SigningAlgorithmSpec_ECDSA__SHA__384,
    SigningAlgorithmSpec_ECDSA__SHA__512,
    SigningAlgorithmSpec_RSASSA__PKCS1__V1__5__SHA__256,
    SigningAlgorithmSpec_RSASSA__PKCS1__V1__5__SHA__384,
    SigningAlgorithmSpec_RSASSA__PKCS1__V1__5__SHA__512,
    SigningAlgorithmSpec_RSASSA__PSS__SHA__256,
    SigningAlgorithmSpec_RSASSA__PSS__SHA__384,
    SigningAlgorithmSpec_RSASSA__PSS__SHA__512,
    WrappingKeySpec_RSA__2048,
)


def DafnyToAwsSdk_com_amazonaws_kms_AlreadyExistsException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CloudHsmClusterInUseException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CloudHsmClusterInvalidConfigurationException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CloudHsmClusterNotActiveException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CloudHsmClusterNotFoundException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CloudHsmClusterNotRelatedException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CustomKeyStoreHasCMKsException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CustomKeyStoreInvalidStateException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CustomKeyStoreNameInUseException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CustomKeyStoreNotFoundException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_DependencyTimeoutException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_DisabledException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ExpiredImportTokenException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_IncorrectKeyException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_IncorrectKeyMaterialException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_IncorrectTrustAnchorException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_InvalidAliasNameException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_InvalidArnException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_InvalidCiphertextException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_InvalidGrantIdException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_InvalidGrantTokenException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_InvalidImportTokenException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_InvalidKeyUsageException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_InvalidMarkerException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_KeyUnavailableException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_KMSInternalException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_KMSInvalidSignatureException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_KMSInvalidStateException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_LimitExceededException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_MalformedPolicyDocumentException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_NotFoundException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_TagException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_UnsupportedOperationException(input):
    output = {}
    if input.message.is_Some:
        output["message"] = input.message.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CancelKeyDeletionRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_CancelKeyDeletionResponse(input):
    output = {}
    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ConnectCustomKeyStoreRequest(input):
    output = {}
    output["CustomKeyStoreId"] = input.CustomKeyStoreId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_ConnectCustomKeyStoreResponse(input):
    output = {}
    return output


def DafnyToAwsSdk_com_amazonaws_kms_CreateAliasRequest(input):
    output = {}
    output["AliasName"] = input.AliasName.VerbatimString(False)
    output["TargetKeyId"] = input.TargetKeyId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_CreateCustomKeyStoreRequest(input):
    output = {}
    output["CustomKeyStoreName"] = input.CustomKeyStoreName.VerbatimString(False)
    output["CloudHsmClusterId"] = input.CloudHsmClusterId.VerbatimString(False)
    output["TrustAnchorCertificate"] = input.TrustAnchorCertificate.VerbatimString(
        False
    )
    output["KeyStorePassword"] = input.KeyStorePassword.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_CreateCustomKeyStoreResponse(input):
    output = {}
    if input.CustomKeyStoreId.is_Some:
        output["CustomKeyStoreId"] = input.CustomKeyStoreId.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GrantOperation(input):
    # Convert GrantOperation
    if isinstance(input, GrantOperation_Decrypt):
        return "Decrypt"

    elif isinstance(input, GrantOperation_Encrypt):
        return "Encrypt"

    elif isinstance(input, GrantOperation_GenerateDataKey):
        return "GenerateDataKey"

    elif isinstance(input, GrantOperation_GenerateDataKeyWithoutPlaintext):
        return "GenerateDataKeyWithoutPlaintext"

    elif isinstance(input, GrantOperation_ReEncryptFrom):
        return "ReEncryptFrom"

    elif isinstance(input, GrantOperation_ReEncryptTo):
        return "ReEncryptTo"

    elif isinstance(input, GrantOperation_Sign):
        return "Sign"

    elif isinstance(input, GrantOperation_Verify):
        return "Verify"

    elif isinstance(input, GrantOperation_GetPublicKey):
        return "GetPublicKey"

    elif isinstance(input, GrantOperation_CreateGrant):
        return "CreateGrant"

    elif isinstance(input, GrantOperation_RetireGrant):
        return "RetireGrant"

    elif isinstance(input, GrantOperation_DescribeKey):
        return "DescribeKey"

    elif isinstance(input, GrantOperation_GenerateDataKeyPair):
        return "GenerateDataKeyPair"

    elif isinstance(input, GrantOperation_GenerateDataKeyPairWithoutPlaintext):
        return "GenerateDataKeyPairWithoutPlaintext"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_GrantConstraints(input):
    output = {}
    if input.EncryptionContextSubset.is_Some:
        output["EncryptionContextSubset"] = {
            key.VerbatimString(False): value.VerbatimString(False)
            for (key, value) in input.EncryptionContextSubset.value.items
        }

    if input.EncryptionContextEquals.is_Some:
        output["EncryptionContextEquals"] = {
            key.VerbatimString(False): value.VerbatimString(False)
            for (key, value) in input.EncryptionContextEquals.value.items
        }

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CreateGrantRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["GranteePrincipal"] = input.GranteePrincipal.VerbatimString(False)
    if input.RetiringPrincipal.is_Some:
        output["RetiringPrincipal"] = input.RetiringPrincipal.value.VerbatimString(
            False
        )

    output["Operations"] = [
        com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GrantOperation(
            list_element
        )
        for list_element in input.Operations
    ]
    if input.Constraints.is_Some:
        output["Constraints"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GrantConstraints(
                input.Constraints.value
            )
        )

    if input.GrantTokens.is_Some:
        output["GrantTokens"] = [
            list_element.VerbatimString(False)
            for list_element in input.GrantTokens.value
        ]

    if input.Name.is_Some:
        output["Name"] = input.Name.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CreateGrantResponse(input):
    output = {}
    if input.GrantToken.is_Some:
        output["GrantToken"] = input.GrantToken.value.VerbatimString(False)

    if input.GrantId.is_Some:
        output["GrantId"] = input.GrantId.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_KeyUsageType(input):
    # Convert KeyUsageType
    if isinstance(input, KeyUsageType_SIGN__VERIFY):
        return "SIGN_VERIFY"

    elif isinstance(input, KeyUsageType_ENCRYPT__DECRYPT):
        return "ENCRYPT_DECRYPT"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_CustomerMasterKeySpec(input):
    # Convert CustomerMasterKeySpec
    if isinstance(input, CustomerMasterKeySpec_RSA__2048):
        return "RSA_2048"

    elif isinstance(input, CustomerMasterKeySpec_RSA__3072):
        return "RSA_3072"

    elif isinstance(input, CustomerMasterKeySpec_RSA__4096):
        return "RSA_4096"

    elif isinstance(input, CustomerMasterKeySpec_ECC__NIST__P256):
        return "ECC_NIST_P256"

    elif isinstance(input, CustomerMasterKeySpec_ECC__NIST__P384):
        return "ECC_NIST_P384"

    elif isinstance(input, CustomerMasterKeySpec_ECC__NIST__P521):
        return "ECC_NIST_P521"

    elif isinstance(input, CustomerMasterKeySpec_ECC__SECG__P256K1):
        return "ECC_SECG_P256K1"

    elif isinstance(input, CustomerMasterKeySpec_SYMMETRIC__DEFAULT):
        return "SYMMETRIC_DEFAULT"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_KeySpec(input):
    # Convert KeySpec
    if isinstance(input, KeySpec_RSA__2048):
        return "RSA_2048"

    elif isinstance(input, KeySpec_RSA__3072):
        return "RSA_3072"

    elif isinstance(input, KeySpec_RSA__4096):
        return "RSA_4096"

    elif isinstance(input, KeySpec_ECC__NIST__P256):
        return "ECC_NIST_P256"

    elif isinstance(input, KeySpec_ECC__NIST__P384):
        return "ECC_NIST_P384"

    elif isinstance(input, KeySpec_ECC__NIST__P521):
        return "ECC_NIST_P521"

    elif isinstance(input, KeySpec_ECC__SECG__P256K1):
        return "ECC_SECG_P256K1"

    elif isinstance(input, KeySpec_SYMMETRIC__DEFAULT):
        return "SYMMETRIC_DEFAULT"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_OriginType(input):
    # Convert OriginType
    if isinstance(input, OriginType_AWS__KMS):
        return "AWS_KMS"

    elif isinstance(input, OriginType_EXTERNAL):
        return "EXTERNAL"

    elif isinstance(input, OriginType_AWS__CLOUDHSM):
        return "AWS_CLOUDHSM"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_Tag(input):
    output = {}
    output["TagKey"] = input.TagKey.VerbatimString(False)
    output["TagValue"] = input.TagValue.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_CreateKeyRequest(input):
    output = {}
    if input.Policy.is_Some:
        output["Policy"] = input.Policy.value.VerbatimString(False)

    if input.Description.is_Some:
        output["Description"] = input.Description.value.VerbatimString(False)

    if input.KeyUsage.is_Some:
        output["KeyUsage"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_KeyUsageType(
                input.KeyUsage.value
            )
        )

    if input.CustomerMasterKeySpec.is_Some:
        output["CustomerMasterKeySpec"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CustomerMasterKeySpec(
                input.CustomerMasterKeySpec.value
            )
        )

    if input.KeySpec.is_Some:
        output["KeySpec"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_KeySpec(
                input.KeySpec.value
            )
        )

    if input.Origin.is_Some:
        output["Origin"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_OriginType(
                input.Origin.value
            )
        )

    if input.CustomKeyStoreId.is_Some:
        output["CustomKeyStoreId"] = input.CustomKeyStoreId.value.VerbatimString(False)

    if input.BypassPolicyLockoutSafetyCheck.is_Some:
        output["BypassPolicyLockoutSafetyCheck"] = (
            input.BypassPolicyLockoutSafetyCheck.value
        )

    if input.Tags.is_Some:
        output["Tags"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_Tag(
                list_element
            )
            for list_element in input.Tags.value
        ]

    if input.MultiRegion.is_Some:
        output["MultiRegion"] = input.MultiRegion.value

    return output


def DafnyToAwsSdk_com_amazonaws_kms_KeyMetadata(input):
    output = {}
    if input.AWSAccountId.is_Some:
        output["AWSAccountId"] = input.AWSAccountId.value.VerbatimString(False)

    output["KeyId"] = input.KeyId.VerbatimString(False)
    if input.Arn.is_Some:
        output["Arn"] = input.Arn.value.VerbatimString(False)

    if input.CreationDate.is_Some:
        output["CreationDate"] = TypeError("TimestampShape not supported")

    if input.Enabled.is_Some:
        output["Enabled"] = input.Enabled.value

    if input.Description.is_Some:
        output["Description"] = input.Description.value.VerbatimString(False)

    if input.KeyUsage.is_Some:
        output["KeyUsage"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_KeyUsageType(
                input.KeyUsage.value
            )
        )

    if input.KeyState.is_Some:
        output["KeyState"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_KeyState(
                input.KeyState.value
            )
        )

    if input.DeletionDate.is_Some:
        output["DeletionDate"] = TypeError("TimestampShape not supported")

    if input.ValidTo.is_Some:
        output["ValidTo"] = TypeError("TimestampShape not supported")

    if input.Origin.is_Some:
        output["Origin"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_OriginType(
                input.Origin.value
            )
        )

    if input.CustomKeyStoreId.is_Some:
        output["CustomKeyStoreId"] = input.CustomKeyStoreId.value.VerbatimString(False)

    if input.CloudHsmClusterId.is_Some:
        output["CloudHsmClusterId"] = input.CloudHsmClusterId.value.VerbatimString(
            False
        )

    if input.ExpirationModel.is_Some:
        output["ExpirationModel"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ExpirationModelType(
                input.ExpirationModel.value
            )
        )

    if input.KeyManager.is_Some:
        output["KeyManager"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_KeyManagerType(
                input.KeyManager.value
            )
        )

    if input.CustomerMasterKeySpec.is_Some:
        output["CustomerMasterKeySpec"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CustomerMasterKeySpec(
                input.CustomerMasterKeySpec.value
            )
        )

    if input.KeySpec.is_Some:
        output["KeySpec"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_KeySpec(
                input.KeySpec.value
            )
        )

    if input.EncryptionAlgorithms.is_Some:
        output["EncryptionAlgorithms"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EncryptionAlgorithmSpec(
                list_element
            )
            for list_element in input.EncryptionAlgorithms.value
        ]

    if input.SigningAlgorithms.is_Some:
        output["SigningAlgorithms"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_SigningAlgorithmSpec(
                list_element
            )
            for list_element in input.SigningAlgorithms.value
        ]

    if input.MultiRegion.is_Some:
        output["MultiRegion"] = input.MultiRegion.value

    if input.MultiRegionConfiguration.is_Some:
        output["MultiRegionConfiguration"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_MultiRegionConfiguration(
                input.MultiRegionConfiguration.value
            )
        )

    if input.PendingDeletionWindowInDays.is_Some:
        output["PendingDeletionWindowInDays"] = input.PendingDeletionWindowInDays.value

    return output


def DafnyToAwsSdk_com_amazonaws_kms_KeyState(input):
    # Convert KeyState
    if isinstance(input, KeyState_Creating):
        return "Creating"

    elif isinstance(input, KeyState_Enabled):
        return "Enabled"

    elif isinstance(input, KeyState_Disabled):
        return "Disabled"

    elif isinstance(input, KeyState_PendingDeletion):
        return "PendingDeletion"

    elif isinstance(input, KeyState_PendingImport):
        return "PendingImport"

    elif isinstance(input, KeyState_PendingReplicaDeletion):
        return "PendingReplicaDeletion"

    elif isinstance(input, KeyState_Unavailable):
        return "Unavailable"

    elif isinstance(input, KeyState_Updating):
        return "Updating"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_ExpirationModelType(input):
    # Convert ExpirationModelType
    if isinstance(input, ExpirationModelType_KEY__MATERIAL__EXPIRES):
        return "KEY_MATERIAL_EXPIRES"

    elif isinstance(input, ExpirationModelType_KEY__MATERIAL__DOES__NOT__EXPIRE):
        return "KEY_MATERIAL_DOES_NOT_EXPIRE"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_KeyManagerType(input):
    # Convert KeyManagerType
    if isinstance(input, KeyManagerType_AWS):
        return "AWS"

    elif isinstance(input, KeyManagerType_CUSTOMER):
        return "CUSTOMER"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_EncryptionAlgorithmSpec(input):
    # Convert EncryptionAlgorithmSpec
    if isinstance(input, EncryptionAlgorithmSpec_SYMMETRIC__DEFAULT):
        return "SYMMETRIC_DEFAULT"

    elif isinstance(input, EncryptionAlgorithmSpec_RSAES__OAEP__SHA__1):
        return "RSAES_OAEP_SHA_1"

    elif isinstance(input, EncryptionAlgorithmSpec_RSAES__OAEP__SHA__256):
        return "RSAES_OAEP_SHA_256"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_SigningAlgorithmSpec(input):
    # Convert SigningAlgorithmSpec
    if isinstance(input, SigningAlgorithmSpec_RSASSA__PSS__SHA__256):
        return "RSASSA_PSS_SHA_256"

    elif isinstance(input, SigningAlgorithmSpec_RSASSA__PSS__SHA__384):
        return "RSASSA_PSS_SHA_384"

    elif isinstance(input, SigningAlgorithmSpec_RSASSA__PSS__SHA__512):
        return "RSASSA_PSS_SHA_512"

    elif isinstance(input, SigningAlgorithmSpec_RSASSA__PKCS1__V1__5__SHA__256):
        return "RSASSA_PKCS1_V1_5_SHA_256"

    elif isinstance(input, SigningAlgorithmSpec_RSASSA__PKCS1__V1__5__SHA__384):
        return "RSASSA_PKCS1_V1_5_SHA_384"

    elif isinstance(input, SigningAlgorithmSpec_RSASSA__PKCS1__V1__5__SHA__512):
        return "RSASSA_PKCS1_V1_5_SHA_512"

    elif isinstance(input, SigningAlgorithmSpec_ECDSA__SHA__256):
        return "ECDSA_SHA_256"

    elif isinstance(input, SigningAlgorithmSpec_ECDSA__SHA__384):
        return "ECDSA_SHA_384"

    elif isinstance(input, SigningAlgorithmSpec_ECDSA__SHA__512):
        return "ECDSA_SHA_512"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_MultiRegionConfiguration(input):
    output = {}
    if input.MultiRegionKeyType.is_Some:
        output["MultiRegionKeyType"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_MultiRegionKeyType(
                input.MultiRegionKeyType.value
            )
        )

    if input.PrimaryKey.is_Some:
        output["PrimaryKey"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_MultiRegionKey(
                input.PrimaryKey.value
            )
        )

    if input.ReplicaKeys.is_Some:
        output["ReplicaKeys"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_MultiRegionKey(
                list_element
            )
            for list_element in input.ReplicaKeys.value
        ]

    return output


def DafnyToAwsSdk_com_amazonaws_kms_MultiRegionKeyType(input):
    # Convert MultiRegionKeyType
    if isinstance(input, MultiRegionKeyType_PRIMARY):
        return "PRIMARY"

    elif isinstance(input, MultiRegionKeyType_REPLICA):
        return "REPLICA"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_MultiRegionKey(input):
    output = {}
    if input.Arn.is_Some:
        output["Arn"] = input.Arn.value.VerbatimString(False)

    if input.Region.is_Some:
        output["Region"] = input.Region.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CreateKeyResponse(input):
    output = {}
    if input.KeyMetadata.is_Some:
        output["KeyMetadata"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_KeyMetadata(
                input.KeyMetadata.value
            )
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_DecryptRequest(input):
    output = {}
    output["CiphertextBlob"] = bytes(input.CiphertextBlob)
    if input.EncryptionContext.is_Some:
        output["EncryptionContext"] = {
            key.VerbatimString(False): value.VerbatimString(False)
            for (key, value) in input.EncryptionContext.value.items
        }

    if input.GrantTokens.is_Some:
        output["GrantTokens"] = [
            list_element.VerbatimString(False)
            for list_element in input.GrantTokens.value
        ]

    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.EncryptionAlgorithm.is_Some:
        output["EncryptionAlgorithm"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EncryptionAlgorithmSpec(
                input.EncryptionAlgorithm.value
            )
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_DecryptResponse(input):
    output = {}
    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.Plaintext.is_Some:
        output["Plaintext"] = bytes(input.Plaintext.value)

    if input.EncryptionAlgorithm.is_Some:
        output["EncryptionAlgorithm"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EncryptionAlgorithmSpec(
                input.EncryptionAlgorithm.value
            )
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_DeleteAliasRequest(input):
    output = {}
    output["AliasName"] = input.AliasName.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_DeleteCustomKeyStoreRequest(input):
    output = {}
    output["CustomKeyStoreId"] = input.CustomKeyStoreId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_DeleteCustomKeyStoreResponse(input):
    output = {}
    return output


def DafnyToAwsSdk_com_amazonaws_kms_DeleteImportedKeyMaterialRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_DescribeCustomKeyStoresRequest(input):
    output = {}
    if input.CustomKeyStoreId.is_Some:
        output["CustomKeyStoreId"] = input.CustomKeyStoreId.value.VerbatimString(False)

    if input.CustomKeyStoreName.is_Some:
        output["CustomKeyStoreName"] = input.CustomKeyStoreName.value.VerbatimString(
            False
        )

    if input.Limit.is_Some:
        output["Limit"] = input.Limit.value

    if input.Marker.is_Some:
        output["Marker"] = input.Marker.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_CustomKeyStoresListEntry(input):
    output = {}
    if input.CustomKeyStoreId.is_Some:
        output["CustomKeyStoreId"] = input.CustomKeyStoreId.value.VerbatimString(False)

    if input.CustomKeyStoreName.is_Some:
        output["CustomKeyStoreName"] = input.CustomKeyStoreName.value.VerbatimString(
            False
        )

    if input.CloudHsmClusterId.is_Some:
        output["CloudHsmClusterId"] = input.CloudHsmClusterId.value.VerbatimString(
            False
        )

    if input.TrustAnchorCertificate.is_Some:
        output["TrustAnchorCertificate"] = (
            input.TrustAnchorCertificate.value.VerbatimString(False)
        )

    if input.ConnectionState.is_Some:
        output["ConnectionState"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ConnectionStateType(
                input.ConnectionState.value
            )
        )

    if input.ConnectionErrorCode.is_Some:
        output["ConnectionErrorCode"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ConnectionErrorCodeType(
                input.ConnectionErrorCode.value
            )
        )

    if input.CreationDate.is_Some:
        output["CreationDate"] = TypeError("TimestampShape not supported")

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ConnectionStateType(input):
    # Convert ConnectionStateType
    if isinstance(input, ConnectionStateType_CONNECTED):
        return "CONNECTED"

    elif isinstance(input, ConnectionStateType_CONNECTING):
        return "CONNECTING"

    elif isinstance(input, ConnectionStateType_FAILED):
        return "FAILED"

    elif isinstance(input, ConnectionStateType_DISCONNECTED):
        return "DISCONNECTED"

    elif isinstance(input, ConnectionStateType_DISCONNECTING):
        return "DISCONNECTING"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_ConnectionErrorCodeType(input):
    # Convert ConnectionErrorCodeType
    if isinstance(input, ConnectionErrorCodeType_INVALID__CREDENTIALS):
        return "INVALID_CREDENTIALS"

    elif isinstance(input, ConnectionErrorCodeType_CLUSTER__NOT__FOUND):
        return "CLUSTER_NOT_FOUND"

    elif isinstance(input, ConnectionErrorCodeType_NETWORK__ERRORS):
        return "NETWORK_ERRORS"

    elif isinstance(input, ConnectionErrorCodeType_INTERNAL__ERROR):
        return "INTERNAL_ERROR"

    elif isinstance(input, ConnectionErrorCodeType_INSUFFICIENT__CLOUDHSM__HSMS):
        return "INSUFFICIENT_CLOUDHSM_HSMS"

    elif isinstance(input, ConnectionErrorCodeType_USER__LOCKED__OUT):
        return "USER_LOCKED_OUT"

    elif isinstance(input, ConnectionErrorCodeType_USER__NOT__FOUND):
        return "USER_NOT_FOUND"

    elif isinstance(input, ConnectionErrorCodeType_USER__LOGGED__IN):
        return "USER_LOGGED_IN"

    elif isinstance(input, ConnectionErrorCodeType_SUBNET__NOT__FOUND):
        return "SUBNET_NOT_FOUND"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_DescribeCustomKeyStoresResponse(input):
    output = {}
    if input.CustomKeyStores.is_Some:
        output["CustomKeyStores"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CustomKeyStoresListEntry(
                list_element
            )
            for list_element in input.CustomKeyStores.value
        ]

    if input.NextMarker.is_Some:
        output["NextMarker"] = input.NextMarker.value.VerbatimString(False)

    if input.Truncated.is_Some:
        output["Truncated"] = input.Truncated.value

    return output


def DafnyToAwsSdk_com_amazonaws_kms_DescribeKeyRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    if input.GrantTokens.is_Some:
        output["GrantTokens"] = [
            list_element.VerbatimString(False)
            for list_element in input.GrantTokens.value
        ]

    return output


def DafnyToAwsSdk_com_amazonaws_kms_DescribeKeyResponse(input):
    output = {}
    if input.KeyMetadata.is_Some:
        output["KeyMetadata"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_KeyMetadata(
                input.KeyMetadata.value
            )
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_DisableKeyRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_DisableKeyRotationRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_DisconnectCustomKeyStoreRequest(input):
    output = {}
    output["CustomKeyStoreId"] = input.CustomKeyStoreId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_DisconnectCustomKeyStoreResponse(input):
    output = {}
    return output


def DafnyToAwsSdk_com_amazonaws_kms_EnableKeyRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_EnableKeyRotationRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_EncryptRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["Plaintext"] = bytes(input.Plaintext)
    if input.EncryptionContext.is_Some:
        output["EncryptionContext"] = {
            key.VerbatimString(False): value.VerbatimString(False)
            for (key, value) in input.EncryptionContext.value.items
        }

    if input.GrantTokens.is_Some:
        output["GrantTokens"] = [
            list_element.VerbatimString(False)
            for list_element in input.GrantTokens.value
        ]

    if input.EncryptionAlgorithm.is_Some:
        output["EncryptionAlgorithm"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EncryptionAlgorithmSpec(
                input.EncryptionAlgorithm.value
            )
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_EncryptResponse(input):
    output = {}
    if input.CiphertextBlob.is_Some:
        output["CiphertextBlob"] = bytes(input.CiphertextBlob.value)

    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.EncryptionAlgorithm.is_Some:
        output["EncryptionAlgorithm"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EncryptionAlgorithmSpec(
                input.EncryptionAlgorithm.value
            )
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_DataKeySpec(input):
    # Convert DataKeySpec
    if isinstance(input, DataKeySpec_AES__256):
        return "AES_256"

    elif isinstance(input, DataKeySpec_AES__128):
        return "AES_128"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    if input.EncryptionContext.is_Some:
        output["EncryptionContext"] = {
            key.VerbatimString(False): value.VerbatimString(False)
            for (key, value) in input.EncryptionContext.value.items
        }

    if input.NumberOfBytes.is_Some:
        output["NumberOfBytes"] = input.NumberOfBytes.value

    if input.KeySpec.is_Some:
        output["KeySpec"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DataKeySpec(
                input.KeySpec.value
            )
        )

    if input.GrantTokens.is_Some:
        output["GrantTokens"] = [
            list_element.VerbatimString(False)
            for list_element in input.GrantTokens.value
        ]

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyResponse(input):
    output = {}
    if input.CiphertextBlob.is_Some:
        output["CiphertextBlob"] = bytes(input.CiphertextBlob.value)

    if input.Plaintext.is_Some:
        output["Plaintext"] = bytes(input.Plaintext.value)

    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_DataKeyPairSpec(input):
    # Convert DataKeyPairSpec
    if isinstance(input, DataKeyPairSpec_RSA__2048):
        return "RSA_2048"

    elif isinstance(input, DataKeyPairSpec_RSA__3072):
        return "RSA_3072"

    elif isinstance(input, DataKeyPairSpec_RSA__4096):
        return "RSA_4096"

    elif isinstance(input, DataKeyPairSpec_ECC__NIST__P256):
        return "ECC_NIST_P256"

    elif isinstance(input, DataKeyPairSpec_ECC__NIST__P384):
        return "ECC_NIST_P384"

    elif isinstance(input, DataKeyPairSpec_ECC__NIST__P521):
        return "ECC_NIST_P521"

    elif isinstance(input, DataKeyPairSpec_ECC__SECG__P256K1):
        return "ECC_SECG_P256K1"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyPairRequest(input):
    output = {}
    if input.EncryptionContext.is_Some:
        output["EncryptionContext"] = {
            key.VerbatimString(False): value.VerbatimString(False)
            for (key, value) in input.EncryptionContext.value.items
        }

    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["KeyPairSpec"] = (
        com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DataKeyPairSpec(
            input.KeyPairSpec
        )
    )
    if input.GrantTokens.is_Some:
        output["GrantTokens"] = [
            list_element.VerbatimString(False)
            for list_element in input.GrantTokens.value
        ]

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyPairResponse(input):
    output = {}
    if input.PrivateKeyCiphertextBlob.is_Some:
        output["PrivateKeyCiphertextBlob"] = bytes(input.PrivateKeyCiphertextBlob.value)

    if input.PrivateKeyPlaintext.is_Some:
        output["PrivateKeyPlaintext"] = bytes(input.PrivateKeyPlaintext.value)

    if input.PublicKey.is_Some:
        output["PublicKey"] = bytes(input.PublicKey.value)

    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.KeyPairSpec.is_Some:
        output["KeyPairSpec"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DataKeyPairSpec(
                input.KeyPairSpec.value
            )
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyPairWithoutPlaintextRequest(input):
    output = {}
    if input.EncryptionContext.is_Some:
        output["EncryptionContext"] = {
            key.VerbatimString(False): value.VerbatimString(False)
            for (key, value) in input.EncryptionContext.value.items
        }

    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["KeyPairSpec"] = (
        com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DataKeyPairSpec(
            input.KeyPairSpec
        )
    )
    if input.GrantTokens.is_Some:
        output["GrantTokens"] = [
            list_element.VerbatimString(False)
            for list_element in input.GrantTokens.value
        ]

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyPairWithoutPlaintextResponse(input):
    output = {}
    if input.PrivateKeyCiphertextBlob.is_Some:
        output["PrivateKeyCiphertextBlob"] = bytes(input.PrivateKeyCiphertextBlob.value)

    if input.PublicKey.is_Some:
        output["PublicKey"] = bytes(input.PublicKey.value)

    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.KeyPairSpec.is_Some:
        output["KeyPairSpec"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DataKeyPairSpec(
                input.KeyPairSpec.value
            )
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyWithoutPlaintextRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    if input.EncryptionContext.is_Some:
        output["EncryptionContext"] = {
            key.VerbatimString(False): value.VerbatimString(False)
            for (key, value) in input.EncryptionContext.value.items
        }

    if input.KeySpec.is_Some:
        output["KeySpec"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_DataKeySpec(
                input.KeySpec.value
            )
        )

    if input.NumberOfBytes.is_Some:
        output["NumberOfBytes"] = input.NumberOfBytes.value

    if input.GrantTokens.is_Some:
        output["GrantTokens"] = [
            list_element.VerbatimString(False)
            for list_element in input.GrantTokens.value
        ]

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GenerateDataKeyWithoutPlaintextResponse(input):
    output = {}
    if input.CiphertextBlob.is_Some:
        output["CiphertextBlob"] = bytes(input.CiphertextBlob.value)

    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GenerateRandomRequest(input):
    output = {}
    if input.NumberOfBytes.is_Some:
        output["NumberOfBytes"] = input.NumberOfBytes.value

    if input.CustomKeyStoreId.is_Some:
        output["CustomKeyStoreId"] = input.CustomKeyStoreId.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GenerateRandomResponse(input):
    output = {}
    if input.Plaintext.is_Some:
        output["Plaintext"] = bytes(input.Plaintext.value)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GetKeyPolicyRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["PolicyName"] = input.PolicyName.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_GetKeyPolicyResponse(input):
    output = {}
    if input.Policy.is_Some:
        output["Policy"] = input.Policy.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GetKeyRotationStatusRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_GetKeyRotationStatusResponse(input):
    output = {}
    if input.KeyRotationEnabled.is_Some:
        output["KeyRotationEnabled"] = input.KeyRotationEnabled.value

    return output


def DafnyToAwsSdk_com_amazonaws_kms_AlgorithmSpec(input):
    # Convert AlgorithmSpec
    if isinstance(input, AlgorithmSpec_RSAES__PKCS1__V1__5):
        return "RSAES_PKCS1_V1_5"

    elif isinstance(input, AlgorithmSpec_RSAES__OAEP__SHA__1):
        return "RSAES_OAEP_SHA_1"

    elif isinstance(input, AlgorithmSpec_RSAES__OAEP__SHA__256):
        return "RSAES_OAEP_SHA_256"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_WrappingKeySpec(input):
    # Convert WrappingKeySpec
    if isinstance(input, WrappingKeySpec_RSA__2048):
        return "RSA_2048"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_GetParametersForImportRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["WrappingAlgorithm"] = (
        com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_AlgorithmSpec(
            input.WrappingAlgorithm
        )
    )
    output["WrappingKeySpec"] = (
        com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_WrappingKeySpec(
            input.WrappingKeySpec
        )
    )
    return output


def DafnyToAwsSdk_com_amazonaws_kms_GetParametersForImportResponse(input):
    output = {}
    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.ImportToken.is_Some:
        output["ImportToken"] = bytes(input.ImportToken.value)

    if input.PublicKey.is_Some:
        output["PublicKey"] = bytes(input.PublicKey.value)

    if input.ParametersValidTo.is_Some:
        output["ParametersValidTo"] = TypeError("TimestampShape not supported")

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GetPublicKeyRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    if input.GrantTokens.is_Some:
        output["GrantTokens"] = [
            list_element.VerbatimString(False)
            for list_element in input.GrantTokens.value
        ]

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GetPublicKeyResponse(input):
    output = {}
    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.PublicKey.is_Some:
        output["PublicKey"] = bytes(input.PublicKey.value)

    if input.CustomerMasterKeySpec.is_Some:
        output["CustomerMasterKeySpec"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_CustomerMasterKeySpec(
                input.CustomerMasterKeySpec.value
            )
        )

    if input.KeySpec.is_Some:
        output["KeySpec"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_KeySpec(
                input.KeySpec.value
            )
        )

    if input.KeyUsage.is_Some:
        output["KeyUsage"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_KeyUsageType(
                input.KeyUsage.value
            )
        )

    if input.EncryptionAlgorithms.is_Some:
        output["EncryptionAlgorithms"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EncryptionAlgorithmSpec(
                list_element
            )
            for list_element in input.EncryptionAlgorithms.value
        ]

    if input.SigningAlgorithms.is_Some:
        output["SigningAlgorithms"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_SigningAlgorithmSpec(
                list_element
            )
            for list_element in input.SigningAlgorithms.value
        ]

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ImportKeyMaterialRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["ImportToken"] = bytes(input.ImportToken)
    output["EncryptedKeyMaterial"] = bytes(input.EncryptedKeyMaterial)
    if input.ValidTo.is_Some:
        output["ValidTo"] = TypeError("TimestampShape not supported")

    if input.ExpirationModel.is_Some:
        output["ExpirationModel"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_ExpirationModelType(
                input.ExpirationModel.value
            )
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ImportKeyMaterialResponse(input):
    output = {}
    return output


def DafnyToAwsSdk_com_amazonaws_kms_ListAliasesRequest(input):
    output = {}
    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.Limit.is_Some:
        output["Limit"] = input.Limit.value

    if input.Marker.is_Some:
        output["Marker"] = input.Marker.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_AliasListEntry(input):
    output = {}
    if input.AliasName.is_Some:
        output["AliasName"] = input.AliasName.value.VerbatimString(False)

    if input.AliasArn.is_Some:
        output["AliasArn"] = input.AliasArn.value.VerbatimString(False)

    if input.TargetKeyId.is_Some:
        output["TargetKeyId"] = input.TargetKeyId.value.VerbatimString(False)

    if input.CreationDate.is_Some:
        output["CreationDate"] = TypeError("TimestampShape not supported")

    if input.LastUpdatedDate.is_Some:
        output["LastUpdatedDate"] = TypeError("TimestampShape not supported")

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ListAliasesResponse(input):
    output = {}
    if input.Aliases.is_Some:
        output["Aliases"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_AliasListEntry(
                list_element
            )
            for list_element in input.Aliases.value
        ]

    if input.NextMarker.is_Some:
        output["NextMarker"] = input.NextMarker.value.VerbatimString(False)

    if input.Truncated.is_Some:
        output["Truncated"] = input.Truncated.value

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ListGrantsRequest(input):
    output = {}
    if input.Limit.is_Some:
        output["Limit"] = input.Limit.value

    if input.Marker.is_Some:
        output["Marker"] = input.Marker.value.VerbatimString(False)

    output["KeyId"] = input.KeyId.VerbatimString(False)
    if input.GrantId.is_Some:
        output["GrantId"] = input.GrantId.value.VerbatimString(False)

    if input.GranteePrincipal.is_Some:
        output["GranteePrincipal"] = input.GranteePrincipal.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_GrantListEntry(input):
    output = {}
    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.GrantId.is_Some:
        output["GrantId"] = input.GrantId.value.VerbatimString(False)

    if input.Name.is_Some:
        output["Name"] = input.Name.value.VerbatimString(False)

    if input.CreationDate.is_Some:
        output["CreationDate"] = TypeError("TimestampShape not supported")

    if input.GranteePrincipal.is_Some:
        output["GranteePrincipal"] = input.GranteePrincipal.value.VerbatimString(False)

    if input.RetiringPrincipal.is_Some:
        output["RetiringPrincipal"] = input.RetiringPrincipal.value.VerbatimString(
            False
        )

    if input.IssuingAccount.is_Some:
        output["IssuingAccount"] = input.IssuingAccount.value.VerbatimString(False)

    if input.Operations.is_Some:
        output["Operations"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GrantOperation(
                list_element
            )
            for list_element in input.Operations.value
        ]

    if input.Constraints.is_Some:
        output["Constraints"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GrantConstraints(
                input.Constraints.value
            )
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ListGrantsResponse(input):
    output = {}
    if input.Grants.is_Some:
        output["Grants"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_GrantListEntry(
                list_element
            )
            for list_element in input.Grants.value
        ]

    if input.NextMarker.is_Some:
        output["NextMarker"] = input.NextMarker.value.VerbatimString(False)

    if input.Truncated.is_Some:
        output["Truncated"] = input.Truncated.value

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ListKeyPoliciesRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    if input.Limit.is_Some:
        output["Limit"] = input.Limit.value

    if input.Marker.is_Some:
        output["Marker"] = input.Marker.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ListKeyPoliciesResponse(input):
    output = {}
    if input.PolicyNames.is_Some:
        output["PolicyNames"] = [
            list_element.VerbatimString(False)
            for list_element in input.PolicyNames.value
        ]

    if input.NextMarker.is_Some:
        output["NextMarker"] = input.NextMarker.value.VerbatimString(False)

    if input.Truncated.is_Some:
        output["Truncated"] = input.Truncated.value

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ListResourceTagsRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    if input.Limit.is_Some:
        output["Limit"] = input.Limit.value

    if input.Marker.is_Some:
        output["Marker"] = input.Marker.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ListResourceTagsResponse(input):
    output = {}
    if input.Tags.is_Some:
        output["Tags"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_Tag(
                list_element
            )
            for list_element in input.Tags.value
        ]

    if input.NextMarker.is_Some:
        output["NextMarker"] = input.NextMarker.value.VerbatimString(False)

    if input.Truncated.is_Some:
        output["Truncated"] = input.Truncated.value

    return output


def DafnyToAwsSdk_com_amazonaws_kms_PutKeyPolicyRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["PolicyName"] = input.PolicyName.VerbatimString(False)
    output["Policy"] = input.Policy.VerbatimString(False)
    if input.BypassPolicyLockoutSafetyCheck.is_Some:
        output["BypassPolicyLockoutSafetyCheck"] = (
            input.BypassPolicyLockoutSafetyCheck.value
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ReEncryptRequest(input):
    output = {}
    output["CiphertextBlob"] = bytes(input.CiphertextBlob)
    if input.SourceEncryptionContext.is_Some:
        output["SourceEncryptionContext"] = {
            key.VerbatimString(False): value.VerbatimString(False)
            for (key, value) in input.SourceEncryptionContext.value.items
        }

    if input.SourceKeyId.is_Some:
        output["SourceKeyId"] = input.SourceKeyId.value.VerbatimString(False)

    output["DestinationKeyId"] = input.DestinationKeyId.VerbatimString(False)
    if input.DestinationEncryptionContext.is_Some:
        output["DestinationEncryptionContext"] = {
            key.VerbatimString(False): value.VerbatimString(False)
            for (key, value) in input.DestinationEncryptionContext.value.items
        }

    if input.SourceEncryptionAlgorithm.is_Some:
        output["SourceEncryptionAlgorithm"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EncryptionAlgorithmSpec(
                input.SourceEncryptionAlgorithm.value
            )
        )

    if input.DestinationEncryptionAlgorithm.is_Some:
        output["DestinationEncryptionAlgorithm"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EncryptionAlgorithmSpec(
                input.DestinationEncryptionAlgorithm.value
            )
        )

    if input.GrantTokens.is_Some:
        output["GrantTokens"] = [
            list_element.VerbatimString(False)
            for list_element in input.GrantTokens.value
        ]

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ReEncryptResponse(input):
    output = {}
    if input.CiphertextBlob.is_Some:
        output["CiphertextBlob"] = bytes(input.CiphertextBlob.value)

    if input.SourceKeyId.is_Some:
        output["SourceKeyId"] = input.SourceKeyId.value.VerbatimString(False)

    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.SourceEncryptionAlgorithm.is_Some:
        output["SourceEncryptionAlgorithm"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EncryptionAlgorithmSpec(
                input.SourceEncryptionAlgorithm.value
            )
        )

    if input.DestinationEncryptionAlgorithm.is_Some:
        output["DestinationEncryptionAlgorithm"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_EncryptionAlgorithmSpec(
                input.DestinationEncryptionAlgorithm.value
            )
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ReplicateKeyRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["ReplicaRegion"] = input.ReplicaRegion.VerbatimString(False)
    if input.Policy.is_Some:
        output["Policy"] = input.Policy.value.VerbatimString(False)

    if input.BypassPolicyLockoutSafetyCheck.is_Some:
        output["BypassPolicyLockoutSafetyCheck"] = (
            input.BypassPolicyLockoutSafetyCheck.value
        )

    if input.Description.is_Some:
        output["Description"] = input.Description.value.VerbatimString(False)

    if input.Tags.is_Some:
        output["Tags"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_Tag(
                list_element
            )
            for list_element in input.Tags.value
        ]

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ReplicateKeyResponse(input):
    output = {}
    if input.ReplicaKeyMetadata.is_Some:
        output["ReplicaKeyMetadata"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_KeyMetadata(
                input.ReplicaKeyMetadata.value
            )
        )

    if input.ReplicaPolicy.is_Some:
        output["ReplicaPolicy"] = input.ReplicaPolicy.value.VerbatimString(False)

    if input.ReplicaTags.is_Some:
        output["ReplicaTags"] = [
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_Tag(
                list_element
            )
            for list_element in input.ReplicaTags.value
        ]

    return output


def DafnyToAwsSdk_com_amazonaws_kms_RetireGrantRequest(input):
    output = {}
    if input.GrantToken.is_Some:
        output["GrantToken"] = input.GrantToken.value.VerbatimString(False)

    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.GrantId.is_Some:
        output["GrantId"] = input.GrantId.value.VerbatimString(False)

    return output


def DafnyToAwsSdk_com_amazonaws_kms_RevokeGrantRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["GrantId"] = input.GrantId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_ScheduleKeyDeletionRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    if input.PendingWindowInDays.is_Some:
        output["PendingWindowInDays"] = input.PendingWindowInDays.value

    return output


def DafnyToAwsSdk_com_amazonaws_kms_ScheduleKeyDeletionResponse(input):
    output = {}
    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.DeletionDate.is_Some:
        output["DeletionDate"] = TypeError("TimestampShape not supported")

    if input.KeyState.is_Some:
        output["KeyState"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_KeyState(
                input.KeyState.value
            )
        )

    if input.PendingWindowInDays.is_Some:
        output["PendingWindowInDays"] = input.PendingWindowInDays.value

    return output


def DafnyToAwsSdk_com_amazonaws_kms_MessageType(input):
    # Convert MessageType
    if isinstance(input, MessageType_RAW):
        return "RAW"

    elif isinstance(input, MessageType_DIGEST):
        return "DIGEST"

    else:
        raise ValueError("No recognized enum value in enum type: " + input)


def DafnyToAwsSdk_com_amazonaws_kms_SignRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["Message"] = bytes(input.Message)
    if input.MessageType.is_Some:
        output["MessageType"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_MessageType(
                input.MessageType.value
            )
        )

    if input.GrantTokens.is_Some:
        output["GrantTokens"] = [
            list_element.VerbatimString(False)
            for list_element in input.GrantTokens.value
        ]

    output["SigningAlgorithm"] = (
        com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_SigningAlgorithmSpec(
            input.SigningAlgorithm
        )
    )
    return output


def DafnyToAwsSdk_com_amazonaws_kms_SignResponse(input):
    output = {}
    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.Signature.is_Some:
        output["Signature"] = bytes(input.Signature.value)

    if input.SigningAlgorithm.is_Some:
        output["SigningAlgorithm"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_SigningAlgorithmSpec(
                input.SigningAlgorithm.value
            )
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_TagResourceRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["Tags"] = [
        com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_Tag(
            list_element
        )
        for list_element in input.Tags
    ]
    return output


def DafnyToAwsSdk_com_amazonaws_kms_UntagResourceRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["TagKeys"] = [
        list_element.VerbatimString(False) for list_element in input.TagKeys
    ]
    return output


def DafnyToAwsSdk_com_amazonaws_kms_UpdateAliasRequest(input):
    output = {}
    output["AliasName"] = input.AliasName.VerbatimString(False)
    output["TargetKeyId"] = input.TargetKeyId.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_UpdateCustomKeyStoreRequest(input):
    output = {}
    output["CustomKeyStoreId"] = input.CustomKeyStoreId.VerbatimString(False)
    if input.NewCustomKeyStoreName.is_Some:
        output["NewCustomKeyStoreName"] = (
            input.NewCustomKeyStoreName.value.VerbatimString(False)
        )

    if input.KeyStorePassword.is_Some:
        output["KeyStorePassword"] = input.KeyStorePassword.value.VerbatimString(False)

    if input.CloudHsmClusterId.is_Some:
        output["CloudHsmClusterId"] = input.CloudHsmClusterId.value.VerbatimString(
            False
        )

    return output


def DafnyToAwsSdk_com_amazonaws_kms_UpdateCustomKeyStoreResponse(input):
    output = {}
    return output


def DafnyToAwsSdk_com_amazonaws_kms_UpdateKeyDescriptionRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["Description"] = input.Description.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_UpdatePrimaryRegionRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["PrimaryRegion"] = input.PrimaryRegion.VerbatimString(False)
    return output


def DafnyToAwsSdk_com_amazonaws_kms_VerifyRequest(input):
    output = {}
    output["KeyId"] = input.KeyId.VerbatimString(False)
    output["Message"] = bytes(input.Message)
    if input.MessageType.is_Some:
        output["MessageType"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_MessageType(
                input.MessageType.value
            )
        )

    output["Signature"] = bytes(input.Signature)
    output["SigningAlgorithm"] = (
        com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_SigningAlgorithmSpec(
            input.SigningAlgorithm
        )
    )
    if input.GrantTokens.is_Some:
        output["GrantTokens"] = [
            list_element.VerbatimString(False)
            for list_element in input.GrantTokens.value
        ]

    return output


def DafnyToAwsSdk_com_amazonaws_kms_VerifyResponse(input):
    output = {}
    if input.KeyId.is_Some:
        output["KeyId"] = input.KeyId.value.VerbatimString(False)

    if input.SignatureValid.is_Some:
        output["SignatureValid"] = input.SignatureValid.value

    if input.SigningAlgorithm.is_Some:
        output["SigningAlgorithm"] = (
            com_amazonaws_kms.smithygenerated.com_amazonaws_kms.dafny_to_aws_sdk.DafnyToAwsSdk_com_amazonaws_kms_SigningAlgorithmSpec(
                input.SigningAlgorithm.value
            )
        )

    return output
