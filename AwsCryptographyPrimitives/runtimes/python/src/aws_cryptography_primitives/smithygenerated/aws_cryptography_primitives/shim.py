# Code generated by smithy-python-codegen DO NOT EDIT.

import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy
import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.errors
import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models
import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny
import module_
import software_amazon_cryptography_primitives_internaldafny_types
from software_amazon_cryptography_primitives_internaldafny_types import (
    AESDecryptInput_AESDecryptInput as DafnyAESDecryptInput,
    AESEncryptInput_AESEncryptInput as DafnyAESEncryptInput,
    AESEncryptOutput_AESEncryptOutput as DafnyAESEncryptOutput,
    AesKdfCtrInput_AesKdfCtrInput as DafnyAesKdfCtrInput,
    DigestInput_DigestInput as DafnyDigestInput,
    ECDSASignInput_ECDSASignInput as DafnyECDSASignInput,
    ECDSAVerifyInput_ECDSAVerifyInput as DafnyECDSAVerifyInput,
    GenerateECDSASignatureKeyInput_GenerateECDSASignatureKeyInput as DafnyGenerateECDSASignatureKeyInput,
    GenerateECDSASignatureKeyOutput_GenerateECDSASignatureKeyOutput as DafnyGenerateECDSASignatureKeyOutput,
    GenerateRSAKeyPairInput_GenerateRSAKeyPairInput as DafnyGenerateRSAKeyPairInput,
    GenerateRSAKeyPairOutput_GenerateRSAKeyPairOutput as DafnyGenerateRSAKeyPairOutput,
    GenerateRandomBytesInput_GenerateRandomBytesInput as DafnyGenerateRandomBytesInput,
    GetRSAKeyModulusLengthInput_GetRSAKeyModulusLengthInput as DafnyGetRSAKeyModulusLengthInput,
    GetRSAKeyModulusLengthOutput_GetRSAKeyModulusLengthOutput as DafnyGetRSAKeyModulusLengthOutput,
    HMacInput_HMacInput as DafnyHMacInput,
    HkdfExpandInput_HkdfExpandInput as DafnyHkdfExpandInput,
    HkdfExtractInput_HkdfExtractInput as DafnyHkdfExtractInput,
    HkdfInput_HkdfInput as DafnyHkdfInput,
    KdfCtrInput_KdfCtrInput as DafnyKdfCtrInput,
    RSADecryptInput_RSADecryptInput as DafnyRSADecryptInput,
    RSAEncryptInput_RSAEncryptInput as DafnyRSAEncryptInput,
)
from typing import Any

from .errors import CollectionOfErrors, OpaqueError, ServiceError


import Wrappers
import software_amazon_cryptography_primitives_internaldafny_types
import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.client as client_impl

def _smithy_error_to_dafny_error(e: ServiceError):
       '''
       Converts the provided native Smithy-modelled error
       into the corresponding Dafny error.
       '''
       if isinstance(e, aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.errors.AwsCryptographicPrimitivesError):
           return software_amazon_cryptography_primitives_internaldafny_types.Error_AwsCryptographicPrimitivesError(message=e.message)

       if isinstance(e, CollectionOfErrors):
           return software_amazon_cryptography_primitives_internaldafny_types.Error_CollectionOfErrors(message=e.message, list=e.list)

       if isinstance(e, OpaqueError):
           return software_amazon_cryptography_primitives_internaldafny_types.Error_Opaque(obj=e.obj)

class AtomicPrimitivesShim(software_amazon_cryptography_primitives_internaldafny_types.IAwsCryptographicPrimitivesClient):
    def __init__(self, _impl: client_impl) :
        self._impl = _impl

    def GenerateRandomBytes(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateRandomBytesInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_GenerateRandomBytesInput(input)
        try:
            smithy_client_response = self._impl.generate_random_bytes(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_GenerateRandomBytesOutput(smithy_client_response))

    def Digest(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.DigestInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_DigestInput(input)
        try:
            smithy_client_response = self._impl.digest(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_DigestOutput(smithy_client_response))

    def HMac(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.HMacInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_HMacInput(input)
        try:
            smithy_client_response = self._impl.h_mac(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_HMacOutput(smithy_client_response))

    def HkdfExtract(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.HkdfExtractInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_HkdfExtractInput(input)
        try:
            smithy_client_response = self._impl.hkdf_extract(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_HkdfExtractOutput(smithy_client_response))

    def HkdfExpand(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.HkdfExpandInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_HkdfExpandInput(input)
        try:
            smithy_client_response = self._impl.hkdf_expand(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_HkdfExpandOutput(smithy_client_response))

    def Hkdf(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.HkdfInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_HkdfInput(input)
        try:
            smithy_client_response = self._impl.hkdf(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_HkdfOutput(smithy_client_response))

    def KdfCounterMode(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.KdfCtrInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_KdfCtrInput(input)
        try:
            smithy_client_response = self._impl.kdf_counter_mode(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_KdfCtrOutput(smithy_client_response))

    def AesKdfCounterMode(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AesKdfCtrInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_AesKdfCtrInput(input)
        try:
            smithy_client_response = self._impl.aes_kdf_counter_mode(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_AesKdfCtrOutput(smithy_client_response))

    def AESEncrypt(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AESEncryptInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_AESEncryptInput(input)
        try:
            smithy_client_response = self._impl.aes_encrypt(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_AESEncryptOutput(smithy_client_response))

    def AESDecrypt(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AESDecryptInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_AESDecryptInput(input)
        try:
            smithy_client_response = self._impl.aes_decrypt(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_AESDecryptOutput(smithy_client_response))

    def GenerateRSAKeyPair(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateRSAKeyPairInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_GenerateRSAKeyPairInput(input)
        try:
            smithy_client_response = self._impl.generate_rsa_key_pair(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_GenerateRSAKeyPairOutput(smithy_client_response))

    def GetRSAKeyModulusLength(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GetRSAKeyModulusLengthInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_GetRSAKeyModulusLengthInput(input)
        try:
            smithy_client_response = self._impl.get_rsa_key_modulus_length(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_GetRSAKeyModulusLengthOutput(smithy_client_response))

    def RSADecrypt(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.RSADecryptInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_RSADecryptInput(input)
        try:
            smithy_client_response = self._impl.rsa_decrypt(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_RSADecryptOutput(smithy_client_response))

    def RSAEncrypt(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.RSAEncryptInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_RSAEncryptInput(input)
        try:
            smithy_client_response = self._impl.rsa_encrypt(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_RSAEncryptOutput(smithy_client_response))

    def GenerateECDSASignatureKey(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateECDSASignatureKeyInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_GenerateECDSASignatureKeyInput(input)
        try:
            smithy_client_response = self._impl.generate_ecdsa_signature_key(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_GenerateECDSASignatureKeyOutput(smithy_client_response))

    def ECDSASign(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.ECDSASignInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_ECDSASignInput(input)
        try:
            smithy_client_response = self._impl.ecdsa_sign(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_ECDSASignOutput(smithy_client_response))

    def ECDSAVerify(self, input):
        smithy_client_request: aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.ECDSAVerifyInput = aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_ECDSAVerifyInput(input)
        try:
            smithy_client_response = self._impl.ecdsa_verify(smithy_client_request)
        except ServiceError as e:
            return Wrappers.Result_Failure(_smithy_error_to_dafny_error(e))

        return Wrappers.Result_Success(aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.aws_cryptography_primitives_ECDSAVerifyOutput(smithy_client_response))
