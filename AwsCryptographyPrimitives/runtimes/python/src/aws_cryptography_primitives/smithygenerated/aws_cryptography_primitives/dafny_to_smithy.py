# Code generated by smithy-python-codegen DO NOT EDIT.

import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy
import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models
import module_
from software_amazon_cryptography_primitives_internaldafny_types import (
    DigestAlgorithm_SHA__256,
    DigestAlgorithm_SHA__384,
    DigestAlgorithm_SHA__512,
    ECDSASignatureAlgorithm_ECDSA__P256,
    ECDSASignatureAlgorithm_ECDSA__P384,
    RSAPaddingMode_OAEP__SHA1,
    RSAPaddingMode_OAEP__SHA256,
    RSAPaddingMode_OAEP__SHA384,
    RSAPaddingMode_OAEP__SHA512,
    RSAPaddingMode_PKCS1,
)


def aws_cryptography_primitives_GenerateRandomBytesInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateRandomBytesInput(
        length=input.length,
    )


def aws_cryptography_primitives_DigestAlgorithm(input):
    if isinstance(input, DigestAlgorithm_SHA__512):
        return "SHA_512"

    elif isinstance(input, DigestAlgorithm_SHA__384):
        return "SHA_384"

    elif isinstance(input, DigestAlgorithm_SHA__256):
        return "SHA_256"

    else:
        raise ValueError(f"No recognized enum value in enum type: {input=}")


def aws_cryptography_primitives_DigestInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.DigestInput(
        digest_algorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_DigestAlgorithm(
            input.digestAlgorithm
        ),
        message=bytes(input.message),
    )


def aws_cryptography_primitives_HMacInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.HMacInput(
        digest_algorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_DigestAlgorithm(
            input.digestAlgorithm
        ),
        key=bytes(input.key),
        message=bytes(input.message),
    )


def aws_cryptography_primitives_HkdfExtractInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.HkdfExtractInput(
        digest_algorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_DigestAlgorithm(
            input.digestAlgorithm
        ),
        salt=(bytes(input.salt.value)) if (input.salt.is_Some) else None,
        ikm=bytes(input.ikm),
    )


def aws_cryptography_primitives_HkdfExpandInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.HkdfExpandInput(
        digest_algorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_DigestAlgorithm(
            input.digestAlgorithm
        ),
        prk=bytes(input.prk),
        info=bytes(input.info),
        expected_length=input.expectedLength,
    )


def aws_cryptography_primitives_HkdfInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.HkdfInput(
        digest_algorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_DigestAlgorithm(
            input.digestAlgorithm
        ),
        salt=(bytes(input.salt.value)) if (input.salt.is_Some) else None,
        ikm=bytes(input.ikm),
        info=bytes(input.info),
        expected_length=input.expectedLength,
    )


def aws_cryptography_primitives_KdfCtrInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.KdfCtrInput(
        digest_algorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_DigestAlgorithm(
            input.digestAlgorithm
        ),
        ikm=bytes(input.ikm),
        expected_length=input.expectedLength,
        purpose=(bytes(input.purpose.value)) if (input.purpose.is_Some) else None,
        nonce=(bytes(input.nonce.value)) if (input.nonce.is_Some) else None,
    )


def aws_cryptography_primitives_AesKdfCtrInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AesKdfCtrInput(
        ikm=bytes(input.ikm),
        expected_length=input.expectedLength,
        nonce=(bytes(input.nonce.value)) if (input.nonce.is_Some) else None,
    )


def aws_cryptography_primitives_AES_GCM(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AES_GCM(
        key_length=input.keyLength,
        tag_length=input.tagLength,
        iv_length=input.ivLength,
    )


def aws_cryptography_primitives_AESEncryptInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AESEncryptInput(
        enc_alg=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_AES_GCM(
            input.encAlg
        ),
        iv=bytes(input.iv),
        key=bytes(input.key),
        msg=bytes(input.msg),
        aad=bytes(input.aad),
    )


def aws_cryptography_primitives_AESDecryptInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AESDecryptInput(
        enc_alg=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_AES_GCM(
            input.encAlg
        ),
        key=bytes(input.key),
        cipher_txt=bytes(input.cipherTxt),
        auth_tag=bytes(input.authTag),
        iv=bytes(input.iv),
        aad=bytes(input.aad),
    )


def aws_cryptography_primitives_GenerateRSAKeyPairInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateRSAKeyPairInput(
        length_bits=input.lengthBits,
    )


def aws_cryptography_primitives_GetRSAKeyModulusLengthInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GetRSAKeyModulusLengthInput(
        public_key=bytes(input.publicKey),
    )


def aws_cryptography_primitives_RSAPaddingMode(input):
    if isinstance(input, RSAPaddingMode_PKCS1):
        return "PKCS1"

    elif isinstance(input, RSAPaddingMode_OAEP__SHA1):
        return "OAEP_SHA1"

    elif isinstance(input, RSAPaddingMode_OAEP__SHA256):
        return "OAEP_SHA256"

    elif isinstance(input, RSAPaddingMode_OAEP__SHA384):
        return "OAEP_SHA384"

    elif isinstance(input, RSAPaddingMode_OAEP__SHA512):
        return "OAEP_SHA512"

    else:
        raise ValueError(f"No recognized enum value in enum type: {input=}")


def aws_cryptography_primitives_RSADecryptInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.RSADecryptInput(
        padding=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_RSAPaddingMode(
            input.padding
        ),
        private_key=bytes(input.privateKey),
        cipher_text=bytes(input.cipherText),
    )


def aws_cryptography_primitives_RSAEncryptInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.RSAEncryptInput(
        padding=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_RSAPaddingMode(
            input.padding
        ),
        public_key=bytes(input.publicKey),
        plaintext=bytes(input.plaintext),
    )


def aws_cryptography_primitives_ECDSASignatureAlgorithm(input):
    if isinstance(input, ECDSASignatureAlgorithm_ECDSA__P384):
        return "ECDSA_P384"

    elif isinstance(input, ECDSASignatureAlgorithm_ECDSA__P256):
        return "ECDSA_P256"

    else:
        raise ValueError(f"No recognized enum value in enum type: {input=}")


def aws_cryptography_primitives_GenerateECDSASignatureKeyInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateECDSASignatureKeyInput(
        signature_algorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_ECDSASignatureAlgorithm(
            input.signatureAlgorithm
        ),
    )


def aws_cryptography_primitives_ECDSASignInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.ECDSASignInput(
        signature_algorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_ECDSASignatureAlgorithm(
            input.signatureAlgorithm
        ),
        signing_key=bytes(input.signingKey),
        message=bytes(input.message),
    )


def aws_cryptography_primitives_ECDSAVerifyInput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.ECDSAVerifyInput(
        signature_algorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_ECDSASignatureAlgorithm(
            input.signatureAlgorithm
        ),
        verification_key=bytes(input.verificationKey),
        message=bytes(input.message),
        signature=bytes(input.signature),
    )


def aws_cryptography_primitives_GenerateRandomBytesOutput(input):
    return bytes(input)


def aws_cryptography_primitives_DigestOutput(input):
    return bytes(input)


def aws_cryptography_primitives_HMacOutput(input):
    return bytes(input)


def aws_cryptography_primitives_HkdfExtractOutput(input):
    return bytes(input)


def aws_cryptography_primitives_HkdfExpandOutput(input):
    return bytes(input)


def aws_cryptography_primitives_HkdfOutput(input):
    return bytes(input)


def aws_cryptography_primitives_KdfCtrOutput(input):
    return bytes(input)


def aws_cryptography_primitives_AesKdfCtrOutput(input):
    return bytes(input)


def aws_cryptography_primitives_AESEncryptOutput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.AESEncryptOutput(
        cipher_text=bytes(input.cipherText),
        auth_tag=bytes(input.authTag),
    )


def aws_cryptography_primitives_AESDecryptOutput(input):
    return bytes(input)


def aws_cryptography_primitives_RSAPublicKey(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.RSAPublicKey(
        length_bits=input.lengthBits,
        pem=bytes(input.pem),
    )


def aws_cryptography_primitives_RSAPrivateKey(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.RSAPrivateKey(
        length_bits=input.lengthBits,
        pem=bytes(input.pem),
    )


def aws_cryptography_primitives_GenerateRSAKeyPairOutput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateRSAKeyPairOutput(
        public_key=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_RSAPublicKey(
            input.publicKey
        ),
        private_key=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_RSAPrivateKey(
            input.privateKey
        ),
    )


def aws_cryptography_primitives_GetRSAKeyModulusLengthOutput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GetRSAKeyModulusLengthOutput(
        length=input.length,
    )


def aws_cryptography_primitives_RSADecryptOutput(input):
    return bytes(input)


def aws_cryptography_primitives_RSAEncryptOutput(input):
    return bytes(input)


def aws_cryptography_primitives_GenerateECDSASignatureKeyOutput(input):
    return aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.models.GenerateECDSASignatureKeyOutput(
        signature_algorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.dafny_to_smithy.aws_cryptography_primitives_ECDSASignatureAlgorithm(
            input.signatureAlgorithm
        ),
        verification_key=bytes(input.verificationKey),
        signing_key=bytes(input.signingKey),
    )


def aws_cryptography_primitives_ECDSASignOutput(input):
    return bytes(input)


def aws_cryptography_primitives_ECDSAVerifyOutput(input):
    return input


def aws_cryptography_primitives_CryptoConfig(input):
    # Deferred import of .config to avoid circular dependency
    import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.config

    return (
        aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.config.CryptoConfig()
    )
