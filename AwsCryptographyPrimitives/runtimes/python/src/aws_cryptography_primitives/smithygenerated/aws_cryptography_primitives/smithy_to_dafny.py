# Code generated by smithy-python-codegen DO NOT EDIT.

from Wrappers import Option_None, Option_Some
from _dafny import Seq
import aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny
import module_
from software_amazon_cryptography_primitives_internaldafny_types import (
    AESDecryptInput_AESDecryptInput as DafnyAESDecryptInput,
    AESEncryptInput_AESEncryptInput as DafnyAESEncryptInput,
    AESEncryptOutput_AESEncryptOutput as DafnyAESEncryptOutput,
    AES__GCM_AES__GCM as DafnyAES_GCM,
    AesKdfCtrInput_AesKdfCtrInput as DafnyAesKdfCtrInput,
    CryptoConfig_CryptoConfig as DafnyCryptoConfig,
    DigestAlgorithm_SHA__256,
    DigestAlgorithm_SHA__384,
    DigestAlgorithm_SHA__512,
    DigestInput_DigestInput as DafnyDigestInput,
    ECDSASignInput_ECDSASignInput as DafnyECDSASignInput,
    ECDSASignatureAlgorithm_ECDSA__P256,
    ECDSASignatureAlgorithm_ECDSA__P384,
    ECDSAVerifyInput_ECDSAVerifyInput as DafnyECDSAVerifyInput,
    GenerateECDSASignatureKeyInput_GenerateECDSASignatureKeyInput as DafnyGenerateECDSASignatureKeyInput,
    GenerateECDSASignatureKeyOutput_GenerateECDSASignatureKeyOutput as DafnyGenerateECDSASignatureKeyOutput,
    GenerateRSAKeyPairInput_GenerateRSAKeyPairInput as DafnyGenerateRSAKeyPairInput,
    GenerateRSAKeyPairOutput_GenerateRSAKeyPairOutput as DafnyGenerateRSAKeyPairOutput,
    GenerateRandomBytesInput_GenerateRandomBytesInput as DafnyGenerateRandomBytesInput,
    GetRSAKeyModulusLengthInput_GetRSAKeyModulusLengthInput as DafnyGetRSAKeyModulusLengthInput,
    GetRSAKeyModulusLengthOutput_GetRSAKeyModulusLengthOutput as DafnyGetRSAKeyModulusLengthOutput,
    HMacInput_HMacInput as DafnyHMacInput,
    HkdfExpandInput_HkdfExpandInput as DafnyHkdfExpandInput,
    HkdfExtractInput_HkdfExtractInput as DafnyHkdfExtractInput,
    HkdfInput_HkdfInput as DafnyHkdfInput,
    KdfCtrInput_KdfCtrInput as DafnyKdfCtrInput,
    RSADecryptInput_RSADecryptInput as DafnyRSADecryptInput,
    RSAEncryptInput_RSAEncryptInput as DafnyRSAEncryptInput,
    RSAPaddingMode_OAEP__SHA1,
    RSAPaddingMode_OAEP__SHA256,
    RSAPaddingMode_OAEP__SHA384,
    RSAPaddingMode_OAEP__SHA512,
    RSAPaddingMode_PKCS1,
    RSAPrivateKey_RSAPrivateKey as DafnyRSAPrivateKey,
    RSAPublicKey_RSAPublicKey as DafnyRSAPublicKey,
)


def SmithyToDafny_aws_cryptography_primitives_GenerateRandomBytesInput(input):
    return DafnyGenerateRandomBytesInput(
        length=input.length,
    )

def SmithyToDafny_aws_cryptography_primitives_DigestInput(input):
    return DafnyDigestInput(
        digestAlgorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_DigestAlgorithm(input.digest_algorithm),
        message=Seq(input.message),
    )

def SmithyToDafny_aws_cryptography_primitives_DigestAlgorithm(input):
    if input == 'SHA_512':
        return DigestAlgorithm_SHA__512()

    elif input == 'SHA_384':
        return DigestAlgorithm_SHA__384()

    elif input == 'SHA_256':
        return DigestAlgorithm_SHA__256()

    else:
        raise ValueError(f'No recognized enum value in enum type: {input=}')

def SmithyToDafny_aws_cryptography_primitives_HMacInput(input):
    return DafnyHMacInput(
        digestAlgorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_DigestAlgorithm(input.digest_algorithm),
        key=Seq(input.key),
        message=Seq(input.message),
    )

def SmithyToDafny_aws_cryptography_primitives_HkdfExtractInput(input):
    return DafnyHkdfExtractInput(
        digestAlgorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_DigestAlgorithm(input.digest_algorithm),
        salt=((Option_Some(Seq(input.salt))) if (input.salt is not None) else (Option_None())),
        ikm=Seq(input.ikm),
    )

def SmithyToDafny_aws_cryptography_primitives_HkdfExpandInput(input):
    return DafnyHkdfExpandInput(
        digestAlgorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_DigestAlgorithm(input.digest_algorithm),
        prk=Seq(input.prk),
        info=Seq(input.info),
        expectedLength=input.expected_length,
    )

def SmithyToDafny_aws_cryptography_primitives_HkdfInput(input):
    return DafnyHkdfInput(
        digestAlgorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_DigestAlgorithm(input.digest_algorithm),
        salt=((Option_Some(Seq(input.salt))) if (input.salt is not None) else (Option_None())),
        ikm=Seq(input.ikm),
        info=Seq(input.info),
        expectedLength=input.expected_length,
    )

def SmithyToDafny_aws_cryptography_primitives_KdfCtrInput(input):
    return DafnyKdfCtrInput(
        digestAlgorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_DigestAlgorithm(input.digest_algorithm),
        ikm=Seq(input.ikm),
        expectedLength=input.expected_length,
        purpose=((Option_Some(Seq(input.purpose))) if (input.purpose is not None) else (Option_None())),
        nonce=((Option_Some(Seq(input.nonce))) if (input.nonce is not None) else (Option_None())),
    )

def SmithyToDafny_aws_cryptography_primitives_AesKdfCtrInput(input):
    return DafnyAesKdfCtrInput(
        ikm=Seq(input.ikm),
        expectedLength=input.expected_length,
        nonce=((Option_Some(Seq(input.nonce))) if (input.nonce is not None) else (Option_None())),
    )

def SmithyToDafny_aws_cryptography_primitives_AESEncryptInput(input):
    return DafnyAESEncryptInput(
        encAlg=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_AES_GCM(input.enc_alg),
        iv=Seq(input.iv),
        key=Seq(input.key),
        msg=Seq(input.msg),
        aad=Seq(input.aad),
    )

def SmithyToDafny_aws_cryptography_primitives_AES_GCM(input):
    return DafnyAES_GCM(
        keyLength=input.key_length,
        tagLength=input.tag_length,
        ivLength=input.iv_length,
    )

def SmithyToDafny_aws_cryptography_primitives_AESDecryptInput(input):
    return DafnyAESDecryptInput(
        encAlg=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_AES_GCM(input.enc_alg),
        key=Seq(input.key),
        cipherTxt=Seq(input.cipher_txt),
        authTag=Seq(input.auth_tag),
        iv=Seq(input.iv),
        aad=Seq(input.aad),
    )

def SmithyToDafny_aws_cryptography_primitives_GenerateRSAKeyPairInput(input):
    return DafnyGenerateRSAKeyPairInput(
        lengthBits=input.length_bits,
    )

def SmithyToDafny_aws_cryptography_primitives_GetRSAKeyModulusLengthInput(input):
    return DafnyGetRSAKeyModulusLengthInput(
        publicKey=Seq(input.public_key),
    )

def SmithyToDafny_aws_cryptography_primitives_RSADecryptInput(input):
    return DafnyRSADecryptInput(
        padding=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_RSAPaddingMode(input.padding),
        privateKey=Seq(input.private_key),
        cipherText=Seq(input.cipher_text),
    )

def SmithyToDafny_aws_cryptography_primitives_RSAPaddingMode(input):
    if input == 'PKCS1':
        return RSAPaddingMode_PKCS1()

    elif input == 'OAEP_SHA1':
        return RSAPaddingMode_OAEP__SHA1()

    elif input == 'OAEP_SHA256':
        return RSAPaddingMode_OAEP__SHA256()

    elif input == 'OAEP_SHA384':
        return RSAPaddingMode_OAEP__SHA384()

    elif input == 'OAEP_SHA512':
        return RSAPaddingMode_OAEP__SHA512()

    else:
        raise ValueError(f'No recognized enum value in enum type: {input=}')

def SmithyToDafny_aws_cryptography_primitives_RSAEncryptInput(input):
    return DafnyRSAEncryptInput(
        padding=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_RSAPaddingMode(input.padding),
        publicKey=Seq(input.public_key),
        plaintext=Seq(input.plaintext),
    )

def SmithyToDafny_aws_cryptography_primitives_GenerateECDSASignatureKeyInput(input):
    return DafnyGenerateECDSASignatureKeyInput(
        signatureAlgorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_ECDSASignatureAlgorithm(input.signature_algorithm),
    )

def SmithyToDafny_aws_cryptography_primitives_ECDSASignatureAlgorithm(input):
    if input == 'ECDSA_P384':
        return ECDSASignatureAlgorithm_ECDSA__P384()

    elif input == 'ECDSA_P256':
        return ECDSASignatureAlgorithm_ECDSA__P256()

    else:
        raise ValueError(f'No recognized enum value in enum type: {input=}')

def SmithyToDafny_aws_cryptography_primitives_ECDSASignInput(input):
    return DafnyECDSASignInput(
        signatureAlgorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_ECDSASignatureAlgorithm(input.signature_algorithm),
        signingKey=Seq(input.signing_key),
        message=Seq(input.message),
    )

def SmithyToDafny_aws_cryptography_primitives_ECDSAVerifyInput(input):
    return DafnyECDSAVerifyInput(
        signatureAlgorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_ECDSASignatureAlgorithm(input.signature_algorithm),
        verificationKey=Seq(input.verification_key),
        message=Seq(input.message),
        signature=Seq(input.signature),
    )

def SmithyToDafny_aws_cryptography_primitives_GenerateRandomBytesOutput(input):
    return Seq(input)

def SmithyToDafny_aws_cryptography_primitives_DigestOutput(input):
    return Seq(input)

def SmithyToDafny_aws_cryptography_primitives_HMacOutput(input):
    return Seq(input)

def SmithyToDafny_aws_cryptography_primitives_HkdfExtractOutput(input):
    return Seq(input)

def SmithyToDafny_aws_cryptography_primitives_HkdfExpandOutput(input):
    return Seq(input)

def SmithyToDafny_aws_cryptography_primitives_HkdfOutput(input):
    return Seq(input)

def SmithyToDafny_aws_cryptography_primitives_KdfCtrOutput(input):
    return Seq(input)

def SmithyToDafny_aws_cryptography_primitives_AesKdfCtrOutput(input):
    return Seq(input)

def SmithyToDafny_aws_cryptography_primitives_AESEncryptOutput(input):
    return DafnyAESEncryptOutput(
        cipherText=Seq(input.cipher_text),
        authTag=Seq(input.auth_tag),
    )

def SmithyToDafny_aws_cryptography_primitives_AESDecryptOutput(input):
    return Seq(input)

def SmithyToDafny_aws_cryptography_primitives_GenerateRSAKeyPairOutput(input):
    return DafnyGenerateRSAKeyPairOutput(
        publicKey=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_RSAPublicKey(input.public_key),
        privateKey=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_RSAPrivateKey(input.private_key),
    )

def SmithyToDafny_aws_cryptography_primitives_RSAPublicKey(input):
    return DafnyRSAPublicKey(
        lengthBits=input.length_bits,
        pem=Seq(input.pem),
    )

def SmithyToDafny_aws_cryptography_primitives_RSAPrivateKey(input):
    return DafnyRSAPrivateKey(
        lengthBits=input.length_bits,
        pem=Seq(input.pem),
    )

def SmithyToDafny_aws_cryptography_primitives_GetRSAKeyModulusLengthOutput(input):
    return DafnyGetRSAKeyModulusLengthOutput(
        length=input.length,
    )

def SmithyToDafny_aws_cryptography_primitives_RSADecryptOutput(input):
    return Seq(input)

def SmithyToDafny_aws_cryptography_primitives_RSAEncryptOutput(input):
    return Seq(input)

def SmithyToDafny_aws_cryptography_primitives_GenerateECDSASignatureKeyOutput(input):
    return DafnyGenerateECDSASignatureKeyOutput(
        signatureAlgorithm=aws_cryptography_primitives.smithygenerated.aws_cryptography_primitives.smithy_to_dafny.SmithyToDafny_aws_cryptography_primitives_ECDSASignatureAlgorithm(input.signature_algorithm),
        verificationKey=Seq(input.verification_key),
        signingKey=Seq(input.signing_key),
    )

def SmithyToDafny_aws_cryptography_primitives_ECDSASignOutput(input):
    return Seq(input)

def SmithyToDafny_aws_cryptography_primitives_ECDSAVerifyOutput(input):
    return input

def SmithyToDafny_aws_cryptography_primitives_CryptoConfig(input):
    return DafnyCryptoConfig(
    )
