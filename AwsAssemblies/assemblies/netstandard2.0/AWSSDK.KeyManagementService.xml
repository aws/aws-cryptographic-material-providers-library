<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWSSDK.KeyManagementService</name>
    </assembly>
    <members>
        <member name="T:Amazon.KeyManagementService.AmazonKeyManagementServiceClient">
             <summary>
             <para>Implementation for accessing KeyManagementService</para>
            
             Key Management Service 
             <para>
             Key Management Service (KMS) is an encryption and key management web service. This
             guide describes the KMS operations that you can call programmatically. For general
             information about KMS, see the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/">
             <i>Key Management Service Developer Guide</i> </a>.
             </para>
              <note> 
             <para>
             KMS has replaced the term <i>customer master key (CMK)</i> with <i>KMS key</i> and
             <i>KMS key</i>. The concept has not changed. To prevent breaking changes, KMS is keeping
             some variations of this term.
             </para>
              
             <para>
             Amazon Web Services provides SDKs that consist of libraries and sample code for various
             programming languages and platforms (Java, Ruby, .Net, macOS, Android, etc.). The
             SDKs provide a convenient way to create programmatic access to KMS and other Amazon
             Web Services services. For example, the SDKs take care of tasks such as signing requests
             (see below), managing errors, and retrying requests automatically. For more information
             about the Amazon Web Services SDKs, including how to download and install them, see
             <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>.
             </para>
              </note> 
             <para>
             We recommend that you use the Amazon Web Services SDKs to make programmatic API calls
             to KMS.
             </para>
              
             <para>
             If you need to use FIPS 140-2 validated cryptographic modules when communicating with
             Amazon Web Services, use the FIPS endpoint in your preferred Amazon Web Services Region.
             For more information about the available FIPS endpoints, see <a href="https://docs.aws.amazon.com/general/latest/gr/kms.html#kms_region">Service
             endpoints</a> in the Key Management Service topic of the <i>Amazon Web Services General
             Reference</i>.
             </para>
              
             <para>
             All KMS API calls must be signed and be transmitted using Transport Layer Security
             (TLS). KMS recommends you always use the latest supported TLS version. Clients must
             also support cipher suites with Perfect Forward Secrecy (PFS) such as Ephemeral Diffie-Hellman
             (DHE) or Elliptic Curve Ephemeral Diffie-Hellman (ECDHE). Most modern systems such
             as Java 7 and later support these modes.
             </para>
              
             <para>
              <b>Signing Requests</b> 
             </para>
              
             <para>
             Requests must be signed using an access key ID and a secret access key. We strongly
             recommend that you do not use your Amazon Web Services account root access key ID
             and secret access key for everyday work. You can use the access key ID and secret
             access key for an IAM user or you can use the Security Token Service (STS) to generate
             temporary security credentials and use those to sign requests. 
             </para>
              
             <para>
             All KMS requests must be signed with <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
             Version 4</a>.
             </para>
              
             <para>
              <b>Logging API Requests</b> 
             </para>
              
             <para>
             KMS supports CloudTrail, a service that logs Amazon Web Services API calls and related
             events for your Amazon Web Services account and delivers them to an Amazon S3 bucket
             that you specify. By using the information collected by CloudTrail, you can determine
             what requests were made to KMS, who made the request, when it was made, and so on.
             To learn more about CloudTrail, including how to turn it on and find your log files,
             see the <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/">CloudTrail
             User Guide</a>.
             </para>
              
             <para>
              <b>Additional Resources</b> 
             </para>
              
             <para>
             For more information about credentials and request signing, see the following:
             </para>
              <ul> <li> 
             <para>
              <a href="https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">Amazon
             Web Services Security Credentials</a> - This topic provides general information about
             the types of credentials used to access Amazon Web Services.
             </para>
              </li> <li> 
             <para>
              <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html">Temporary
             Security Credentials</a> - This section of the <i>IAM User Guide</i> describes how
             to create and use temporary security credentials.
             </para>
              </li> <li> 
             <para>
              <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
             Version 4 Signing Process</a> - This set of topics walks you through the process of
             signing a request using an access key ID and a secret access key.
             </para>
              </li> </ul> 
             <para>
              <b>Commonly Used API Operations</b> 
             </para>
              
             <para>
             Of the API operations discussed in this guide, the following will prove the most useful
             for most applications. You will likely perform operations other than these, such as
             creating keys and assigning policies, by using the console.
             </para>
              <ul> <li> 
             <para>
              <a>Encrypt</a> 
             </para>
              </li> <li> 
             <para>
              <a>Decrypt</a> 
             </para>
              </li> <li> 
             <para>
              <a>GenerateDataKey</a> 
             </para>
              </li> <li> 
             <para>
              <a>GenerateDataKeyWithoutPlaintext</a> 
             </para>
              </li> </ul>
             </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.#ctor">
             <summary>
             Constructs AmazonKeyManagementServiceClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.#ctor(Amazon.RegionEndpoint)">
             <summary>
             Constructs AmazonKeyManagementServiceClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.#ctor(Amazon.KeyManagementService.AmazonKeyManagementServiceConfig)">
             <summary>
             Constructs AmazonKeyManagementServiceClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="config">The AmazonKeyManagementServiceClient Configuration Object</param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.#ctor(Amazon.Runtime.AWSCredentials)">
            <summary>
            Constructs AmazonKeyManagementServiceClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonKeyManagementServiceClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.KeyManagementService.AmazonKeyManagementServiceConfig)">
            <summary>
            Constructs AmazonKeyManagementServiceClient with AWS Credentials and an
            AmazonKeyManagementServiceClient Configuration object.
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="clientConfig">The AmazonKeyManagementServiceClient Configuration Object</param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.#ctor(System.String,System.String)">
            <summary>
            Constructs AmazonKeyManagementServiceClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.#ctor(System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonKeyManagementServiceClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.#ctor(System.String,System.String,Amazon.KeyManagementService.AmazonKeyManagementServiceConfig)">
            <summary>
            Constructs AmazonKeyManagementServiceClient with AWS Access Key ID, AWS Secret Key and an
            AmazonKeyManagementServiceClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="clientConfig">The AmazonKeyManagementServiceClient Configuration Object</param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs AmazonKeyManagementServiceClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.#ctor(System.String,System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonKeyManagementServiceClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.#ctor(System.String,System.String,System.String,Amazon.KeyManagementService.AmazonKeyManagementServiceConfig)">
            <summary>
            Constructs AmazonKeyManagementServiceClient with AWS Access Key ID, AWS Secret Key and an
            AmazonKeyManagementServiceClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="clientConfig">The AmazonKeyManagementServiceClient Configuration Object</param>
        </member>
        <member name="P:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.Paginators">
            <summary>
            Paginators for the service
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.CreateSigner">
            <summary>
            Creates the signer for the service.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.CustomizeRuntimePipeline(Amazon.Runtime.Internal.RuntimePipeline)">
            <summary>
            Customizes the runtime pipeline.
            </summary>
            <param name="pipeline">Runtime pipeline for the current client.</param>
        </member>
        <member name="P:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ServiceMetadata">
            <summary>
            Capture metadata for the service.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.Dispose(System.Boolean)">
            <summary>
            Disposes the service client.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.CancelKeyDeletionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels the deletion of a KMS key. When this operation succeeds, the key state of
            the KMS key is <c>Disabled</c>. To enable the KMS key, use <a>EnableKey</a>. 
            
             
            <para>
            For more information about scheduling and canceling deletion of a KMS key, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html">Deleting
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CancelKeyDeletion</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>ScheduleKeyDeletion</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Identifies the KMS key whose deletion is being canceled. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CancelKeyDeletion service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CancelKeyDeletion">REST API Reference for CancelKeyDeletion Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.CancelKeyDeletionAsync(Amazon.KeyManagementService.Model.CancelKeyDeletionRequest,System.Threading.CancellationToken)">
            <summary>
            Cancels the deletion of a KMS key. When this operation succeeds, the key state of
            the KMS key is <c>Disabled</c>. To enable the KMS key, use <a>EnableKey</a>. 
            
             
            <para>
            For more information about scheduling and canceling deletion of a KMS key, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html">Deleting
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CancelKeyDeletion</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>ScheduleKeyDeletion</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CancelKeyDeletion service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CancelKeyDeletion service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CancelKeyDeletion">REST API Reference for CancelKeyDeletion Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ConnectCustomKeyStoreAsync(Amazon.KeyManagementService.Model.ConnectCustomKeyStoreRequest,System.Threading.CancellationToken)">
            <summary>
            Connects or reconnects a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> to its backing key store. For an CloudHSM key store, <c>ConnectCustomKeyStore</c>
            connects the key store to its associated CloudHSM cluster. For an external key store,
            <c>ConnectCustomKeyStore</c> connects the key store to the external key store proxy
            that communicates with your external key manager.
            
             
            <para>
            The custom key store must be connected before you can create KMS keys in the key store
            or use the KMS keys it contains. You can disconnect and reconnect a custom key store
            at any time.
            </para>
             
            <para>
            The connection process for a custom key store can take an extended amount of time
            to complete. This operation starts the connection process, but it does not wait for
            it to complete. When it succeeds, this operation quickly returns an HTTP 200 response
            and a JSON object with no properties. However, this response does not indicate that
            the custom key store is connected. To get the connection state of the custom key store,
            use the <a>DescribeCustomKeyStores</a> operation.
            </para>
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            The <c>ConnectCustomKeyStore</c> operation might fail for various reasons. To find
            the reason, use the <a>DescribeCustomKeyStores</a> operation and see the <c>ConnectionErrorCode</c>
            in the response. For help interpreting the <c>ConnectionErrorCode</c>, see <a>CustomKeyStoresListEntry</a>.
            </para>
             
            <para>
            To fix the failure, use the <a>DisconnectCustomKeyStore</a> operation to disconnect
            the custom key store, correct the error, use the <a>UpdateCustomKeyStore</a> operation
            if necessary, and then use <c>ConnectCustomKeyStore</c> again.
            </para>
             
            <para>
             <b>CloudHSM key store</b> 
            </para>
             
            <para>
            During the connection process for an CloudHSM key store, KMS finds the CloudHSM cluster
            that is associated with the custom key store, creates the connection infrastructure,
            connects to the cluster, logs into the CloudHSM client as the <c>kmsuser</c> CU, and
            rotates its password.
            </para>
             
            <para>
            To connect an CloudHSM key store, its associated CloudHSM cluster must have at least
            one active HSM. To get the number of active HSMs in a cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a>
            operation. To add HSMs to the cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html">CreateHsm</a>
            operation. Also, the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser">
            <c>kmsuser</c> crypto user</a> (CU) must not be logged into the cluster. This prevents
            KMS from using this account to log in.
            </para>
             
            <para>
            If you are having trouble connecting or disconnecting a CloudHSM key store, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            an CloudHSM key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>External key store</b> 
            </para>
             
            <para>
            When you connect an external key store that uses public endpoint connectivity, KMS
            tests its ability to communicate with your external key manager by sending a request
            via the external key store proxy.
            </para>
             
            <para>
            When you connect to an external key store that uses VPC endpoint service connectivity,
            KMS establishes the networking elements that it needs to communicate with your external
            key manager via the external key store proxy. This includes creating an interface
            endpoint to the VPC endpoint service and a private hosted zone for traffic between
            KMS and the VPC endpoint service.
            </para>
             
            <para>
            To connect an external key store, KMS must be able to connect to the external key
            store proxy, the external key store proxy must be able to communicate with your external
            key manager, and the external key manager must be available for cryptographic operations.
            </para>
             
            <para>
            If you are having trouble connecting or disconnecting an external key store, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/xks-troubleshooting.html">Troubleshooting
            an external key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ConnectCustomKeyStore</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ConnectCustomKeyStore service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ConnectCustomKeyStore service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException">
            The request was rejected because the associated CloudHSM cluster did not meet the
            configuration requirements for an CloudHSM key store.
            
             <ul> <li> 
            <para>
            The CloudHSM cluster must be configured with private subnets in at least two different
            Availability Zones in the Region.
            </para>
             </li> <li> 
            <para>
            The <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">security
            group for the cluster</a> (cloudhsm-cluster-<i>&lt;cluster-id&gt;</i>-sg) must include
            inbound rules and outbound rules that allow TCP traffic on ports 2223-2225. The <b>Source</b>
            in the inbound rules and the <b>Destination</b> in the outbound rules must match the
            security group ID. These rules are set by default when you create the CloudHSM cluster.
            Do not delete or change them. To get information about a particular security group,
            use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html">DescribeSecurityGroups</a>
            operation.
            </para>
             </li> <li> 
            <para>
            The CloudHSM cluster must contain at least as many HSMs as the operation requires.
            To add HSMs, use the CloudHSM <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html">CreateHsm</a>
            operation.
            </para>
             
            <para>
            For the <a>CreateCustomKeyStore</a>, <a>UpdateCustomKeyStore</a>, and <a>CreateKey</a>
            operations, the CloudHSM cluster must have at least two active HSMs, each in a different
            Availability Zone. For the <a>ConnectCustomKeyStore</a> operation, the CloudHSM must
            contain at least one active HSM.
            </para>
             </li> </ul> 
            <para>
            For information about the requirements for an CloudHSM cluster that is associated
            with an CloudHSM key store, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">Assemble
            the Prerequisites</a> in the <i>Key Management Service Developer Guide</i>. For information
            about creating a private subnet for an CloudHSM cluster, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/create-subnets.html">Create
            a Private Subnet</a> in the <i>CloudHSM User Guide</i>. For information about cluster
            security groups, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">Configure
            a Default Security Group</a> in the <i> <i>CloudHSM User Guide</i> </i>. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException">
            The request was rejected because the CloudHSM cluster associated with the CloudHSM
            key store is not active. Initialize and activate the cluster and try the command again.
            For detailed instructions, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/getting-started.html">Getting
            Started</a> in the <i>CloudHSM User Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ConnectCustomKeyStore">REST API Reference for ConnectCustomKeyStore Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.CreateAliasAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a friendly name for a KMS key. 
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            You can use an alias to identify a KMS key in the KMS console, in the <a>DescribeKey</a>
            operation and in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>, such as <a>Encrypt</a> and <a>GenerateDataKey</a>. You can also change
            the KMS key that's associated with the alias (<a>UpdateAlias</a>) or delete the alias
            (<a>DeleteAlias</a>) at any time. These operations don't affect the underlying KMS
            key. 
            </para>
             
            <para>
            You can associate the alias with any customer managed key in the same Amazon Web Services
            Region. Each alias is associated with only one KMS key at a time, but a KMS key can
            have multiple aliases. A valid KMS key is required. You can't create an alias without
            a KMS key.
            </para>
             
            <para>
            The alias must be unique in the account and Region, but you can have aliases with
            the same name in different Regions. For detailed information about aliases, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html">Using
            aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            This operation does not return a response. To get the alias that you created, use
            the <a>ListAliases</a> operation.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on an alias in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateAlias</a>
            on the KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="aliasName">Specifies the alias name. This value must begin with <c>alias/</c> followed by a name, such as <c>alias/ExampleAlias</c>.  <important> Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. </important> The <c>AliasName</c> value must be string of 1-256 characters. It can contain only alphanumeric characters, forward slashes (/), underscores (_), and dashes (-). The alias name cannot begin with <c>alias/aws/</c>. The <c>alias/aws/</c> prefix is reserved for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon Web Services managed keys</a>.</param>
            <param name="targetKeyId">Associates the alias with the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed key</a>. The KMS key must be in the same Amazon Web Services Region.  A valid key ID is required. If you supply a null or empty string value, this operation returns an error. For help finding the key ID and ARN, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn">Finding the Key ID and ARN</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateAlias service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.AlreadyExistsException">
            The request was rejected because it attempted to create a resource that already exists.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidAliasNameException">
            The request was rejected because the specified alias name is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CreateAlias">REST API Reference for CreateAlias Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.CreateAliasAsync(Amazon.KeyManagementService.Model.CreateAliasRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a friendly name for a KMS key. 
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            You can use an alias to identify a KMS key in the KMS console, in the <a>DescribeKey</a>
            operation and in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>, such as <a>Encrypt</a> and <a>GenerateDataKey</a>. You can also change
            the KMS key that's associated with the alias (<a>UpdateAlias</a>) or delete the alias
            (<a>DeleteAlias</a>) at any time. These operations don't affect the underlying KMS
            key. 
            </para>
             
            <para>
            You can associate the alias with any customer managed key in the same Amazon Web Services
            Region. Each alias is associated with only one KMS key at a time, but a KMS key can
            have multiple aliases. A valid KMS key is required. You can't create an alias without
            a KMS key.
            </para>
             
            <para>
            The alias must be unique in the account and Region, but you can have aliases with
            the same name in different Regions. For detailed information about aliases, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html">Using
            aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            This operation does not return a response. To get the alias that you created, use
            the <a>ListAliases</a> operation.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on an alias in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateAlias</a>
            on the KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateAlias service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateAlias service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.AlreadyExistsException">
            The request was rejected because it attempted to create a resource that already exists.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidAliasNameException">
            The request was rejected because the specified alias name is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CreateAlias">REST API Reference for CreateAlias Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.CreateCustomKeyStoreAsync(Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> backed by a key store that you own and manage. When you use a KMS key
            in a custom key store for a cryptographic operation, the cryptographic operation is
            actually performed in your key store using your keys. KMS supports <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key stores</a> backed by an <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/clusters.html">CloudHSM
            cluster</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key stores</a> backed by an external key store proxy and external key manager outside
            of Amazon Web Services.
            
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            Before you create the custom key store, the required elements must be in place and
            operational. We recommend that you use the test tools that KMS provides to verify
            the configuration your external key store proxy. For details about the required elements
            and verification tests, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">Assemble
            the prerequisites (for CloudHSM key stores)</a> or <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-xks-keystore.html#xks-requirements">Assemble
            the prerequisites (for external key stores)</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            To create a custom key store, use the following parameters.
            </para>
             <ul> <li> 
            <para>
            To create an CloudHSM key store, specify the <c>CustomKeyStoreName</c>, <c>CloudHsmClusterId</c>,
            <c>KeyStorePassword</c>, and <c>TrustAnchorCertificate</c>. The <c>CustomKeyStoreType</c>
            parameter is optional for CloudHSM key stores. If you include it, set it to the default
            value, <c>AWS_CLOUDHSM</c>. For help with failures, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            an CloudHSM key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
            To create an external key store, specify the <c>CustomKeyStoreName</c> and a <c>CustomKeyStoreType</c>
            of <c>EXTERNAL_KEY_STORE</c>. Also, specify values for <c>XksProxyConnectivity</c>,
            <c>XksProxyAuthenticationCredential</c>, <c>XksProxyUriEndpoint</c>, and <c>XksProxyUriPath</c>.
            If your <c>XksProxyConnectivity</c> value is <c>VPC_ENDPOINT_SERVICE</c>, specify
            the <c>XksProxyVpcEndpointServiceName</c> parameter. For help with failures, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/xks-troubleshooting.html">Troubleshooting
            an external key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> </ul> <note> 
            <para>
            For external key stores:
            </para>
             
            <para>
            Some external key managers provide a simpler method for creating an external key store.
            For details, see your external key manager documentation.
            </para>
             
            <para>
            When creating an external key store in the KMS console, you can upload a JSON-based
            proxy configuration file with the desired values. You cannot use a proxy configuration
            with the <c>CreateCustomKeyStore</c> operation. However, you can use the values in
            the file to help you determine the correct values for the <c>CreateCustomKeyStore</c>
            parameters.
            </para>
             </note> 
            <para>
            When the operation completes successfully, it returns the ID of the new custom key
            store. Before you can use your new custom key store, you need to use the <a>ConnectCustomKeyStore</a>
            operation to connect a new CloudHSM key store to its CloudHSM cluster, or to connect
            a new external key store to the external key store proxy for your external key manager.
            Even if you are not going to use your custom key store immediately, you might want
            to connect it to verify that all settings are correct and then disconnect it until
            you are ready to use it.
            </para>
             
            <para>
            For help with failures, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            a custom key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateCustomKeyStore</a>
            (IAM policy).
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateCustomKeyStore service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateCustomKeyStore service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterInUseException">
            The request was rejected because the specified CloudHSM cluster is already associated
            with an CloudHSM key store in the account, or it shares a backup history with an CloudHSM
            key store in the account. Each CloudHSM key store in the account must be associated
            with a different CloudHSM cluster.
            
             
            <para>
            CloudHSM clusters that share a backup history have the same cluster certificate. To
            view the cluster certificate of an CloudHSM cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a>
            operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException">
            The request was rejected because the associated CloudHSM cluster did not meet the
            configuration requirements for an CloudHSM key store.
            
             <ul> <li> 
            <para>
            The CloudHSM cluster must be configured with private subnets in at least two different
            Availability Zones in the Region.
            </para>
             </li> <li> 
            <para>
            The <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">security
            group for the cluster</a> (cloudhsm-cluster-<i>&lt;cluster-id&gt;</i>-sg) must include
            inbound rules and outbound rules that allow TCP traffic on ports 2223-2225. The <b>Source</b>
            in the inbound rules and the <b>Destination</b> in the outbound rules must match the
            security group ID. These rules are set by default when you create the CloudHSM cluster.
            Do not delete or change them. To get information about a particular security group,
            use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html">DescribeSecurityGroups</a>
            operation.
            </para>
             </li> <li> 
            <para>
            The CloudHSM cluster must contain at least as many HSMs as the operation requires.
            To add HSMs, use the CloudHSM <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html">CreateHsm</a>
            operation.
            </para>
             
            <para>
            For the <a>CreateCustomKeyStore</a>, <a>UpdateCustomKeyStore</a>, and <a>CreateKey</a>
            operations, the CloudHSM cluster must have at least two active HSMs, each in a different
            Availability Zone. For the <a>ConnectCustomKeyStore</a> operation, the CloudHSM must
            contain at least one active HSM.
            </para>
             </li> </ul> 
            <para>
            For information about the requirements for an CloudHSM cluster that is associated
            with an CloudHSM key store, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">Assemble
            the Prerequisites</a> in the <i>Key Management Service Developer Guide</i>. For information
            about creating a private subnet for an CloudHSM cluster, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/create-subnets.html">Create
            a Private Subnet</a> in the <i>CloudHSM User Guide</i>. For information about cluster
            security groups, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">Configure
            a Default Security Group</a> in the <i> <i>CloudHSM User Guide</i> </i>. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException">
            The request was rejected because the CloudHSM cluster associated with the CloudHSM
            key store is not active. Initialize and activate the cluster and try the command again.
            For detailed instructions, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/getting-started.html">Getting
            Started</a> in the <i>CloudHSM User Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotFoundException">
            The request was rejected because KMS cannot find the CloudHSM cluster with the specified
            cluster ID. Retry the request with a different cluster ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNameInUseException">
            The request was rejected because the specified custom key store name is already assigned
            to another custom key store in the account. Try again with a custom key store name
            that is unique in the account.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.IncorrectTrustAnchorException">
            The request was rejected because the trust anchor certificate in the request to create
            an CloudHSM key store is not the trust anchor certificate for the specified CloudHSM
            cluster.
            
             
            <para>
            When you <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html#sign-csr">initialize
            the CloudHSM cluster</a>, you create the trust anchor certificate and save it in the
            <c>customerCA.crt</c> file.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyIncorrectAuthenticationCredentialException">
            The request was rejected because the proxy credentials failed to authenticate to the
            specified external key store proxy. The specified external key store proxy rejected
            a status request from KMS due to invalid credentials. This can indicate an error in
            the credentials or in the identification of the external key store proxy.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyInvalidConfigurationException">
            The request was rejected because the external key store proxy is not configured correctly.
            To identify the cause, see the error message that accompanies the exception.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyInvalidResponseException">
            KMS cannot interpret the response it received from the external key store proxy. The
            problem might be a poorly constructed response, but it could also be a transient network
            issue. If you see this error repeatedly, report it to the proxy vendor.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyUriEndpointInUseException">
            The request was rejected because the <c>XksProxyUriEndpoint</c> is already associated
            with another external key store in this Amazon Web Services Region. To identify the
            cause, see the error message that accompanies the exception.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyUriInUseException">
            The request was rejected because the concatenation of the <c>XksProxyUriEndpoint</c>
            and <c>XksProxyUriPath</c> is already associated with another external key store in
            this Amazon Web Services Region. Each external key store in a Region must use a unique
            external key store proxy API address.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyUriUnreachableException">
            KMS was unable to reach the specified <c>XksProxyUriPath</c>. The path must be reachable
            before you create the external key store or update its settings.
            
             
            <para>
            This exception is also thrown when the external key store proxy response to a <c>GetHealthStatus</c>
            request indicates that all external key manager instances are unavailable.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInUseException">
            The request was rejected because the specified Amazon VPC endpoint service is already
            associated with another external key store in this Amazon Web Services Region. Each
            external key store in a Region must use a different Amazon VPC endpoint service.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInvalidConfigurationException">
            The request was rejected because the Amazon VPC endpoint service configuration does
            not fulfill the requirements for an external key store. To identify the cause, see
            the error message that accompanies the exception and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/vpc-connectivity.html#xks-vpc-requirements">review
            the requirements</a> for Amazon VPC endpoint service connectivity for an external
            key store.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceNotFoundException">
            The request was rejected because KMS could not find the specified VPC endpoint service.
            Use <a>DescribeCustomKeyStores</a> to verify the VPC endpoint service name for the
            external key store. Also, confirm that the <c>Allow principals</c> list for the VPC
            endpoint service includes the KMS service principal for the Region, such as <c>cks.kms.us-east-1.amazonaws.com</c>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CreateCustomKeyStore">REST API Reference for CreateCustomKeyStore Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.CreateGrantAsync(Amazon.KeyManagementService.Model.CreateGrantRequest,System.Threading.CancellationToken)">
            <summary>
            Adds a grant to a KMS key. 
            
             
            <para>
            A <i>grant</i> is a policy instrument that allows Amazon Web Services principals to
            use KMS keys in cryptographic operations. It also can allow them to view a KMS key
            (<a>DescribeKey</a>) and create and manage grants. When authorizing access to a KMS
            key, grants are considered along with key policies and IAM policies. Grants are often
            used for temporary permissions because you can create one, use its permissions, and
            delete it without changing your key policies or IAM policies. 
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
            The <c>CreateGrant</c> operation returns a <c>GrantToken</c> and a <c>GrantId</c>.
            </para>
             <ul> <li> 
            <para>
            When you create, retire, or revoke a grant, there might be a brief delay, usually
            less than five minutes, until the grant is available throughout KMS. This state is
            known as <i>eventual consistency</i>. Once the grant has achieved eventual consistency,
            the grantee principal can use the permissions in the grant without identifying the
            grant. 
            </para>
             
            <para>
            However, to use the permissions in the grant immediately, use the <c>GrantToken</c>
            that <c>CreateGrant</c> returns. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            The <c>CreateGrant</c> operation also returns a <c>GrantId</c>. You can use the <c>GrantId</c>
            and a key identifier to identify the grant in the <a>RetireGrant</a> and <a>RevokeGrant</a>
            operations. To find the grant ID, use the <a>ListGrants</a> or <a>ListRetirableGrants</a>
            operations.
            </para>
             </li> </ul> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateGrant</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateGrant service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateGrant service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CreateGrant">REST API Reference for CreateGrant Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.CreateKeyAsync(Amazon.KeyManagementService.Model.CreateKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a unique customer managed <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#kms-keys">KMS
            key</a> in your Amazon Web Services account and Region. You can use a KMS key in cryptographic
            operations, such as encryption and signing. Some Amazon Web Services services let
            you use KMS keys that you create and manage to protect your service resources.
            
             
            <para>
            A KMS key is a logical representation of a cryptographic key. In addition to the key
            material used in cryptographic operations, a KMS key includes metadata, such as the
            key ID, key policy, creation date, description, and key state. For details, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/getting-started.html">Managing
            keys</a> in the <i>Key Management Service Developer Guide</i> 
            </para>
             
            <para>
            Use the parameters of <c>CreateKey</c> to specify the type of KMS key, the source
            of its key material, its key policy, description, tags, and other properties.
            </para>
             <note> 
            <para>
            KMS has replaced the term <i>customer master key (CMK)</i> with <i>KMS key</i> and
            <i>KMS key</i>. The concept has not changed. To prevent breaking changes, KMS is keeping
            some variations of this term.
            </para>
             </note> 
            <para>
            To create different types of KMS keys, use the following guidance:
            </para>
             <dl> <dt>Symmetric encryption KMS key</dt> <dd> 
            <para>
            By default, <c>CreateKey</c> creates a symmetric encryption KMS key with key material
            that KMS generates. This is the basic and most widely used type of KMS key, and provides
            the best performance.
            </para>
             
            <para>
            To create a symmetric encryption KMS key, you don't need to specify any parameters.
            The default value for <c>KeySpec</c>, <c>SYMMETRIC_DEFAULT</c>, the default value
            for <c>KeyUsage</c>, <c>ENCRYPT_DECRYPT</c>, and the default value for <c>Origin</c>,
            <c>AWS_KMS</c>, create a symmetric encryption KMS key with KMS key material.
            </para>
             
            <para>
            If you need a key for basic encryption and decryption or you are creating a KMS key
            to protect your resources in an Amazon Web Services service, create a symmetric encryption
            KMS key. The key material in a symmetric encryption key never leaves KMS unencrypted.
            You can use a symmetric encryption KMS key to encrypt and decrypt data up to 4,096
            bytes, but they are typically used to generate data keys and data keys pairs. For
            details, see <a>GenerateDataKey</a> and <a>GenerateDataKeyPair</a>.
            </para>
             
            <para>
             
            </para>
             </dd> <dt>Asymmetric KMS keys</dt> <dd> 
            <para>
            To create an asymmetric KMS key, use the <c>KeySpec</c> parameter to specify the type
            of key material in the KMS key. Then, use the <c>KeyUsage</c> parameter to determine
            whether the KMS key will be used to encrypt and decrypt or sign and verify. You can't
            change these properties after the KMS key is created.
            </para>
             
            <para>
            Asymmetric KMS keys contain an RSA key pair, Elliptic Curve (ECC) key pair, or an
            SM2 key pair (China Regions only). The private key in an asymmetric KMS key never
            leaves KMS unencrypted. However, you can use the <a>GetPublicKey</a> operation to
            download the public key so it can be used outside of KMS. KMS keys with RSA key pairs
            can be used to encrypt or decrypt data or sign and verify messages (but not both).
            KMS keys with NIST-recommended ECC key pairs can be used to sign and verify messages
            or derive key agreement secrets (but not both). KMS keys with <c>ECC_SECG_P256K1</c>
            can be used only to sign and verify messages. KMS keys with SM2 key pairs (China Regions
            only) can be used to either encrypt or decrypt data, sign and verify messages, or
            generate key agreement secrets. For information about asymmetric KMS keys, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             
            </para>
             </dd> <dt>HMAC KMS key</dt> <dd> 
            <para>
            To create an HMAC KMS key, set the <c>KeySpec</c> parameter to a key spec value for
            HMAC KMS keys. Then set the <c>KeyUsage</c> parameter to <c>GENERATE_VERIFY_MAC</c>.
            You must set the key usage even though <c>GENERATE_VERIFY_MAC</c> is the only valid
            key usage value for HMAC KMS keys. You can't change these properties after the KMS
            key is created.
            </para>
             
            <para>
            HMAC KMS keys are symmetric keys that never leave KMS unencrypted. You can use HMAC
            keys to generate (<a>GenerateMac</a>) and verify (<a>VerifyMac</a>) HMAC codes for
            messages up to 4096 bytes.
            </para>
             
            <para>
             
            </para>
             </dd> <dt>Multi-Region primary keys</dt> <dt>Imported key material</dt> <dd> 
            <para>
            To create a multi-Region <i>primary key</i> in the local Amazon Web Services Region,
            use the <c>MultiRegion</c> parameter with a value of <c>True</c>. To create a multi-Region
            <i>replica key</i>, that is, a KMS key with the same key ID and key material as a
            primary key, but in a different Amazon Web Services Region, use the <a>ReplicateKey</a>
            operation. To change a replica key to a primary key, and its primary key to a replica
            key, use the <a>UpdatePrimaryRegion</a> operation.
            </para>
             
            <para>
            You can create multi-Region KMS keys for all supported KMS key types: symmetric encryption
            KMS keys, HMAC KMS keys, asymmetric encryption KMS keys, and asymmetric signing KMS
            keys. You can also create multi-Region keys with imported key material. However, you
            can't create multi-Region keys in a custom key store.
            </para>
             
            <para>
            This operation supports <i>multi-Region keys</i>, an KMS feature that lets you create
            multiple interoperable KMS keys in different Amazon Web Services Regions. Because
            these KMS keys have the same key ID, key material, and other metadata, you can use
            them interchangeably to encrypt data in one Amazon Web Services Region and decrypt
            it in a different Amazon Web Services Region without re-encrypting the data or making
            a cross-Region call. For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             
            </para>
             </dd> <dd> 
            <para>
            To import your own key material into a KMS key, begin by creating a KMS key with no
            key material. To do this, use the <c>Origin</c> parameter of <c>CreateKey</c> with
            a value of <c>EXTERNAL</c>. Next, use <a>GetParametersForImport</a> operation to get
            a public key and import token. Use the wrapping public key to encrypt your key material.
            Then, use <a>ImportKeyMaterial</a> with your import token to import the key material.
            For step-by-step instructions, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            Key Material</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             
            <para>
            You can import key material into KMS keys of all supported KMS key types: symmetric
            encryption KMS keys, HMAC KMS keys, asymmetric encryption KMS keys, and asymmetric
            signing KMS keys. You can also create multi-Region keys with imported key material.
            However, you can't import key material into a KMS key in a custom key store.
            </para>
             
            <para>
            To create a multi-Region primary key with imported key material, use the <c>Origin</c>
            parameter of <c>CreateKey</c> with a value of <c>EXTERNAL</c> and the <c>MultiRegion</c>
            parameter with a value of <c>True</c>. To create replicas of the multi-Region primary
            key, use the <a>ReplicateKey</a> operation. For instructions, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-import.html
            ">Importing key material into multi-Region keys</a>. For more information about multi-Region
            keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             
            </para>
             </dd> <dt>Custom key store</dt> <dd> 
            <para>
            A <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> lets you protect your Amazon Web Services resources using keys in a
            backing key store that you own and manage. When you request a cryptographic operation
            with a KMS key in a custom key store, the operation is performed in the backing key
            store using its cryptographic keys.
            </para>
             
            <para>
            KMS supports <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key stores</a> backed by an CloudHSM cluster and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key stores</a> backed by an external key manager outside of Amazon Web Services. When
            you create a KMS key in an CloudHSM key store, KMS generates an encryption key in
            the CloudHSM cluster and associates it with the KMS key. When you create a KMS key
            in an external key store, you specify an existing encryption key in the external key
            manager.
            </para>
             <note> 
            <para>
            Some external key managers provide a simpler method for creating a KMS key in an external
            key store. For details, see your external key manager documentation.
            </para>
             </note> 
            <para>
            Before you create a KMS key in a custom key store, the <c>ConnectionState</c> of the
            key store must be <c>CONNECTED</c>. To connect the custom key store, use the <a>ConnectCustomKeyStore</a>
            operation. To find the <c>ConnectionState</c>, use the <a>DescribeCustomKeyStores</a>
            operation.
            </para>
             
            <para>
            To create a KMS key in a custom key store, use the <c>CustomKeyStoreId</c>. Use the
            default <c>KeySpec</c> value, <c>SYMMETRIC_DEFAULT</c>, and the default <c>KeyUsage</c>
            value, <c>ENCRYPT_DECRYPT</c> to create a symmetric encryption key. No other key type
            is supported in a custom key store.
            </para>
             
            <para>
            To create a KMS key in an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key store</a>, use the <c>Origin</c> parameter with a value of <c>AWS_CLOUDHSM</c>.
            The CloudHSM cluster that is associated with the custom key store must have at least
            two active HSMs in different Availability Zones in the Amazon Web Services Region.
            </para>
             
            <para>
            To create a KMS key in an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key store</a>, use the <c>Origin</c> parameter with a value of <c>EXTERNAL_KEY_STORE</c>
            and an <c>XksKeyId</c> parameter that identifies an existing external key.
            </para>
             <note> 
            <para>
            Some external key managers provide a simpler method for creating a KMS key in an external
            key store. For details, see your external key manager documentation.
            </para>
             </note> </dd> </dl> 
            <para>
             <b>Cross-account use</b>: No. You cannot use this operation to create a KMS key in
            a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateKey</a>
            (IAM policy). To use the <c>Tags</c> parameter, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a>
            (IAM policy). For examples and information about related permissions, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/iam-policies.html#iam-policy-example-create-key">Allow
            a user to create KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DescribeKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeys</a> 
            </para>
             </li> <li> 
            <para>
             <a>ScheduleKeyDeletion</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException">
            The request was rejected because the associated CloudHSM cluster did not meet the
            configuration requirements for an CloudHSM key store.
            
             <ul> <li> 
            <para>
            The CloudHSM cluster must be configured with private subnets in at least two different
            Availability Zones in the Region.
            </para>
             </li> <li> 
            <para>
            The <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">security
            group for the cluster</a> (cloudhsm-cluster-<i>&lt;cluster-id&gt;</i>-sg) must include
            inbound rules and outbound rules that allow TCP traffic on ports 2223-2225. The <b>Source</b>
            in the inbound rules and the <b>Destination</b> in the outbound rules must match the
            security group ID. These rules are set by default when you create the CloudHSM cluster.
            Do not delete or change them. To get information about a particular security group,
            use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html">DescribeSecurityGroups</a>
            operation.
            </para>
             </li> <li> 
            <para>
            The CloudHSM cluster must contain at least as many HSMs as the operation requires.
            To add HSMs, use the CloudHSM <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html">CreateHsm</a>
            operation.
            </para>
             
            <para>
            For the <a>CreateCustomKeyStore</a>, <a>UpdateCustomKeyStore</a>, and <a>CreateKey</a>
            operations, the CloudHSM cluster must have at least two active HSMs, each in a different
            Availability Zone. For the <a>ConnectCustomKeyStore</a> operation, the CloudHSM must
            contain at least one active HSM.
            </para>
             </li> </ul> 
            <para>
            For information about the requirements for an CloudHSM cluster that is associated
            with an CloudHSM key store, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">Assemble
            the Prerequisites</a> in the <i>Key Management Service Developer Guide</i>. For information
            about creating a private subnet for an CloudHSM cluster, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/create-subnets.html">Create
            a Private Subnet</a> in the <i>CloudHSM User Guide</i>. For information about cluster
            security groups, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">Configure
            a Default Security Group</a> in the <i> <i>CloudHSM User Guide</i> </i>. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException">
            The request was rejected because the specified policy is not syntactically or semantically
            correct.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.TagException">
            The request was rejected because one or more tags are not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksKeyAlreadyInUseException">
            The request was rejected because the (<c>XksKeyId</c>) is already associated with
            another KMS key in this external key store. Each KMS key in an external key store
            must be associated with a different external key.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksKeyInvalidConfigurationException">
            The request was rejected because the external key specified by the <c>XksKeyId</c>
            parameter did not meet the configuration requirements for an external key store.
            
             
            <para>
            The external key must be an AES-256 symmetric key that is enabled and performs encryption
            and decryption.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksKeyNotFoundException">
            The request was rejected because the external key store proxy could not find the external
            key. This exception is thrown when the value of the <c>XksKeyId</c> parameter doesn't
            identify a key in the external key manager associated with the external key proxy.
            
             
            <para>
            Verify that the <c>XksKeyId</c> represents an existing key in the external key manager.
            Use the key identifier that the external key store proxy uses to identify the key.
            For details, see the documentation provided with your external key store proxy or
            key manager.
            </para>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CreateKey">REST API Reference for CreateKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DecryptAsync(Amazon.KeyManagementService.Model.DecryptRequest,System.Threading.CancellationToken)">
            <summary>
            Decrypts ciphertext that was encrypted by a KMS key using any of the following operations:
            
             <ul> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyWithoutPlaintext</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPairWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
            You can use this operation to decrypt ciphertext that was encrypted under a symmetric
            encryption KMS key or an asymmetric encryption KMS key. When the KMS key is asymmetric,
            you must specify the KMS key and the encryption algorithm that was used to encrypt
            the ciphertext. For information about asymmetric KMS keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The <c>Decrypt</c> operation also decrypts ciphertext that was encrypted outside of
            KMS by the public key in an KMS asymmetric KMS key. However, it cannot decrypt symmetric
            ciphertext produced by other libraries, such as the <a href="https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/">Amazon
            Web Services Encryption SDK</a> or <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html">Amazon
            S3 client-side encryption</a>. These libraries return a ciphertext format that is
            incompatible with KMS.
            </para>
             
            <para>
            If the ciphertext was encrypted under a symmetric encryption KMS key, the <c>KeyId</c>
            parameter is optional. KMS can get this information from metadata that it adds to
            the symmetric ciphertext blob. This feature adds durability to your implementation
            by ensuring that authorized users can decrypt ciphertext decades after it was encrypted,
            even if they've lost track of the key ID. However, specifying the KMS key is always
            recommended as a best practice. When you use the <c>KeyId</c> parameter to specify
            a KMS key, KMS only uses the KMS key you specify. If the ciphertext was encrypted
            under a different KMS key, the <c>Decrypt</c> operation fails. This practice ensures
            that you use the KMS key that you intend.
            </para>
             
            <para>
            Whenever possible, use key policies to give users permission to call the <c>Decrypt</c>
            operation on a particular KMS key, instead of using &amp;IAM; policies. Otherwise,
            you might create an &amp;IAM; policy that gives the user <c>Decrypt</c> permission
            on all KMS keys. This user could decrypt ciphertext that was encrypted by KMS keys
            in other accounts if the key policy for the cross-account KMS key permits it. If you
            must use an IAM policy for <c>Decrypt</c> permissions, limit the user to particular
            KMS keys or particular trusted accounts. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/iam-policies.html#iam-policies-best-practices">Best
            practices for IAM policies</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <c>Decrypt</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>Decrypt</c> for a Nitro enclave, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. Instead of the plaintext
            data, the response includes the plaintext data encrypted with the public key from
            the attestation document (<c>CiphertextForRecipient</c>). For information about the
            interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. If you use the <c>KeyId</c> parameter to identify
            a KMS key in a different Amazon Web Services account, specify the key ARN or the alias
            ARN of the KMS key.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:Decrypt</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReEncrypt</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Decrypt service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Decrypt service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.IncorrectKeyException">
            The request was rejected because the specified KMS key cannot decrypt the data. The
            <c>KeyId</c> in a <a>Decrypt</a> request and the <c>SourceKeyId</c> in a <a>ReEncrypt</a>
            request must identify the same KMS key that was used to encrypt the ciphertext.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidCiphertextException">
            From the <a>Decrypt</a> or <a>ReEncrypt</a> operation, the request was rejected because
            the specified ciphertext, or additional authenticated data incorporated into the ciphertext,
            such as the encryption context, is corrupted, missing, or otherwise invalid.
            
             
            <para>
            From the <a>ImportKeyMaterial</a> operation, the request was rejected because KMS
            could not decrypt the encrypted (wrapped) key material. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/Decrypt">REST API Reference for Decrypt Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DeleteAliasAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified alias. 
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            Because an alias is not a property of a KMS key, you can delete and change the aliases
            of a KMS key without affecting the KMS key. Also, aliases do not appear in the response
            from the <a>DescribeKey</a> operation. To get the aliases of all KMS keys, use the
            <a>ListAliases</a> operation. 
            </para>
             
            <para>
            Each KMS key can have multiple aliases. To change the alias of a KMS key, use <a>DeleteAlias</a>
            to delete the current alias and <a>CreateAlias</a> to create a new alias. To associate
            an existing alias with a different KMS key, call <a>UpdateAlias</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on an alias in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteAlias</a>
            on the KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="aliasName">The alias to be deleted. The alias name must begin with <c>alias/</c> followed by the alias name, such as <c>alias/ExampleAlias</c>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteAlias service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DeleteAlias">REST API Reference for DeleteAlias Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DeleteAliasAsync(Amazon.KeyManagementService.Model.DeleteAliasRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified alias. 
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            Because an alias is not a property of a KMS key, you can delete and change the aliases
            of a KMS key without affecting the KMS key. Also, aliases do not appear in the response
            from the <a>DescribeKey</a> operation. To get the aliases of all KMS keys, use the
            <a>ListAliases</a> operation. 
            </para>
             
            <para>
            Each KMS key can have multiple aliases. To change the alias of a KMS key, use <a>DeleteAlias</a>
            to delete the current alias and <a>CreateAlias</a> to create a new alias. To associate
            an existing alias with a different KMS key, call <a>UpdateAlias</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on an alias in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteAlias</a>
            on the KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteAlias service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteAlias service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DeleteAlias">REST API Reference for DeleteAlias Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DeleteCustomKeyStoreAsync(Amazon.KeyManagementService.Model.DeleteCustomKeyStoreRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. This operation does not affect any backing elements of the custom key
            store. It does not delete the CloudHSM cluster that is associated with an CloudHSM
            key store, or affect any users or keys in the cluster. For an external key store,
            it does not affect the external key store proxy, external key manager, or any external
            keys.
            
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            The custom key store that you delete cannot contain any <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#kms_keys">KMS
            keys</a>. Before deleting the key store, verify that you will never need to use any
            of the KMS keys in the key store for any <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. Then, use <a>ScheduleKeyDeletion</a> to delete the KMS keys from the
            key store. After the required waiting period expires and all KMS keys are deleted
            from the custom key store, use <a>DisconnectCustomKeyStore</a> to disconnect the key
            store from KMS. Then, you can delete the custom key store.
            </para>
             
            <para>
            For keys in an CloudHSM key store, the <c>ScheduleKeyDeletion</c> operation makes
            a best effort to delete the key material from the associated cluster. However, you
            might need to manually <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key">delete
            the orphaned key material</a> from the cluster and its backups. KMS never creates,
            manages, or deletes cryptographic keys in the external key manager associated with
            an external key store. You must manage them using your external key manager tools.
            </para>
             
            <para>
            Instead of deleting the custom key store, consider using the <a>DisconnectCustomKeyStore</a>
            operation to disconnect the custom key store from its backing key store. While the
            key store is disconnected, you cannot create or use the KMS keys in the key store.
            But, you do not need to delete KMS keys and you can reconnect a disconnected custom
            key store at any time.
            </para>
             
            <para>
            If the operation succeeds, it returns a JSON object with no properties.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteCustomKeyStore</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteCustomKeyStore service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteCustomKeyStore service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreHasCMKsException">
            The request was rejected because the custom key store contains KMS keys. After verifying
            that you do not need to use the KMS keys, use the <a>ScheduleKeyDeletion</a> operation
            to delete the KMS keys. After they are deleted, you can delete the custom key store.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DeleteCustomKeyStore">REST API Reference for DeleteCustomKeyStore Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DeleteImportedKeyMaterialAsync(Amazon.KeyManagementService.Model.DeleteImportedKeyMaterialRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes key material that was previously imported. This operation makes the specified
            KMS key temporarily unusable. To restore the usability of the KMS key, reimport the
            same key material. For more information about importing key material into KMS, see
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            Key Material</a> in the <i>Key Management Service Developer Guide</i>.
            
             
            <para>
            When the specified KMS key is in the <c>PendingDeletion</c> state, this operation
            does not change the KMS key's state. Otherwise, it changes the KMS key's state to
            <c>PendingImport</c>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteImportedKeyMaterial</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>GetParametersForImport</a> 
            </para>
             </li> <li> 
            <para>
             <a>ImportKeyMaterial</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteImportedKeyMaterial service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteImportedKeyMaterial service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DeleteImportedKeyMaterial">REST API Reference for DeleteImportedKeyMaterial Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DeriveSharedSecretAsync(Amazon.KeyManagementService.Model.DeriveSharedSecretRequest,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeriveSharedSecret service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeriveSharedSecret service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DeriveSharedSecret">REST API Reference for DeriveSharedSecret Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DescribeCustomKeyStoresAsync(Amazon.KeyManagementService.Model.DescribeCustomKeyStoresRequest,System.Threading.CancellationToken)">
            <summary>
            Gets information about <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> in the account and Region.
            
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            By default, this operation returns information about all custom key stores in the
            account and Region. To get only information about a particular custom key store, use
            either the <c>CustomKeyStoreName</c> or <c>CustomKeyStoreId</c> parameter (but not
            both).
            </para>
             
            <para>
            To determine whether the custom key store is connected to its CloudHSM cluster or
            external key store proxy, use the <c>ConnectionState</c> element in the response.
            If an attempt to connect the custom key store failed, the <c>ConnectionState</c> value
            is <c>FAILED</c> and the <c>ConnectionErrorCode</c> element in the response indicates
            the cause of the failure. For help interpreting the <c>ConnectionErrorCode</c>, see
            <a>CustomKeyStoresListEntry</a>.
            </para>
             
            <para>
            Custom key stores have a <c>DISCONNECTED</c> connection state if the key store has
            never been connected or you used the <a>DisconnectCustomKeyStore</a> operation to
            disconnect it. Otherwise, the connection state is CONNECTED. If your custom key store
            connection state is <c>CONNECTED</c> but you are having trouble using it, verify that
            the backing store is active and available. For an CloudHSM key store, verify that
            the associated CloudHSM cluster is active and contains the minimum number of HSMs
            required for the operation, if any. For an external key store, verify that the external
            key store proxy and its associated external key manager are reachable and enabled.
            </para>
             
            <para>
             For help repairing your CloudHSM key store, see the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            CloudHSM key stores</a>. For help repairing your external key store, see the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/xks-troubleshooting.html">Troubleshooting
            external key stores</a>. Both topics are in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DescribeCustomKeyStores</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeCustomKeyStores service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeCustomKeyStores service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DescribeCustomKeyStores">REST API Reference for DescribeCustomKeyStores Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DescribeKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Provides detailed information about a KMS key. You can run <c>DescribeKey</c> on a
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a> or an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed key</a>.
            
             
            <para>
            This detailed information includes the key ARN, creation date (and deletion date,
            if applicable), the key state, and the origin and expiration date (if any) of the
            key material. It includes fields, like <c>KeySpec</c>, that help you distinguish different
            types of KMS keys. It also displays the key usage (encryption, signing, or generating
            and verifying MACs) and the algorithms that the KMS key supports. 
            </para>
             
            <para>
            For <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">multi-Region
            keys</a>, <c>DescribeKey</c> displays the primary key and all related replica keys.
            For KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key stores</a>, it includes information about the key store, such as the key store
            ID and the CloudHSM cluster ID. For KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key stores</a>, it includes the custom key store ID and the ID of the external key.
            </para>
             
            <para>
             <c>DescribeKey</c> does not return the following information:
            </para>
             <ul> <li> 
            <para>
            Aliases associated with the KMS key. To get this information, use <a>ListAliases</a>.
            </para>
             </li> <li> 
            <para>
            Whether automatic key rotation is enabled on the KMS key. To get this information,
            use <a>GetKeyRotationStatus</a>. Also, some key states prevent a KMS key from being
            automatically rotated. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotate-keys-how-it-works">How
            Automatic Key Rotation Works</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
            Tags on the KMS key. To get this information, use <a>ListResourceTags</a>.
            </para>
             </li> <li> 
            <para>
            Key policies and grants on the KMS key. To get this information, use <a>GetKeyPolicy</a>
            and <a>ListGrants</a>.
            </para>
             </li> </ul> 
            <para>
            In general, <c>DescribeKey</c> is a non-mutating operation. It returns data about
            KMS keys, but doesn't change them. However, Amazon Web Services services use <c>DescribeKey</c>
            to create <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed keys</a> from a <i>predefined Amazon Web Services alias</i> with
            no key ID.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DescribeKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>GetKeyPolicy</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeys</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Describes the specified KMS key.  If you specify a predefined Amazon Web Services alias (an Amazon Web Services alias with no key ID), KMS associates the alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html##aws-managed-cmk">Amazon Web Services managed key</a> and returns its <c>KeyId</c> and <c>Arn</c> in the response. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Alias name: <c>alias/ExampleAlias</c>  </li> <li> Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DescribeKey">REST API Reference for DescribeKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DescribeKeyAsync(Amazon.KeyManagementService.Model.DescribeKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Provides detailed information about a KMS key. You can run <c>DescribeKey</c> on a
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a> or an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed key</a>.
            
             
            <para>
            This detailed information includes the key ARN, creation date (and deletion date,
            if applicable), the key state, and the origin and expiration date (if any) of the
            key material. It includes fields, like <c>KeySpec</c>, that help you distinguish different
            types of KMS keys. It also displays the key usage (encryption, signing, or generating
            and verifying MACs) and the algorithms that the KMS key supports. 
            </para>
             
            <para>
            For <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">multi-Region
            keys</a>, <c>DescribeKey</c> displays the primary key and all related replica keys.
            For KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key stores</a>, it includes information about the key store, such as the key store
            ID and the CloudHSM cluster ID. For KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key stores</a>, it includes the custom key store ID and the ID of the external key.
            </para>
             
            <para>
             <c>DescribeKey</c> does not return the following information:
            </para>
             <ul> <li> 
            <para>
            Aliases associated with the KMS key. To get this information, use <a>ListAliases</a>.
            </para>
             </li> <li> 
            <para>
            Whether automatic key rotation is enabled on the KMS key. To get this information,
            use <a>GetKeyRotationStatus</a>. Also, some key states prevent a KMS key from being
            automatically rotated. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotate-keys-how-it-works">How
            Automatic Key Rotation Works</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
            Tags on the KMS key. To get this information, use <a>ListResourceTags</a>.
            </para>
             </li> <li> 
            <para>
            Key policies and grants on the KMS key. To get this information, use <a>GetKeyPolicy</a>
            and <a>ListGrants</a>.
            </para>
             </li> </ul> 
            <para>
            In general, <c>DescribeKey</c> is a non-mutating operation. It returns data about
            KMS keys, but doesn't change them. However, Amazon Web Services services use <c>DescribeKey</c>
            to create <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed keys</a> from a <i>predefined Amazon Web Services alias</i> with
            no key ID.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DescribeKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>GetKeyPolicy</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeys</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DescribeKey">REST API Reference for DescribeKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DisableKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the state of a KMS key to disabled. This change temporarily prevents use of the
            KMS key for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. 
            
             
            <para>
            For more information about how key state affects the use of a KMS key, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisableKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>EnableKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Identifies the KMS key to disable. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisableKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DisableKey">REST API Reference for DisableKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DisableKeyAsync(Amazon.KeyManagementService.Model.DisableKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Sets the state of a KMS key to disabled. This change temporarily prevents use of the
            KMS key for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. 
            
             
            <para>
            For more information about how key state affects the use of a KMS key, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisableKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>EnableKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DisableKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisableKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DisableKey">REST API Reference for DisableKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DisableKeyRotationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Disables <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            rotation of the key material</a> of the specified symmetric encryption KMS key.
            
             
            <para>
            Automatic key rotation is supported only on symmetric encryption KMS keys. You cannot
            enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key.
            </para>
             
            <para>
            You can enable (<a>EnableKeyRotation</a>) and disable automatic rotation of the key
            material in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed KMS keys</a>. Key material rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a> is not configurable. KMS always rotates the key
            material for every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> varies.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years to every year. For details, see <a>EnableKeyRotation</a>.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisableKeyRotation</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Identifies a symmetric encryption KMS key. You cannot enable or disable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html#asymmetric-cmks">asymmetric KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisableKeyRotation service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DisableKeyRotation">REST API Reference for DisableKeyRotation Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DisableKeyRotationAsync(Amazon.KeyManagementService.Model.DisableKeyRotationRequest,System.Threading.CancellationToken)">
            <summary>
            Disables <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            rotation of the key material</a> of the specified symmetric encryption KMS key.
            
             
            <para>
            Automatic key rotation is supported only on symmetric encryption KMS keys. You cannot
            enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key.
            </para>
             
            <para>
            You can enable (<a>EnableKeyRotation</a>) and disable automatic rotation of the key
            material in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed KMS keys</a>. Key material rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a> is not configurable. KMS always rotates the key
            material for every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> varies.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years to every year. For details, see <a>EnableKeyRotation</a>.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisableKeyRotation</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DisableKeyRotation service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisableKeyRotation service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DisableKeyRotation">REST API Reference for DisableKeyRotation Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DisconnectCustomKeyStoreAsync(Amazon.KeyManagementService.Model.DisconnectCustomKeyStoreRequest,System.Threading.CancellationToken)">
            <summary>
            Disconnects the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> from its backing key store. This operation disconnects an CloudHSM key
            store from its associated CloudHSM cluster or disconnects an external key store from
            the external key store proxy that communicates with your external key manager.
            
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            While a custom key store is disconnected, you can manage the custom key store and
            its KMS keys, but you cannot create or use its KMS keys. You can reconnect the custom
            key store at any time.
            </para>
             <note> 
            <para>
            While a custom key store is disconnected, all attempts to create KMS keys in the custom
            key store or to use existing KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a> will fail. This action can prevent users from storing and accessing
            sensitive data.
            </para>
             </note> 
            <para>
            When you disconnect a custom key store, its <c>ConnectionState</c> changes to <c>Disconnected</c>.
            To find the connection state of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation. To reconnect a custom key store, use the <a>ConnectCustomKeyStore</a> operation.
            </para>
             
            <para>
            If the operation succeeds, it returns a JSON object with no properties.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisconnectCustomKeyStore</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DisconnectCustomKeyStore service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisconnectCustomKeyStore service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DisconnectCustomKeyStore">REST API Reference for DisconnectCustomKeyStore Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.EnableKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the key state of a KMS key to enabled. This allows you to use the KMS key for
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. 
            
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:EnableKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>DisableKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Identifies the KMS key to enable. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the EnableKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/EnableKey">REST API Reference for EnableKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.EnableKeyAsync(Amazon.KeyManagementService.Model.EnableKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Sets the key state of a KMS key to enabled. This allows you to use the KMS key for
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. 
            
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:EnableKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>DisableKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the EnableKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the EnableKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/EnableKey">REST API Reference for EnableKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.EnableKeyRotationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Enables <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-enable-disable">automatic
            rotation of the key material</a> of the specified symmetric encryption KMS key. 
            
             
            <para>
            By default, when you enable automatic rotation of a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed KMS key</a>, KMS rotates the key material of the KMS key one year (approximately
            365 days) from the enable date and every year thereafter. You can use the optional
            <c>RotationPeriodInDays</c> parameter to specify a custom rotation period when you
            enable key rotation, or you can use <c>RotationPeriodInDays</c> to modify the rotation
            period of a key that you previously enabled automatic key rotation on.
            </para>
             
            <para>
            You can monitor rotation of the key material for your KMS keys in CloudTrail and Amazon
            CloudWatch. To disable rotation of the key material in a customer managed KMS key,
            use the <a>DisableKeyRotation</a> operation. You can use the <a>GetKeyRotationStatus</a>
            operation to identify any in progress rotations. You can use the <a>ListKeyRotations</a>
            operation to view the details of completed rotations.
            </para>
             
            <para>
            Automatic key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key. 
            </para>
             
            <para>
            You cannot enable or disable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a>. KMS always rotates the key material of Amazon Web
            Services managed keys every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> is managed by the Amazon Web Services service that
            owns the key.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years (approximately 1,095 days) to every year (approximately 365
            days).
            </para>
             
            <para>
            New Amazon Web Services managed keys are automatically rotated one year after they
            are created, and approximately every year thereafter. 
            </para>
             
            <para>
            Existing Amazon Web Services managed keys are automatically rotated one year after
            their most recent rotation, and every year thereafter.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:EnableKeyRotation</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             <note> 
            <para>
            You can perform on-demand (<a>RotateKeyOnDemand</a>) rotation of the key material
            in customer managed KMS keys, regardless of whether or not automatic key rotation
            is enabled.
            </para>
             </note> </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Identifies a symmetric encryption KMS key. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region keys</a>, set the property on the primary key. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the EnableKeyRotation service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/EnableKeyRotation">REST API Reference for EnableKeyRotation Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.EnableKeyRotationAsync(Amazon.KeyManagementService.Model.EnableKeyRotationRequest,System.Threading.CancellationToken)">
            <summary>
            Enables <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-enable-disable">automatic
            rotation of the key material</a> of the specified symmetric encryption KMS key. 
            
             
            <para>
            By default, when you enable automatic rotation of a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed KMS key</a>, KMS rotates the key material of the KMS key one year (approximately
            365 days) from the enable date and every year thereafter. You can use the optional
            <c>RotationPeriodInDays</c> parameter to specify a custom rotation period when you
            enable key rotation, or you can use <c>RotationPeriodInDays</c> to modify the rotation
            period of a key that you previously enabled automatic key rotation on.
            </para>
             
            <para>
            You can monitor rotation of the key material for your KMS keys in CloudTrail and Amazon
            CloudWatch. To disable rotation of the key material in a customer managed KMS key,
            use the <a>DisableKeyRotation</a> operation. You can use the <a>GetKeyRotationStatus</a>
            operation to identify any in progress rotations. You can use the <a>ListKeyRotations</a>
            operation to view the details of completed rotations.
            </para>
             
            <para>
            Automatic key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key. 
            </para>
             
            <para>
            You cannot enable or disable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a>. KMS always rotates the key material of Amazon Web
            Services managed keys every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> is managed by the Amazon Web Services service that
            owns the key.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years (approximately 1,095 days) to every year (approximately 365
            days).
            </para>
             
            <para>
            New Amazon Web Services managed keys are automatically rotated one year after they
            are created, and approximately every year thereafter. 
            </para>
             
            <para>
            Existing Amazon Web Services managed keys are automatically rotated one year after
            their most recent rotation, and every year thereafter.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:EnableKeyRotation</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             <note> 
            <para>
            You can perform on-demand (<a>RotateKeyOnDemand</a>) rotation of the key material
            in customer managed KMS keys, regardless of whether or not automatic key rotation
            is enabled.
            </para>
             </note> </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the EnableKeyRotation service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the EnableKeyRotation service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/EnableKeyRotation">REST API Reference for EnableKeyRotation Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.EncryptAsync(Amazon.KeyManagementService.Model.EncryptRequest,System.Threading.CancellationToken)">
            <summary>
            Encrypts plaintext of up to 4,096 bytes using a KMS key. You can use a symmetric or
            asymmetric KMS key with a <c>KeyUsage</c> of <c>ENCRYPT_DECRYPT</c>.
            
             
            <para>
            You can use this operation to encrypt small amounts of arbitrary data, such as a personal
            identifier or database password, or other sensitive information. You don't need to
            use the <c>Encrypt</c> operation to encrypt a data key. The <a>GenerateDataKey</a>
            and <a>GenerateDataKeyPair</a> operations return a plaintext data key and an encrypted
            copy of that data key.
            </para>
             
            <para>
            If you use a symmetric encryption KMS key, you can use an encryption context to add
            additional security to your encryption operation. If you specify an <c>EncryptionContext</c>
            when encrypting data, you must specify the same encryption context (a case-sensitive
            exact match) when decrypting the data. Otherwise, the request to decrypt fails with
            an <c>InvalidCiphertextException</c>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            If you specify an asymmetric KMS key, you must also specify the encryption algorithm.
            The algorithm must be compatible with the KMS key spec.
            </para>
             <important> 
            <para>
            When you use an asymmetric KMS key to encrypt or reencrypt data, be sure to record
            the KMS key and encryption algorithm that you choose. You will be required to provide
            the same KMS key and encryption algorithm when you decrypt the data. If the KMS key
            and algorithm do not match the values used to encrypt the data, the decrypt operation
            fails.
            </para>
             
            <para>
            You are not required to supply the key ID and encryption algorithm when you decrypt
            with symmetric encryption KMS keys because KMS stores this information in the ciphertext
            blob. KMS cannot store metadata in ciphertext generated with asymmetric keys. The
            standard format for asymmetric key ciphertext does not include configurable fields.
            </para>
             </important> 
            <para>
            The maximum size of the data that you can encrypt varies with the type of KMS key
            and the encryption algorithm that you choose.
            </para>
             <ul> <li> 
            <para>
            Symmetric encryption KMS keys
            </para>
             <ul> <li> 
            <para>
             <c>SYMMETRIC_DEFAULT</c>: 4096 bytes
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>RSA_2048</c> 
            </para>
             <ul> <li> 
            <para>
             <c>RSAES_OAEP_SHA_1</c>: 214 bytes
            </para>
             </li> <li> 
            <para>
             <c>RSAES_OAEP_SHA_256</c>: 190 bytes
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>RSA_3072</c> 
            </para>
             <ul> <li> 
            <para>
             <c>RSAES_OAEP_SHA_1</c>: 342 bytes
            </para>
             </li> <li> 
            <para>
             <c>RSAES_OAEP_SHA_256</c>: 318 bytes
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>RSA_4096</c> 
            </para>
             <ul> <li> 
            <para>
             <c>RSAES_OAEP_SHA_1</c>: 470 bytes
            </para>
             </li> <li> 
            <para>
             <c>RSAES_OAEP_SHA_256</c>: 446 bytes
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>SM2PKE</c>: 1024 bytes (China Regions only)
            </para>
             </li> </ul> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:Encrypt</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Encrypt service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Encrypt service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/Encrypt">REST API Reference for Encrypt Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GenerateDataKeyAsync(Amazon.KeyManagementService.Model.GenerateDataKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a unique symmetric data key for use outside of KMS. This operation returns
            a plaintext copy of the data key and a copy that is encrypted under a symmetric encryption
            KMS key that you specify. The bytes in the plaintext key are random; they are not
            related to the caller or the KMS key. You can use the plaintext key to encrypt your
            data outside of KMS and store the encrypted data key with the encrypted data.
            
             
            <para>
            To generate a data key, specify the symmetric encryption KMS key that will be used
            to encrypt the data key. You cannot use an asymmetric KMS key to encrypt data keys.
            To get the type of your KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            You must also specify the length of the data key. Use either the <c>KeySpec</c> or
            <c>NumberOfBytes</c> parameters (but not both). For 128-bit and 256-bit data keys,
            use the <c>KeySpec</c> parameter.
            </para>
             
            <para>
            To generate a 128-bit SM4 data key (China Regions only), specify a <c>KeySpec</c>
            value of <c>AES_128</c> or a <c>NumberOfBytes</c> value of <c>16</c>. The symmetric
            encryption key used in China Regions to encrypt your data key is an SM4 encryption
            key.
            </para>
             
            <para>
            To get only an encrypted copy of the data key, use <a>GenerateDataKeyWithoutPlaintext</a>.
            To generate an asymmetric data key pair, use the <a>GenerateDataKeyPair</a> or <a>GenerateDataKeyPairWithoutPlaintext</a>
            operation. To get a cryptographically secure random byte string, use <a>GenerateRandom</a>.
            </para>
             
            <para>
            You can use an optional encryption context to add additional security to the encryption
            operation. If you specify an <c>EncryptionContext</c>, you must specify the same encryption
            context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise,
            the request to decrypt fails with an <c>InvalidCiphertextException</c>. For more information,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <c>GenerateDataKey</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>GenerateDataKey</c> for an Amazon Web Services Nitro enclave,
            use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. <c>GenerateDataKey</c>
            returns a copy of the data key encrypted under the specified KMS key, as usual. But
            instead of a plaintext copy of the data key, the response includes a copy of the data
            key encrypted under the public key from the attestation document (<c>CiphertextForRecipient</c>).
            For information about the interaction between KMS and Amazon Web Services Nitro Enclaves,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>..
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>How to use your data key</b> 
            </para>
             
            <para>
            We recommend that you use the following pattern to encrypt data locally in your application.
            You can write your own code or use a client-side encryption library, such as the <a
            href="https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/">Amazon Web
            Services Encryption SDK</a>, the <a href="https://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/">Amazon
            DynamoDB Encryption Client</a>, or <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html">Amazon
            S3 client-side encryption</a> to do these tasks for you.
            </para>
             
            <para>
            To encrypt data outside of KMS:
            </para>
             <ol> <li> 
            <para>
            Use the <c>GenerateDataKey</c> operation to get a data key.
            </para>
             </li> <li> 
            <para>
            Use the plaintext data key (in the <c>Plaintext</c> field of the response) to encrypt
            your data outside of KMS. Then erase the plaintext data key from memory.
            </para>
             </li> <li> 
            <para>
            Store the encrypted data key (in the <c>CiphertextBlob</c> field of the response)
            with the encrypted data.
            </para>
             </li> </ol> 
            <para>
            To decrypt data outside of KMS:
            </para>
             <ol> <li> 
            <para>
            Use the <a>Decrypt</a> operation to decrypt the encrypted data key. The operation
            returns a plaintext copy of the data key.
            </para>
             </li> <li> 
            <para>
            Use the plaintext data key to decrypt data outside of KMS, then erase the plaintext
            data key from memory.
            </para>
             </li> </ol> 
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateDataKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPairWithoutPlaintext</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GenerateDataKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateDataKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateDataKey">REST API Reference for GenerateDataKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GenerateDataKeyPairAsync(Amazon.KeyManagementService.Model.GenerateDataKeyPairRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a unique asymmetric data key pair for use outside of KMS. This operation returns
            a plaintext public key, a plaintext private key, and a copy of the private key that
            is encrypted under the symmetric encryption KMS key you specify. You can use the data
            key pair to perform asymmetric cryptography and implement digital signatures outside
            of KMS. The bytes in the keys are random; they are not related to the caller or to
            the KMS key that is used to encrypt the private key. 
            
             
            <para>
            You can use the public key that <c>GenerateDataKeyPair</c> returns to encrypt data
            or verify a signature outside of KMS. Then, store the encrypted private key with the
            data. When you are ready to decrypt data or sign a message, you can use the <a>Decrypt</a>
            operation to decrypt the encrypted private key.
            </para>
             
            <para>
            To generate a data key pair, you must specify a symmetric encryption KMS key to encrypt
            the private key in a data key pair. You cannot use an asymmetric KMS key or a KMS
            key in a custom key store. To get the type and origin of your KMS key, use the <a>DescribeKey</a>
            operation. 
            </para>
             
            <para>
            Use the <c>KeyPairSpec</c> parameter to choose an RSA or Elliptic Curve (ECC) data
            key pair. In China Regions, you can also choose an SM2 data key pair. KMS recommends
            that you use ECC key pairs for signing, and use RSA and SM2 key pairs for either encryption
            or signing, but not both. However, KMS cannot enforce any restrictions on the use
            of data key pairs outside of KMS.
            </para>
             
            <para>
            If you are using the data key pair to encrypt data, or for any operation where you
            don't immediately need a private key, consider using the <a>GenerateDataKeyPairWithoutPlaintext</a>
            operation. <c>GenerateDataKeyPairWithoutPlaintext</c> returns a plaintext public key
            and an encrypted private key, but omits the plaintext private key that you need only
            to decrypt ciphertext or sign a message. Later, when you need to decrypt the data
            or sign a message, use the <a>Decrypt</a> operation to decrypt the encrypted private
            key in the data key pair.
            </para>
             
            <para>
             <c>GenerateDataKeyPair</c> returns a unique data key pair for each request. The bytes
            in the keys are random; they are not related to the caller or the KMS key that is
            used to encrypt the private key. The public key is a DER-encoded X.509 SubjectPublicKeyInfo,
            as specified in <a href="https://tools.ietf.org/html/rfc5280">RFC 5280</a>. The private
            key is a DER-encoded PKCS8 PrivateKeyInfo, as specified in <a href="https://tools.ietf.org/html/rfc5958">RFC
            5958</a>.
            </para>
             
            <para>
             <c>GenerateDataKeyPair</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>GenerateDataKeyPair</c> for an Amazon Web Services Nitro enclave,
            use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. <c>GenerateDataKeyPair</c>
            returns the public data key and a copy of the private data key encrypted under the
            specified KMS key, as usual. But instead of a plaintext copy of the private data key
            (<c>PrivateKeyPlaintext</c>), the response includes a copy of the private data key
            encrypted under the public key from the attestation document (<c>CiphertextForRecipient</c>).
            For information about the interaction between KMS and Amazon Web Services Nitro Enclaves,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>..
            </para>
             
            <para>
            You can use an optional encryption context to add additional security to the encryption
            operation. If you specify an <c>EncryptionContext</c>, you must specify the same encryption
            context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise,
            the request to decrypt fails with an <c>InvalidCiphertextException</c>. For more information,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateDataKeyPair</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPairWithoutPlaintext</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GenerateDataKeyPair service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateDataKeyPair service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateDataKeyPair">REST API Reference for GenerateDataKeyPair Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GenerateDataKeyPairWithoutPlaintextAsync(Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a unique asymmetric data key pair for use outside of KMS. This operation returns
            a plaintext public key and a copy of the private key that is encrypted under the symmetric
            encryption KMS key you specify. Unlike <a>GenerateDataKeyPair</a>, this operation
            does not return a plaintext private key. The bytes in the keys are random; they are
            not related to the caller or to the KMS key that is used to encrypt the private key.
            
            
             
            <para>
            You can use the public key that <c>GenerateDataKeyPairWithoutPlaintext</c> returns
            to encrypt data or verify a signature outside of KMS. Then, store the encrypted private
            key with the data. When you are ready to decrypt data or sign a message, you can use
            the <a>Decrypt</a> operation to decrypt the encrypted private key.
            </para>
             
            <para>
            To generate a data key pair, you must specify a symmetric encryption KMS key to encrypt
            the private key in a data key pair. You cannot use an asymmetric KMS key or a KMS
            key in a custom key store. To get the type and origin of your KMS key, use the <a>DescribeKey</a>
            operation. 
            </para>
             
            <para>
            Use the <c>KeyPairSpec</c> parameter to choose an RSA or Elliptic Curve (ECC) data
            key pair. In China Regions, you can also choose an SM2 data key pair. KMS recommends
            that you use ECC key pairs for signing, and use RSA and SM2 key pairs for either encryption
            or signing, but not both. However, KMS cannot enforce any restrictions on the use
            of data key pairs outside of KMS.
            </para>
             
            <para>
             <c>GenerateDataKeyPairWithoutPlaintext</c> returns a unique data key pair for each
            request. The bytes in the key are not related to the caller or KMS key that is used
            to encrypt the private key. The public key is a DER-encoded X.509 SubjectPublicKeyInfo,
            as specified in <a href="https://tools.ietf.org/html/rfc5280">RFC 5280</a>.
            </para>
             
            <para>
            You can use an optional encryption context to add additional security to the encryption
            operation. If you specify an <c>EncryptionContext</c>, you must specify the same encryption
            context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise,
            the request to decrypt fails with an <c>InvalidCiphertextException</c>. For more information,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateDataKeyPairWithoutPlaintext</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GenerateDataKeyPairWithoutPlaintext service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateDataKeyPairWithoutPlaintext service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateDataKeyPairWithoutPlaintext">REST API Reference for GenerateDataKeyPairWithoutPlaintext Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GenerateDataKeyWithoutPlaintextAsync(Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a unique symmetric data key for use outside of KMS. This operation returns
            a data key that is encrypted under a symmetric encryption KMS key that you specify.
            The bytes in the key are random; they are not related to the caller or to the KMS
            key.
            
             
            <para>
             <c>GenerateDataKeyWithoutPlaintext</c> is identical to the <a>GenerateDataKey</a>
            operation except that it does not return a plaintext copy of the data key. 
            </para>
             
            <para>
            This operation is useful for systems that need to encrypt data at some point, but
            not immediately. When you need to encrypt the data, you call the <a>Decrypt</a> operation
            on the encrypted copy of the key.
            </para>
             
            <para>
            It's also useful in distributed systems with different levels of trust. For example,
            you might store encrypted data in containers. One component of your system creates
            new containers and stores an encrypted data key with each container. Then, a different
            component puts the data into the containers. That component first decrypts the data
            key, uses the plaintext data key to encrypt data, puts the encrypted data into the
            container, and then destroys the plaintext data key. In this system, the component
            that creates the containers never sees the plaintext data key.
            </para>
             
            <para>
            To request an asymmetric data key pair, use the <a>GenerateDataKeyPair</a> or <a>GenerateDataKeyPairWithoutPlaintext</a>
            operations.
            </para>
             
            <para>
            To generate a data key, you must specify the symmetric encryption KMS key that is
            used to encrypt the data key. You cannot use an asymmetric KMS key or a key in a custom
            key store to generate a data key. To get the type of your KMS key, use the <a>DescribeKey</a>
            operation.
            </para>
             
            <para>
            You must also specify the length of the data key. Use either the <c>KeySpec</c> or
            <c>NumberOfBytes</c> parameters (but not both). For 128-bit and 256-bit data keys,
            use the <c>KeySpec</c> parameter.
            </para>
             
            <para>
            To generate an SM4 data key (China Regions only), specify a <c>KeySpec</c> value of
            <c>AES_128</c> or <c>NumberOfBytes</c> value of <c>16</c>. The symmetric encryption
            key used in China Regions to encrypt your data key is an SM4 encryption key.
            </para>
             
            <para>
            If the operation succeeds, you will find the encrypted copy of the data key in the
            <c>CiphertextBlob</c> field.
            </para>
             
            <para>
            You can use an optional encryption context to add additional security to the encryption
            operation. If you specify an <c>EncryptionContext</c>, you must specify the same encryption
            context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise,
            the request to decrypt fails with an <c>InvalidCiphertextException</c>. For more information,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateDataKeyWithoutPlaintext</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPairWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GenerateDataKeyWithoutPlaintext service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateDataKeyWithoutPlaintext service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateDataKeyWithoutPlaintext">REST API Reference for GenerateDataKeyWithoutPlaintext Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GenerateMacAsync(Amazon.KeyManagementService.Model.GenerateMacRequest,System.Threading.CancellationToken)">
            <summary>
            Generates a hash-based message authentication code (HMAC) for a message using an HMAC
            KMS key and a MAC algorithm that the key supports. HMAC KMS keys and the HMAC algorithms
            that KMS uses conform to industry standards defined in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC
            2104</a>.
            
             
            <para>
            You can use value that GenerateMac returns in the <a>VerifyMac</a> operation to demonstrate
            that the original message has not changed. Also, because a secret key is used to create
            the hash, you can verify that the party that generated the hash has the required secret
            key. You can also use the raw result to implement HMAC-based algorithms such as key
            derivation functions. This operation is part of KMS support for HMAC KMS keys. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            keys in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             <note> 
            <para>
            Best practices recommend that you limit the time during which any signing mechanism,
            including an HMAC, is effective. This deters an attack where the actor uses a signed
            message to establish validity repeatedly or long after the message is superseded.
            HMAC tags do not include a timestamp, but you can include a timestamp in the token
            or message to help you detect when its time to refresh the HMAC. 
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateMac</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>VerifyMac</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GenerateMac service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateMac service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateMac">REST API Reference for GenerateMac Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GenerateRandomAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a random byte string that is cryptographically secure.
            
             
            <para>
            You must use the <c>NumberOfBytes</c> parameter to specify the length of the random
            byte string. There is no default value for string length.
            </para>
             
            <para>
            By default, the random byte string is generated in KMS. To generate the byte string
            in the CloudHSM cluster associated with an CloudHSM key store, use the <c>CustomKeyStoreId</c>
            parameter.
            </para>
             
            <para>
             <c>GenerateRandom</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>GenerateRandom</c> for a Nitro enclave, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. Instead of plaintext
            bytes, the response includes the plaintext bytes encrypted under the public key from
            the attestation document (<c>CiphertextForRecipient</c>).For information about the
            interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            For more information about entropy and random number generation, see <a href="https://docs.aws.amazon.com/kms/latest/cryptographic-details/">Key
            Management Service Cryptographic Details</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Not applicable. <c>GenerateRandom</c> does not use any
            account-specific resources, such as KMS keys.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateRandom</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="numberOfBytes">The length of the random byte string. This parameter is required.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateRandom service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateRandom">REST API Reference for GenerateRandom Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GenerateRandomAsync(Amazon.KeyManagementService.Model.GenerateRandomRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a random byte string that is cryptographically secure.
            
             
            <para>
            You must use the <c>NumberOfBytes</c> parameter to specify the length of the random
            byte string. There is no default value for string length.
            </para>
             
            <para>
            By default, the random byte string is generated in KMS. To generate the byte string
            in the CloudHSM cluster associated with an CloudHSM key store, use the <c>CustomKeyStoreId</c>
            parameter.
            </para>
             
            <para>
             <c>GenerateRandom</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>GenerateRandom</c> for a Nitro enclave, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. Instead of plaintext
            bytes, the response includes the plaintext bytes encrypted under the public key from
            the attestation document (<c>CiphertextForRecipient</c>).For information about the
            interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            For more information about entropy and random number generation, see <a href="https://docs.aws.amazon.com/kms/latest/cryptographic-details/">Key
            Management Service Cryptographic Details</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Not applicable. <c>GenerateRandom</c> does not use any
            account-specific resources, such as KMS keys.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateRandom</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GenerateRandom service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateRandom service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateRandom">REST API Reference for GenerateRandom Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GetKeyPolicyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a key policy attached to the specified KMS key.
            
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetKeyPolicy</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html">PutKeyPolicy</a>
            
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Gets the key policy for the specified KMS key. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="policyName">Specifies the name of the key policy. If no policy name is specified, the default value is <c>default</c>. The only valid name is <c>default</c>. To get the names of key policies, use <a>ListKeyPolicies</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetKeyPolicy service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GetKeyPolicy">REST API Reference for GetKeyPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GetKeyPolicyAsync(Amazon.KeyManagementService.Model.GetKeyPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Gets a key policy attached to the specified KMS key.
            
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetKeyPolicy</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html">PutKeyPolicy</a>
            
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetKeyPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetKeyPolicy service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GetKeyPolicy">REST API Reference for GetKeyPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GetKeyRotationStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Provides detailed information about the rotation status for a KMS key, including whether
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            rotation of the key material</a> is enabled for the specified KMS key, the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotation-period">rotation
            period</a>, and the next scheduled rotation date.
            
             
            <para>
            Automatic key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key..
            </para>
             
            <para>
            You can enable (<a>EnableKeyRotation</a>) and disable automatic rotation (<a>DisableKeyRotation</a>)
            of the key material in customer managed KMS keys. Key material rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a> is not configurable. KMS always rotates the key
            material in Amazon Web Services managed KMS keys every year. The key rotation status
            for Amazon Web Services managed KMS keys is always <c>true</c>.
            </para>
             
            <para>
            You can perform on-demand (<a>RotateKeyOnDemand</a>) rotation of the key material
            in customer managed KMS keys, regardless of whether or not automatic key rotation
            is enabled. You can use GetKeyRotationStatus to identify the date and time that an
            in progress on-demand rotation was initiated. You can use <a>ListKeyRotations</a>
            to view the details of completed rotations.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years to every year. For details, see <a>EnableKeyRotation</a>.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             <ul> <li> 
            <para>
            Disabled: The key rotation status does not change when you disable a KMS key. However,
            while the KMS key is disabled, KMS does not rotate the key material. When you re-enable
            the KMS key, rotation resumes. If the key material in the re-enabled KMS key hasn't
            been rotated in one year, KMS rotates it immediately, and every year thereafter. If
            it's been less than a year since the key material in the re-enabled KMS key was rotated,
            the KMS key resumes its prior rotation schedule.
            </para>
             </li> <li> 
            <para>
            Pending deletion: While a KMS key is pending deletion, its key rotation status is
            <c>false</c> and KMS does not rotate the key material. If you cancel the deletion,
            the original key rotation status returns to <c>true</c>.
            </para>
             </li> </ul> 
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetKeyRotationStatus</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Gets the rotation status for the specified KMS key. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetKeyRotationStatus service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GetKeyRotationStatus">REST API Reference for GetKeyRotationStatus Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GetKeyRotationStatusAsync(Amazon.KeyManagementService.Model.GetKeyRotationStatusRequest,System.Threading.CancellationToken)">
            <summary>
            Provides detailed information about the rotation status for a KMS key, including whether
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            rotation of the key material</a> is enabled for the specified KMS key, the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotation-period">rotation
            period</a>, and the next scheduled rotation date.
            
             
            <para>
            Automatic key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key..
            </para>
             
            <para>
            You can enable (<a>EnableKeyRotation</a>) and disable automatic rotation (<a>DisableKeyRotation</a>)
            of the key material in customer managed KMS keys. Key material rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a> is not configurable. KMS always rotates the key
            material in Amazon Web Services managed KMS keys every year. The key rotation status
            for Amazon Web Services managed KMS keys is always <c>true</c>.
            </para>
             
            <para>
            You can perform on-demand (<a>RotateKeyOnDemand</a>) rotation of the key material
            in customer managed KMS keys, regardless of whether or not automatic key rotation
            is enabled. You can use GetKeyRotationStatus to identify the date and time that an
            in progress on-demand rotation was initiated. You can use <a>ListKeyRotations</a>
            to view the details of completed rotations.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years to every year. For details, see <a>EnableKeyRotation</a>.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             <ul> <li> 
            <para>
            Disabled: The key rotation status does not change when you disable a KMS key. However,
            while the KMS key is disabled, KMS does not rotate the key material. When you re-enable
            the KMS key, rotation resumes. If the key material in the re-enabled KMS key hasn't
            been rotated in one year, KMS rotates it immediately, and every year thereafter. If
            it's been less than a year since the key material in the re-enabled KMS key was rotated,
            the KMS key resumes its prior rotation schedule.
            </para>
             </li> <li> 
            <para>
            Pending deletion: While a KMS key is pending deletion, its key rotation status is
            <c>false</c> and KMS does not rotate the key material. If you cancel the deletion,
            the original key rotation status returns to <c>true</c>.
            </para>
             </li> </ul> 
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetKeyRotationStatus</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetKeyRotationStatus service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetKeyRotationStatus service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GetKeyRotationStatus">REST API Reference for GetKeyRotationStatus Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GetParametersForImportAsync(Amazon.KeyManagementService.Model.GetParametersForImportRequest,System.Threading.CancellationToken)">
            <summary>
            Returns the public key and an import token you need to import or reimport key material
            for a KMS key. 
            
             
            <para>
            By default, KMS keys are created with key material that KMS generates. This operation
            supports <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            key material</a>, an advanced feature that lets you generate and import the cryptographic
            key material for a KMS key. For more information about importing key material into
            KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            key material</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            Before calling <c>GetParametersForImport</c>, use the <a>CreateKey</a> operation with
            an <c>Origin</c> value of <c>EXTERNAL</c> to create a KMS key with no key material.
            You can import key material for a symmetric encryption KMS key, HMAC KMS key, asymmetric
            encryption KMS key, or asymmetric signing KMS key. You can also import key material
            into a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">multi-Region
            key</a> of any supported type. However, you can't import key material into a KMS key
            in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. You can also use <c>GetParametersForImport</c> to get a public key
            and import token to <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html#reimport-key-material">reimport
            the original key material</a> into a KMS key whose key material expired or was deleted.
            </para>
             
            <para>
             <c>GetParametersForImport</c> returns the items that you need to import your key
            material.
            </para>
             <ul> <li> 
            <para>
            The public key (or "wrapping key") of an RSA key pair that KMS generates.
            </para>
             
            <para>
            You will use this public key to encrypt ("wrap") your key material while it's in transit
            to KMS. 
            </para>
             </li> <li> 
            <para>
            A import token that ensures that KMS can decrypt your key material and associate it
            with the correct KMS key.
            </para>
             </li> </ul> 
            <para>
            The public key and its import token are permanently linked and must be used together.
            Each public key and import token set is valid for 24 hours. The expiration date and
            time appear in the <c>ParametersValidTo</c> field in the <c>GetParametersForImport</c>
            response. You cannot use an expired public key or import token in an <a>ImportKeyMaterial</a>
            request. If your key and token expire, send another <c>GetParametersForImport</c>
            request.
            </para>
             
            <para>
             <c>GetParametersForImport</c> requires the following information:
            </para>
             <ul> <li> 
            <para>
            The key ID of the KMS key for which you are importing the key material.
            </para>
             </li> <li> 
            <para>
            The key spec of the public key ("wrapping key") that you will use to encrypt your
            key material during import.
            </para>
             </li> <li> 
            <para>
            The wrapping algorithm that you will use with the public key to encrypt your key material.
            </para>
             </li> </ul> 
            <para>
            You can use the same or a different public key spec and wrapping algorithm each time
            you import or reimport the same key material. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetParametersForImport</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ImportKeyMaterial</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteImportedKeyMaterial</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetParametersForImport service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetParametersForImport service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GetParametersForImport">REST API Reference for GetParametersForImport Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.GetPublicKeyAsync(Amazon.KeyManagementService.Model.GetPublicKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Returns the public key of an asymmetric KMS key. Unlike the private key of a asymmetric
            KMS key, which never leaves KMS unencrypted, callers with <c>kms:GetPublicKey</c>
            permission can download the public key of an asymmetric KMS key. You can share the
            public key to allow others to encrypt messages and verify signatures outside of KMS.
            For information about asymmetric KMS keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            
             
            <para>
            You do not need to download the public key. Instead, you can use the public key within
            KMS by calling the <a>Encrypt</a>, <a>ReEncrypt</a>, or <a>Verify</a> operations with
            the identifier of an asymmetric KMS key. When you use the public key within KMS, you
            benefit from the authentication, authorization, and logging that are part of every
            KMS operation. You also reduce of risk of encrypting data that cannot be decrypted.
            These features are not effective outside of KMS.
            </para>
             
            <para>
            To help you use the public key safely outside of KMS, <c>GetPublicKey</c> returns
            important information about the public key in the response, including:
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_GetPublicKey.html#KMS-GetPublicKey-response-KeySpec">KeySpec</a>:
            The type of key material in the public key, such as <c>RSA_4096</c> or <c>ECC_NIST_P521</c>.
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_GetPublicKey.html#KMS-GetPublicKey-response-KeyUsage">KeyUsage</a>:
            Whether the key is used for encryption, signing, or generating a shared secret.
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_GetPublicKey.html#KMS-GetPublicKey-response-EncryptionAlgorithms">EncryptionAlgorithms</a>
            or <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_GetPublicKey.html#KMS-GetPublicKey-response-SigningAlgorithms">SigningAlgorithms</a>:
            A list of the encryption algorithms or the signing algorithms for the key.
            </para>
             </li> </ul> 
            <para>
            Although KMS cannot enforce these restrictions on external operations, it is crucial
            that you use this information to prevent the public key from being used improperly.
            For example, you can prevent a public signing key from being used encrypt data, or
            prevent a public key from being used with an encryption algorithm that is not supported
            by KMS. You can also avoid errors, such as using the wrong signing algorithm in a
            verification operation.
            </para>
             
            <para>
            To verify a signature outside of KMS with an SM2 public key (China Regions only),
            you must specify the distinguishing ID. By default, KMS uses <c>1234567812345678</c>
            as the distinguishing ID. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-sm-offline-verification">Offline
            verification with SM2 key pairs</a>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetPublicKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>CreateKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetPublicKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetPublicKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GetPublicKey">REST API Reference for GetPublicKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ImportKeyMaterialAsync(Amazon.KeyManagementService.Model.ImportKeyMaterialRequest,System.Threading.CancellationToken)">
            <summary>
            Imports or reimports key material into an existing KMS key that was created without
            key material. <c>ImportKeyMaterial</c> also sets the expiration model and expiration
            date of the imported key material.
            
             
            <para>
            By default, KMS keys are created with key material that KMS generates. This operation
            supports <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            key material</a>, an advanced feature that lets you generate and import the cryptographic
            key material for a KMS key. For more information about importing key material into
            KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            key material</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            After you successfully import key material into a KMS key, you can <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html#reimport-key-material">reimport
            the same key material</a> into that KMS key, but you cannot import different key material.
            You might reimport key material to replace key material that expired or key material
            that you deleted. You might also reimport key material to change the expiration model
            or expiration date of the key material. 
            </para>
             
            <para>
            Each time you import key material into KMS, you can determine whether (<c>ExpirationModel</c>)
            and when (<c>ValidTo</c>) the key material expires. To change the expiration of your
            key material, you must import it again, either by calling <c>ImportKeyMaterial</c>
            or using the <a href="kms/latest/developerguide/importing-keys-import-key-material.html#importing-keys-import-key-material-console">import
            features</a> of the KMS console.
            </para>
             
            <para>
            Before calling <c>ImportKeyMaterial</c>:
            </para>
             <ul> <li> 
            <para>
            Create or identify a KMS key with no key material. The KMS key must have an <c>Origin</c>
            value of <c>EXTERNAL</c>, which indicates that the KMS key is designed for imported
            key material. 
            </para>
             
            <para>
            To create an new KMS key for imported key material, call the <a>CreateKey</a> operation
            with an <c>Origin</c> value of <c>EXTERNAL</c>. You can create a symmetric encryption
            KMS key, HMAC KMS key, asymmetric encryption KMS key, or asymmetric signing KMS key.
            You can also import key material into a <a href="kms/latest/developerguide/multi-region-keys-overview.html">multi-Region
            key</a> of any supported type. However, you can't import key material into a KMS key
            in a <a href="kms/latest/developerguide/custom-key-store-overview.html">custom key
            store</a>.
            </para>
             </li> <li> 
            <para>
            Use the <a>DescribeKey</a> operation to verify that the <c>KeyState</c> of the KMS
            key is <c>PendingImport</c>, which indicates that the KMS key has no key material.
            
            </para>
             
            <para>
            If you are reimporting the same key material into an existing KMS key, you might need
            to call the <a>DeleteImportedKeyMaterial</a> to delete its existing key material.
            </para>
             </li> <li> 
            <para>
            Call the <a>GetParametersForImport</a> operation to get a public key and import token
            set for importing key material. 
            </para>
             </li> <li> 
            <para>
            Use the public key in the <a>GetParametersForImport</a> response to encrypt your key
            material.
            </para>
             </li> </ul> 
            <para>
             Then, in an <c>ImportKeyMaterial</c> request, you submit your encrypted key material
            and import token. When calling this operation, you must specify the following values:
            </para>
             <ul> <li> 
            <para>
            The key ID or key ARN of the KMS key to associate with the imported key material.
            Its <c>Origin</c> must be <c>EXTERNAL</c> and its <c>KeyState</c> must be <c>PendingImport</c>.
            You cannot perform this operation on a KMS key in a <a href="kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>, or on a KMS key in a different Amazon Web Services account. To get
            the <c>Origin</c> and <c>KeyState</c> of a KMS key, call <a>DescribeKey</a>.
            </para>
             </li> <li> 
            <para>
            The encrypted key material. 
            </para>
             </li> <li> 
            <para>
            The import token that <a>GetParametersForImport</a> returned. You must use a public
            key and token from the same <c>GetParametersForImport</c> response.
            </para>
             </li> <li> 
            <para>
            Whether the key material expires (<c>ExpirationModel</c>) and, if so, when (<c>ValidTo</c>).
            For help with this choice, see <a href="https://docs.aws.amazon.com/en_us/kms/latest/developerguide/importing-keys.html#importing-keys-expiration">Setting
            an expiration time</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            If you set an expiration date, KMS deletes the key material from the KMS key on the
            specified date, making the KMS key unusable. To use the KMS key in cryptographic operations
            again, you must reimport the same key material. However, you can delete and reimport
            the key material at any time, including before the key material expires. Each time
            you reimport, you can eliminate or reset the expiration time.
            </para>
             </li> </ul> 
            <para>
            When this operation is successful, the key state of the KMS key changes from <c>PendingImport</c>
            to <c>Enabled</c>, and you can use the KMS key in cryptographic operations.
            </para>
             
            <para>
            If this operation fails, use the exception to help determine the problem. If the error
            is related to the key material, the import token, or wrapping key, use <a>GetParametersForImport</a>
            to get a new public key and import token for the KMS key and repeat the import procedure.
            For help, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html#importing-keys-overview">How
            To Import Key Material</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ImportKeyMaterial</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DeleteImportedKeyMaterial</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetParametersForImport</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ImportKeyMaterial service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ImportKeyMaterial service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.ExpiredImportTokenException">
            The request was rejected because the specified import token is expired. Use <a>GetParametersForImport</a>
            to get a new import token and public key, use the new public key to encrypt the key
            material, and then try the request again.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.IncorrectKeyMaterialException">
            The request was rejected because the key material in the request is, expired, invalid,
            or is not the same key material that was previously imported into this KMS key.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidCiphertextException">
            From the <a>Decrypt</a> or <a>ReEncrypt</a> operation, the request was rejected because
            the specified ciphertext, or additional authenticated data incorporated into the ciphertext,
            such as the encryption context, is corrupted, missing, or otherwise invalid.
            
             
            <para>
            From the <a>ImportKeyMaterial</a> operation, the request was rejected because KMS
            could not decrypt the encrypted (wrapped) key material. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidImportTokenException">
            The request was rejected because the provided import token is invalid or is associated
            with a different KMS key.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ImportKeyMaterial">REST API Reference for ImportKeyMaterial Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ListAliasesAsync(Amazon.KeyManagementService.Model.ListAliasesRequest,System.Threading.CancellationToken)">
            <summary>
            Gets a list of aliases in the caller's Amazon Web Services account and region. For
            more information about aliases, see <a>CreateAlias</a>.
            
             
            <para>
            By default, the <c>ListAliases</c> operation returns all aliases in the account and
            region. To get only the aliases associated with a particular KMS key, use the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
            The <c>ListAliases</c> response can include aliases that you created and associated
            with your customer managed keys, and aliases that Amazon Web Services created and
            associated with Amazon Web Services managed keys in your account. You can recognize
            Amazon Web Services aliases because their names have the format <c>aws/&lt;service-name&gt;</c>,
            such as <c>aws/dynamodb</c>.
            </para>
             
            <para>
            The response might also include aliases that have no <c>TargetKeyId</c> field. These
            are predefined aliases that Amazon Web Services has created but has not yet associated
            with a KMS key. Aliases that Amazon Web Services creates in your account, including
            predefined aliases, do not count against your <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#aliases-limit">KMS
            aliases quota</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. <c>ListAliases</c> does not return aliases in other
            Amazon Web Services accounts.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListAliases</a>
            (IAM policy)
            </para>
             
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListAliases service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListAliases service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListAliases">REST API Reference for ListAliases Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ListGrantsAsync(Amazon.KeyManagementService.Model.ListGrantsRequest,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all grants for the specified KMS key. 
            
             
            <para>
            You must specify the KMS key in all requests. You can filter the grant list by grant
            ID or grantee principal.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             <note> 
            <para>
            The <c>GranteePrincipal</c> field in the <c>ListGrants</c> response usually contains
            the user or role designated as the grantee principal in the grant. However, when the
            grantee principal in the grant is an Amazon Web Services service, the <c>GranteePrincipal</c>
            field contains the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services">service
            principal</a>, which might represent several different grantee principals.
            </para>
             </note> 
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListGrants</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListGrants service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListGrants service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantIdException">
            The request was rejected because the specified <c>GrantId</c> is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListGrants">REST API Reference for ListGrants Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ListKeyPoliciesAsync(Amazon.KeyManagementService.Model.ListKeyPoliciesRequest,System.Threading.CancellationToken)">
            <summary>
            Gets the names of the key policies that are attached to a KMS key. This operation
            is designed to get policy names that you can use in a <a>GetKeyPolicy</a> operation.
            However, the only valid policy name is <c>default</c>. 
            
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListKeyPolicies</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>GetKeyPolicy</a> 
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html">PutKeyPolicy</a>
            
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListKeyPolicies service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListKeyPolicies service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListKeyPolicies">REST API Reference for ListKeyPolicies Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ListKeyRotationsAsync(Amazon.KeyManagementService.Model.ListKeyRotationsRequest,System.Threading.CancellationToken)">
            <summary>
            Returns information about all completed key material rotations for the specified KMS
            key.
            
             
            <para>
            You must specify the KMS key in all requests. You can refine the key rotations list
            by limiting the number of rotations returned.
            </para>
             
            <para>
            For detailed information about automatic and on-demand key rotations, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">Rotating
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListKeyRotations</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListKeyRotations service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListKeyRotations service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListKeyRotations">REST API Reference for ListKeyRotations Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ListKeysAsync(Amazon.KeyManagementService.Model.ListKeysRequest,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all KMS keys in the caller's Amazon Web Services account and Region.
            
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListKeys</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListKeys service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListKeys service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListKeys">REST API Reference for ListKeys Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ListResourceTagsAsync(Amazon.KeyManagementService.Model.ListResourceTagsRequest,System.Threading.CancellationToken)">
            <summary>
            Returns all tags on the specified KMS key.
            
             
            <para>
            For general information about tags, including the format and syntax, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
            Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.
            For information about using tags in KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging
            keys</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListResourceTags</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReplicateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>TagResource</a> 
            </para>
             </li> <li> 
            <para>
             <a>UntagResource</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListResourceTags service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListResourceTags service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListResourceTags">REST API Reference for ListResourceTags Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ListRetirableGrantsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns information about all grants in the Amazon Web Services account and Region
            that have the specified retiring principal. 
            
             
            <para>
            You can specify any principal in your Amazon Web Services account. The grants that
            are returned include grants for KMS keys in your Amazon Web Services account and other
            Amazon Web Services accounts. You might use this operation to determine which grants
            you may retire. To retire a grant, use the <a>RetireGrant</a> operation.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: You must specify a principal in your Amazon Web Services
            account. This operation returns a list of grants where the retiring principal specified
            in the <c>ListRetirableGrants</c> request is the same retiring principal on the grant.
            This can include grants on KMS keys owned by other Amazon Web Services accounts, but
            you do not need <c>kms:ListRetirableGrants</c> permission (or any other additional
            permission) in any Amazon Web Services account other than your own.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListRetirableGrants</a>
            (IAM policy) in your Amazon Web Services account.
            </para>
             <note> 
            <para>
            KMS authorizes <c>ListRetirableGrants</c> requests by evaluating the caller account's
            kms:ListRetirableGrants permissions. The authorized resource in <c>ListRetirableGrants</c>
            calls is the retiring principal specified in the request. KMS does not evaluate the
            caller's permissions to verify their access to any KMS keys or grants that might be
            returned by the <c>ListRetirableGrants</c> call.
            </para>
             </note> 
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="retiringPrincipal">The retiring principal for which to list grants. Enter a principal in your Amazon Web Services account. To specify the retiring principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an Amazon Web Services principal. Valid principals include Amazon Web Services accounts, IAM users, IAM roles, federated users, and assumed role users. For help with the ARN syntax for a principal, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns">IAM ARNs</a> in the <i> <i>Identity and Access Management User Guide</i> </i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListRetirableGrants service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListRetirableGrants">REST API Reference for ListRetirableGrants Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ListRetirableGrantsAsync(System.Threading.CancellationToken)">
            <summary>
            Returns information about all grants in the Amazon Web Services account and Region
            that have the specified retiring principal. 
            
             
            <para>
            You can specify any principal in your Amazon Web Services account. The grants that
            are returned include grants for KMS keys in your Amazon Web Services account and other
            Amazon Web Services accounts. You might use this operation to determine which grants
            you may retire. To retire a grant, use the <a>RetireGrant</a> operation.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: You must specify a principal in your Amazon Web Services
            account. This operation returns a list of grants where the retiring principal specified
            in the <c>ListRetirableGrants</c> request is the same retiring principal on the grant.
            This can include grants on KMS keys owned by other Amazon Web Services accounts, but
            you do not need <c>kms:ListRetirableGrants</c> permission (or any other additional
            permission) in any Amazon Web Services account other than your own.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListRetirableGrants</a>
            (IAM policy) in your Amazon Web Services account.
            </para>
             <note> 
            <para>
            KMS authorizes <c>ListRetirableGrants</c> requests by evaluating the caller account's
            kms:ListRetirableGrants permissions. The authorized resource in <c>ListRetirableGrants</c>
            calls is the retiring principal specified in the request. KMS does not evaluate the
            caller's permissions to verify their access to any KMS keys or grants that might be
            returned by the <c>ListRetirableGrants</c> call.
            </para>
             </note> 
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListRetirableGrants service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListRetirableGrants">REST API Reference for ListRetirableGrants Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ListRetirableGrantsAsync(Amazon.KeyManagementService.Model.ListRetirableGrantsRequest,System.Threading.CancellationToken)">
            <summary>
            Returns information about all grants in the Amazon Web Services account and Region
            that have the specified retiring principal. 
            
             
            <para>
            You can specify any principal in your Amazon Web Services account. The grants that
            are returned include grants for KMS keys in your Amazon Web Services account and other
            Amazon Web Services accounts. You might use this operation to determine which grants
            you may retire. To retire a grant, use the <a>RetireGrant</a> operation.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: You must specify a principal in your Amazon Web Services
            account. This operation returns a list of grants where the retiring principal specified
            in the <c>ListRetirableGrants</c> request is the same retiring principal on the grant.
            This can include grants on KMS keys owned by other Amazon Web Services accounts, but
            you do not need <c>kms:ListRetirableGrants</c> permission (or any other additional
            permission) in any Amazon Web Services account other than your own.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListRetirableGrants</a>
            (IAM policy) in your Amazon Web Services account.
            </para>
             <note> 
            <para>
            KMS authorizes <c>ListRetirableGrants</c> requests by evaluating the caller account's
            kms:ListRetirableGrants permissions. The authorized resource in <c>ListRetirableGrants</c>
            calls is the retiring principal specified in the request. KMS does not evaluate the
            caller's permissions to verify their access to any KMS keys or grants that might be
            returned by the <c>ListRetirableGrants</c> call.
            </para>
             </note> 
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListRetirableGrants service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListRetirableGrants service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListRetirableGrants">REST API Reference for ListRetirableGrants Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.PutKeyPolicyAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Attaches a key policy to the specified KMS key. 
            
             
            <para>
            For more information about key policies, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Key
            Policies</a> in the <i>Key Management Service Developer Guide</i>. For help writing
            and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM
            JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i>
            </i>. For examples of adding a key policy in multiple programming languages, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-key-policies.html#put-policy">Setting
            a key policy</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:PutKeyPolicy</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>GetKeyPolicy</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Sets the key policy on the specified KMS key. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="policy">The key policy to attach to the KMS key. The key policy must meet the following criteria: <ul> <li> The key policy must allow the calling principal to make a subsequent <c>PutKeyPolicy</c> request on the KMS key. This reduces the risk that the KMS key becomes unmanageable. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key">Default key policy</a> in the <i>Key Management Service Developer Guide</i>. (To omit this condition, set <c>BypassPolicyLockoutSafetyCheck</c> to true.) </li> <li> Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal, you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes that I make are not always immediately visible</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>. </li> </ul> A key policy document can include only the following characters: <ul> <li> Printable ASCII characters from the space character (<c>\u0020</c>) through the end of the ASCII character range. </li> <li> Printable characters in the Basic Latin and Latin-1 Supplement character set (through <c>\u00FF</c>). </li> <li> The tab (<c>\u0009</c>), line feed (<c>\u000A</c>), and carriage return (<c>\u000D</c>) special characters </li> </ul> For information about key policies, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Key policies in KMS</a> in the <i>Key Management Service Developer Guide</i>.For help writing and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i> </i>.</param>
            <param name="policyName">The name of the key policy. If no policy name is specified, the default value is <c>default</c>. The only valid value is <c>default</c>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutKeyPolicy service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException">
            The request was rejected because the specified policy is not syntactically or semantically
            correct.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/PutKeyPolicy">REST API Reference for PutKeyPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.PutKeyPolicyAsync(Amazon.KeyManagementService.Model.PutKeyPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Attaches a key policy to the specified KMS key. 
            
             
            <para>
            For more information about key policies, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Key
            Policies</a> in the <i>Key Management Service Developer Guide</i>. For help writing
            and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM
            JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i>
            </i>. For examples of adding a key policy in multiple programming languages, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-key-policies.html#put-policy">Setting
            a key policy</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:PutKeyPolicy</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>GetKeyPolicy</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutKeyPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutKeyPolicy service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException">
            The request was rejected because the specified policy is not syntactically or semantically
            correct.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/PutKeyPolicy">REST API Reference for PutKeyPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ReEncryptAsync(Amazon.KeyManagementService.Model.ReEncryptRequest,System.Threading.CancellationToken)">
            <summary>
            Decrypts ciphertext and then reencrypts it entirely within KMS. You can use this operation
            to change the KMS key under which data is encrypted, such as when you <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotate-keys-manually">manually
            rotate</a> a KMS key or change the KMS key that protects a ciphertext. You can also
            use it to reencrypt ciphertext under the same KMS key, such as to change the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">encryption
            context</a> of a ciphertext.
            
             
            <para>
            The <c>ReEncrypt</c> operation can decrypt ciphertext that was encrypted by using
            a KMS key in an KMS operation, such as <a>Encrypt</a> or <a>GenerateDataKey</a>. It
            can also decrypt ciphertext that was encrypted by using the public key of an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-concepts.html#asymmetric-cmks">asymmetric
            KMS key</a> outside of KMS. However, it cannot decrypt ciphertext produced by other
            libraries, such as the <a href="https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/">Amazon
            Web Services Encryption SDK</a> or <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html">Amazon
            S3 client-side encryption</a>. These libraries return a ciphertext format that is
            incompatible with KMS.
            </para>
             
            <para>
            When you use the <c>ReEncrypt</c> operation, you need to provide information for the
            decrypt operation and the subsequent encrypt operation.
            </para>
             <ul> <li> 
            <para>
            If your ciphertext was encrypted under an asymmetric KMS key, you must use the <c>SourceKeyId</c>
            parameter to identify the KMS key that encrypted the ciphertext. You must also supply
            the encryption algorithm that was used. This information is required to decrypt the
            data.
            </para>
             </li> <li> 
            <para>
            If your ciphertext was encrypted under a symmetric encryption KMS key, the <c>SourceKeyId</c>
            parameter is optional. KMS can get this information from metadata that it adds to
            the symmetric ciphertext blob. This feature adds durability to your implementation
            by ensuring that authorized users can decrypt ciphertext decades after it was encrypted,
            even if they've lost track of the key ID. However, specifying the source KMS key is
            always recommended as a best practice. When you use the <c>SourceKeyId</c> parameter
            to specify a KMS key, KMS uses only the KMS key you specify. If the ciphertext was
            encrypted under a different KMS key, the <c>ReEncrypt</c> operation fails. This practice
            ensures that you use the KMS key that you intend.
            </para>
             </li> <li> 
            <para>
            To reencrypt the data, you must use the <c>DestinationKeyId</c> parameter to specify
            the KMS key that re-encrypts the data after it is decrypted. If the destination KMS
            key is an asymmetric KMS key, you must also provide the encryption algorithm. The
            algorithm that you choose must be compatible with the KMS key.
            </para>
             <important> 
            <para>
            When you use an asymmetric KMS key to encrypt or reencrypt data, be sure to record
            the KMS key and encryption algorithm that you choose. You will be required to provide
            the same KMS key and encryption algorithm when you decrypt the data. If the KMS key
            and algorithm do not match the values used to encrypt the data, the decrypt operation
            fails.
            </para>
             
            <para>
            You are not required to supply the key ID and encryption algorithm when you decrypt
            with symmetric encryption KMS keys because KMS stores this information in the ciphertext
            blob. KMS cannot store metadata in ciphertext generated with asymmetric keys. The
            standard format for asymmetric key ciphertext does not include configurable fields.
            </para>
             </important> </li> </ul> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. The source KMS key and destination KMS key can be
            in different Amazon Web Services accounts. Either or both KMS keys can be in a different
            account than the caller. To specify a KMS key in a different account, you must use
            its key ARN or alias ARN.
            </para>
             
            <para>
             <b>Required permissions</b>:
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ReEncryptFrom</a>
            permission on the source KMS key (key policy)
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ReEncryptTo</a>
            permission on the destination KMS key (key policy)
            </para>
             </li> </ul> 
            <para>
            To permit reencryption from or to a KMS key, include the <c>"kms:ReEncrypt*"</c> permission
            in your <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">key
            policy</a>. This permission is automatically included in the key policy when you use
            the console to create a KMS key. But you must include it manually when you create
            a KMS key programmatically or when you use the <a>PutKeyPolicy</a> operation to set
            a key policy.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ReEncrypt service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ReEncrypt service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.IncorrectKeyException">
            The request was rejected because the specified KMS key cannot decrypt the data. The
            <c>KeyId</c> in a <a>Decrypt</a> request and the <c>SourceKeyId</c> in a <a>ReEncrypt</a>
            request must identify the same KMS key that was used to encrypt the ciphertext.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidCiphertextException">
            From the <a>Decrypt</a> or <a>ReEncrypt</a> operation, the request was rejected because
            the specified ciphertext, or additional authenticated data incorporated into the ciphertext,
            such as the encryption context, is corrupted, missing, or otherwise invalid.
            
             
            <para>
            From the <a>ImportKeyMaterial</a> operation, the request was rejected because KMS
            could not decrypt the encrypted (wrapped) key material. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ReEncrypt">REST API Reference for ReEncrypt Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ReplicateKeyAsync(Amazon.KeyManagementService.Model.ReplicateKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Replicates a multi-Region key into the specified Region. This operation creates a
            multi-Region replica key based on a multi-Region primary key in a different Region
            of the same Amazon Web Services partition. You can create multiple replicas of a primary
            key, but each must be in a different Region. To create a multi-Region primary key,
            use the <a>CreateKey</a> operation.
            
             
            <para>
            This operation supports <i>multi-Region keys</i>, an KMS feature that lets you create
            multiple interoperable KMS keys in different Amazon Web Services Regions. Because
            these KMS keys have the same key ID, key material, and other metadata, you can use
            them interchangeably to encrypt data in one Amazon Web Services Region and decrypt
            it in a different Amazon Web Services Region without re-encrypting the data or making
            a cross-Region call. For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            A <i>replica key</i> is a fully-functional KMS key that can be used independently
            of its primary and peer replica keys. A primary key and its replica keys share properties
            that make them interoperable. They have the same <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id">key
            ID</a> and key material. They also have the same <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-spec">key
            spec</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-usage">key
            usage</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-origin">key
            material origin</a>, and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            key rotation status</a>. KMS automatically synchronizes these shared properties among
            related multi-Region keys. All other properties of a replica key can differ, including
            its <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">key
            policy</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">tags</a>,
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html">aliases</a>,
            and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a>. KMS pricing and quotas for KMS keys apply to each primary
            key and replica key.
            </para>
             
            <para>
            When this operation completes, the new replica key has a transient key state of <c>Creating</c>.
            This key state changes to <c>Enabled</c> (or <c>PendingImport</c>) after a few seconds
            when the process of creating the new replica key is complete. While the key state
            is <c>Creating</c>, you can manage key, but you cannot yet use it in cryptographic
            operations. If you are creating and using the replica key programmatically, retry
            on <c>KMSInvalidStateException</c> or call <c>DescribeKey</c> to check its <c>KeyState</c>
            value before using it. For details about the <c>Creating</c> key state, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            You cannot create more than one replica of a primary key in any Region. If the Region
            already includes a replica of the key you're trying to replicate, <c>ReplicateKey</c>
            returns an <c>AlreadyExistsException</c> error. If the key state of the existing replica
            is <c>PendingDeletion</c>, you can cancel the scheduled key deletion (<a>CancelKeyDeletion</a>)
            or wait for the key to be deleted. The new replica key you create will have the same
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html#mrk-sync-properties">shared
            properties</a> as the original replica key.
            </para>
             
            <para>
            The CloudTrail log of a <c>ReplicateKey</c> operation records a <c>ReplicateKey</c>
            operation in the primary key's Region and a <a>CreateKey</a> operation in the replica
            key's Region.
            </para>
             
            <para>
            If you replicate a multi-Region primary key with imported key material, the replica
            key is created with no key material. You must import the same key material that you
            imported into the primary key. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-import.html">Importing
            key material into multi-Region keys</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            To convert a replica key to a primary key, use the <a>UpdatePrimaryRegion</a> operation.
            </para>
             <note> 
            <para>
             <c>ReplicateKey</c> uses different default values for the <c>KeyPolicy</c> and <c>Tags</c>
            parameters than those used in the KMS console. For details, see the parameter descriptions.
            </para>
             </note> 
            <para>
             <b>Cross-account use</b>: No. You cannot use this operation to create a replica key
            in a different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: 
            </para>
             <ul> <li> 
            <para>
             <c>kms:ReplicateKey</c> on the primary key (in the primary key's Region). Include
            this permission in the primary key's key policy.
            </para>
             </li> <li> 
            <para>
             <c>kms:CreateKey</c> in an IAM policy in the replica Region.
            </para>
             </li> <li> 
            <para>
            To use the <c>Tags</c> parameter, <c>kms:TagResource</c> in an IAM policy in the replica
            Region.
            </para>
             </li> </ul> 
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdatePrimaryRegion</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ReplicateKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ReplicateKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.AlreadyExistsException">
            The request was rejected because it attempted to create a resource that already exists.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException">
            The request was rejected because the specified policy is not syntactically or semantically
            correct.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.TagException">
            The request was rejected because one or more tags are not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ReplicateKey">REST API Reference for ReplicateKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.RetireGrantAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a grant. Typically, you retire a grant when you no longer need its permissions.
            To identify the grant to retire, use a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">grant
            token</a>, or both the grant ID and a key identifier (key ID or key ARN) of the KMS
            key. The <a>CreateGrant</a> operation returns both values.
            
             
            <para>
            This operation can be called by the <i>retiring principal</i> for a grant, by the
            <i>grantee principal</i> if the grant allows the <c>RetireGrant</c> operation, and
            by the Amazon Web Services account in which the grant is created. It can also be called
            by principals to whom permission for retiring a grant is delegated. For details, see
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. You can retire a grant on a KMS key in a different
            Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: Permission to retire a grant is determined primarily
            by the grant. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="grantToken">Identifies the grant to be retired. You can use a grant token to identify a new grant even before it has achieved eventual consistency. Only the <a>CreateGrant</a> operation returns a grant token. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-eventual-consistency">Eventual consistency</a> in the <i>Key Management Service Developer Guide</i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RetireGrant service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantIdException">
            The request was rejected because the specified <c>GrantId</c> is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/RetireGrant">REST API Reference for RetireGrant Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.RetireGrantAsync(Amazon.KeyManagementService.Model.RetireGrantRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes a grant. Typically, you retire a grant when you no longer need its permissions.
            To identify the grant to retire, use a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">grant
            token</a>, or both the grant ID and a key identifier (key ID or key ARN) of the KMS
            key. The <a>CreateGrant</a> operation returns both values.
            
             
            <para>
            This operation can be called by the <i>retiring principal</i> for a grant, by the
            <i>grantee principal</i> if the grant allows the <c>RetireGrant</c> operation, and
            by the Amazon Web Services account in which the grant is created. It can also be called
            by principals to whom permission for retiring a grant is delegated. For details, see
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. You can retire a grant on a KMS key in a different
            Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: Permission to retire a grant is determined primarily
            by the grant. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RetireGrant service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RetireGrant service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantIdException">
            The request was rejected because the specified <c>GrantId</c> is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/RetireGrant">REST API Reference for RetireGrant Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.RevokeGrantAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified grant. You revoke a grant to terminate the permissions that
            the grant allows. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            
             
            <para>
            When you create, retire, or revoke a grant, there might be a brief delay, usually
            less than five minutes, until the grant is available throughout KMS. This state is
            known as <i>eventual consistency</i>. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-eventual-consistency">Eventual
            consistency</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. 
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:RevokeGrant</a>
            (key policy).
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="grantId">Identifies the grant to revoke. To get the grant ID, use <a>CreateGrant</a>, <a>ListGrants</a>, or <a>ListRetirableGrants</a>.</param>
            <param name="keyId">A unique identifier for the KMS key associated with the grant. To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RevokeGrant service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantIdException">
            The request was rejected because the specified <c>GrantId</c> is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/RevokeGrant">REST API Reference for RevokeGrant Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.RevokeGrantAsync(Amazon.KeyManagementService.Model.RevokeGrantRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified grant. You revoke a grant to terminate the permissions that
            the grant allows. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            
             
            <para>
            When you create, retire, or revoke a grant, there might be a brief delay, usually
            less than five minutes, until the grant is available throughout KMS. This state is
            known as <i>eventual consistency</i>. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-eventual-consistency">Eventual
            consistency</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. 
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:RevokeGrant</a>
            (key policy).
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RevokeGrant service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RevokeGrant service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantIdException">
            The request was rejected because the specified <c>GrantId</c> is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/RevokeGrant">REST API Reference for RevokeGrant Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.RotateKeyOnDemandAsync(Amazon.KeyManagementService.Model.RotateKeyOnDemandRequest,System.Threading.CancellationToken)">
            <summary>
            Immediately initiates rotation of the key material of the specified symmetric encryption
            KMS key.
            
             
            <para>
            You can perform <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-on-demand">on-demand
            rotation</a> of the key material in customer managed KMS keys, regardless of whether
            or not <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-enable-disable">automatic
            key rotation</a> is enabled. On-demand rotations do not change existing automatic
            rotation schedules. For example, consider a KMS key that has automatic key rotation
            enabled with a rotation period of 730 days. If the key is scheduled to automatically
            rotate on April 14, 2024, and you perform an on-demand rotation on April 10, 2024,
            the key will automatically rotate, as scheduled, on April 14, 2024 and every 730 days
            thereafter.
            </para>
             <note> 
            <para>
            You can perform on-demand key rotation a <b>maximum of 10 times</b> per KMS key. You
            can use the KMS console to view the number of remaining on-demand rotations available
            for a KMS key.
            </para>
             </note> 
            <para>
            You can use <a>GetKeyRotationStatus</a> to identify any in progress on-demand rotations.
            You can use <a>ListKeyRotations</a> to identify the date that completed on-demand
            rotations were performed. You can monitor rotation of the key material for your KMS
            keys in CloudTrail and Amazon CloudWatch.
            </para>
             
            <para>
            On-demand key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot perform on-demand rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To perform on-demand rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, invoke the on-demand rotation on the primary key.
            </para>
             
            <para>
            You cannot initiate on-demand rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a>. KMS always rotates the key material of Amazon Web
            Services managed keys every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> is managed by the Amazon Web Services service that
            owns the key.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:RotateKeyOnDemand</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RotateKeyOnDemand service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RotateKeyOnDemand service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.ConflictException">
            The request was rejected because an automatic rotation of this key is currently in
            progress or scheduled to begin within the next 20 minutes.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/RotateKeyOnDemand">REST API Reference for RotateKeyOnDemand Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ScheduleKeyDeletionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Schedules the deletion of a KMS key. By default, KMS applies a waiting period of 30
            days, but you can specify a waiting period of 7-30 days. When this operation is successful,
            the key state of the KMS key changes to <c>PendingDeletion</c> and the key can't be
            used in any cryptographic operations. It remains in this state for the duration of
            the waiting period. Before the waiting period ends, you can use <a>CancelKeyDeletion</a>
            to cancel the deletion of the KMS key. After the waiting period ends, KMS deletes
            the KMS key, its key material, and all KMS data associated with it, including all
            aliases that refer to it.
            
             <important> 
            <para>
            Deleting a KMS key is a destructive and potentially dangerous operation. When a KMS
            key is deleted, all data that was encrypted under the KMS key is unrecoverable. (The
            only exception is a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">multi-Region
            replica key</a>, or an <a href="kms/latest/developerguide/importing-keys-managing.html#import-delete-key">asymmetric
            or HMAC KMS key with imported key material</a>.) To prevent the use of a KMS key without
            deleting it, use <a>DisableKey</a>. 
            </para>
             </important> 
            <para>
            You can schedule the deletion of a multi-Region primary key and its replica keys at
            any time. However, KMS will not delete a multi-Region primary key with existing replica
            keys. If you schedule the deletion of a primary key with replicas, its key state changes
            to <c>PendingReplicaDeletion</c> and it cannot be replicated or used in cryptographic
            operations. This status can continue indefinitely. When the last of its replicas keys
            is deleted (not just scheduled), the key state of the primary key changes to <c>PendingDeletion</c>
            and its waiting period (<c>PendingWindowInDays</c>) begins. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">Deleting
            multi-Region keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            When KMS <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-cmk-keystore.html">deletes
            a KMS key from an CloudHSM key store</a>, it makes a best effort to delete the associated
            key material from the associated CloudHSM cluster. However, you might need to manually
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key">delete
            the orphaned key material</a> from the cluster and its backups. <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-xks-key.html">Deleting
            a KMS key from an external key store</a> has no effect on the associated external
            key. However, for both types of custom key stores, deleting a KMS key is destructive
            and irreversible. You cannot decrypt ciphertext encrypted under the KMS key by using
            only its associated external key or CloudHSM key. Also, you cannot recreate a KMS
            key in an external key store by creating a new KMS key with the same key material.
            </para>
             
            <para>
            For more information about scheduling a KMS key for deletion, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html">Deleting
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: kms:ScheduleKeyDeletion (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CancelKeyDeletion</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">The unique identifier of the KMS key to delete. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ScheduleKeyDeletion service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ScheduleKeyDeletion">REST API Reference for ScheduleKeyDeletion Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ScheduleKeyDeletionAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Schedules the deletion of a KMS key. By default, KMS applies a waiting period of 30
            days, but you can specify a waiting period of 7-30 days. When this operation is successful,
            the key state of the KMS key changes to <c>PendingDeletion</c> and the key can't be
            used in any cryptographic operations. It remains in this state for the duration of
            the waiting period. Before the waiting period ends, you can use <a>CancelKeyDeletion</a>
            to cancel the deletion of the KMS key. After the waiting period ends, KMS deletes
            the KMS key, its key material, and all KMS data associated with it, including all
            aliases that refer to it.
            
             <important> 
            <para>
            Deleting a KMS key is a destructive and potentially dangerous operation. When a KMS
            key is deleted, all data that was encrypted under the KMS key is unrecoverable. (The
            only exception is a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">multi-Region
            replica key</a>, or an <a href="kms/latest/developerguide/importing-keys-managing.html#import-delete-key">asymmetric
            or HMAC KMS key with imported key material</a>.) To prevent the use of a KMS key without
            deleting it, use <a>DisableKey</a>. 
            </para>
             </important> 
            <para>
            You can schedule the deletion of a multi-Region primary key and its replica keys at
            any time. However, KMS will not delete a multi-Region primary key with existing replica
            keys. If you schedule the deletion of a primary key with replicas, its key state changes
            to <c>PendingReplicaDeletion</c> and it cannot be replicated or used in cryptographic
            operations. This status can continue indefinitely. When the last of its replicas keys
            is deleted (not just scheduled), the key state of the primary key changes to <c>PendingDeletion</c>
            and its waiting period (<c>PendingWindowInDays</c>) begins. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">Deleting
            multi-Region keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            When KMS <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-cmk-keystore.html">deletes
            a KMS key from an CloudHSM key store</a>, it makes a best effort to delete the associated
            key material from the associated CloudHSM cluster. However, you might need to manually
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key">delete
            the orphaned key material</a> from the cluster and its backups. <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-xks-key.html">Deleting
            a KMS key from an external key store</a> has no effect on the associated external
            key. However, for both types of custom key stores, deleting a KMS key is destructive
            and irreversible. You cannot decrypt ciphertext encrypted under the KMS key by using
            only its associated external key or CloudHSM key. Also, you cannot recreate a KMS
            key in an external key store by creating a new KMS key with the same key material.
            </para>
             
            <para>
            For more information about scheduling a KMS key for deletion, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html">Deleting
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: kms:ScheduleKeyDeletion (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CancelKeyDeletion</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">The unique identifier of the KMS key to delete. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="pendingWindowInDays">The waiting period, specified in number of days. After the waiting period ends, KMS deletes the KMS key. If the KMS key is a multi-Region primary key with replica keys, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately. This value is optional. If you include a value, it must be between 7 and 30, inclusive. If you do not include a value, it defaults to 30. You can use the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/conditions-kms.html#conditions-kms-schedule-key-deletion-pending-window-in-days"> <c>kms:ScheduleKeyDeletionPendingWindowInDays</c> </a> condition key to further constrain the values that principals can specify in the <c>PendingWindowInDays</c> parameter.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ScheduleKeyDeletion service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ScheduleKeyDeletion">REST API Reference for ScheduleKeyDeletion Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.ScheduleKeyDeletionAsync(Amazon.KeyManagementService.Model.ScheduleKeyDeletionRequest,System.Threading.CancellationToken)">
            <summary>
            Schedules the deletion of a KMS key. By default, KMS applies a waiting period of 30
            days, but you can specify a waiting period of 7-30 days. When this operation is successful,
            the key state of the KMS key changes to <c>PendingDeletion</c> and the key can't be
            used in any cryptographic operations. It remains in this state for the duration of
            the waiting period. Before the waiting period ends, you can use <a>CancelKeyDeletion</a>
            to cancel the deletion of the KMS key. After the waiting period ends, KMS deletes
            the KMS key, its key material, and all KMS data associated with it, including all
            aliases that refer to it.
            
             <important> 
            <para>
            Deleting a KMS key is a destructive and potentially dangerous operation. When a KMS
            key is deleted, all data that was encrypted under the KMS key is unrecoverable. (The
            only exception is a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">multi-Region
            replica key</a>, or an <a href="kms/latest/developerguide/importing-keys-managing.html#import-delete-key">asymmetric
            or HMAC KMS key with imported key material</a>.) To prevent the use of a KMS key without
            deleting it, use <a>DisableKey</a>. 
            </para>
             </important> 
            <para>
            You can schedule the deletion of a multi-Region primary key and its replica keys at
            any time. However, KMS will not delete a multi-Region primary key with existing replica
            keys. If you schedule the deletion of a primary key with replicas, its key state changes
            to <c>PendingReplicaDeletion</c> and it cannot be replicated or used in cryptographic
            operations. This status can continue indefinitely. When the last of its replicas keys
            is deleted (not just scheduled), the key state of the primary key changes to <c>PendingDeletion</c>
            and its waiting period (<c>PendingWindowInDays</c>) begins. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">Deleting
            multi-Region keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            When KMS <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-cmk-keystore.html">deletes
            a KMS key from an CloudHSM key store</a>, it makes a best effort to delete the associated
            key material from the associated CloudHSM cluster. However, you might need to manually
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key">delete
            the orphaned key material</a> from the cluster and its backups. <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-xks-key.html">Deleting
            a KMS key from an external key store</a> has no effect on the associated external
            key. However, for both types of custom key stores, deleting a KMS key is destructive
            and irreversible. You cannot decrypt ciphertext encrypted under the KMS key by using
            only its associated external key or CloudHSM key. Also, you cannot recreate a KMS
            key in an external key store by creating a new KMS key with the same key material.
            </para>
             
            <para>
            For more information about scheduling a KMS key for deletion, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html">Deleting
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: kms:ScheduleKeyDeletion (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CancelKeyDeletion</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ScheduleKeyDeletion service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ScheduleKeyDeletion service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ScheduleKeyDeletion">REST API Reference for ScheduleKeyDeletion Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.SignAsync(Amazon.KeyManagementService.Model.SignRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a <a href="https://en.wikipedia.org/wiki/Digital_signature">digital signature</a>
            for a message or message digest by using the private key in an asymmetric signing
            KMS key. To verify the signature, use the <a>Verify</a> operation, or use the public
            key in the same asymmetric KMS key outside of KMS. For information about asymmetric
            KMS keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            
             
            <para>
            Digital signatures are generated and verified by using asymmetric key pair, such as
            an RSA or ECC pair that is represented by an asymmetric KMS key. The key owner (or
            an authorized user) uses their private key to sign a message. Anyone with the public
            key can verify that the message was signed with that particular private key and that
            the message hasn't changed since it was signed. 
            </para>
             
            <para>
            To use the <c>Sign</c> operation, provide the following information:
            </para>
             <ul> <li> 
            <para>
            Use the <c>KeyId</c> parameter to identify an asymmetric KMS key with a <c>KeyUsage</c>
            value of <c>SIGN_VERIFY</c>. To get the <c>KeyUsage</c> value of a KMS key, use the
            <a>DescribeKey</a> operation. The caller must have <c>kms:Sign</c> permission on the
            KMS key.
            </para>
             </li> <li> 
            <para>
            Use the <c>Message</c> parameter to specify the message or message digest to sign.
            You can submit messages of up to 4096 bytes. To sign a larger message, generate a
            hash digest of the message, and then provide the hash digest in the <c>Message</c>
            parameter. To indicate whether the message is a full message or a digest, use the
            <c>MessageType</c> parameter.
            </para>
             </li> <li> 
            <para>
            Choose a signing algorithm that is compatible with the KMS key. 
            </para>
             </li> </ul> <important> 
            <para>
            When signing a message, be sure to record the KMS key and the signing algorithm. This
            information is required to verify the signature.
            </para>
             </important> <note> 
            <para>
            Best practices recommend that you limit the time during which any signature is effective.
            This deters an attack where the actor uses a signed message to establish validity
            repeatedly or long after the message is superseded. Signatures do not include a timestamp,
            but you can include a timestamp in the signed message to help you detect when its
            time to refresh the signature. 
            </para>
             </note> 
            <para>
            To verify the signature that this operation generates, use the <a>Verify</a> operation.
            Or use the <a>GetPublicKey</a> operation to download the public key and then use the
            public key to verify the signature outside of KMS. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:Sign</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>Verify</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Sign service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Sign service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/Sign">REST API Reference for Sign Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.TagResourceAsync(Amazon.KeyManagementService.Model.TagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Adds or edits tags on a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a>.
            
             <note> 
            <para>
            Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            Each tag consists of a tag key and a tag value, both of which are case-sensitive strings.
            The tag value can be an empty (null) string. To add a tag, specify a new tag key and
            a tag value. To edit a tag, specify an existing tag key and a new tag value.
            </para>
             
            <para>
            You can use this operation to tag a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a>, but you cannot tag an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed key</a>, an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned key</a>, a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#keystore-concept">custom
            key store</a>, or an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#alias-concept">alias</a>.
            </para>
             
            <para>
            You can also add tags to a KMS key while creating it (<a>CreateKey</a>) or replicating
            it (<a>ReplicateKey</a>).
            </para>
             
            <para>
            For information about using tags in KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging
            keys</a>. For general information about tags, including the format and syntax, see
            <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon
            Web Services resources</a> in the <i>Amazon Web Services General Reference</i>. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReplicateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>UntagResource</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the TagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the TagResource service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.TagException">
            The request was rejected because one or more tags are not valid.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.UntagResourceAsync(Amazon.KeyManagementService.Model.UntagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes tags from a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a>. To delete a tag, specify the tag key and the KMS key.
            
             <note> 
            <para>
            Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            When it succeeds, the <c>UntagResource</c> operation doesn't return any output. Also,
            if the specified tag key isn't found on the KMS key, it doesn't throw an exception
            or return a response. To confirm that the operation worked, use the <a>ListResourceTags</a>
            operation.
            </para>
             
            <para>
            For information about using tags in KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging
            keys</a>. For general information about tags, including the format and syntax, see
            <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon
            Web Services resources</a> in the <i>Amazon Web Services General Reference</i>. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UntagResource</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReplicateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>TagResource</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UntagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UntagResource service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.TagException">
            The request was rejected because one or more tags are not valid.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.UpdateAliasAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Associates an existing KMS alias with a different KMS key. Each alias is associated
            with only one KMS key at a time, although a KMS key can have multiple aliases. The
            alias and the KMS key must be in the same Amazon Web Services account and Region.
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            The current and new KMS key must be the same type (both symmetric or both asymmetric
            or both HMAC), and they must have the same key usage. This restriction prevents errors
            in code that uses aliases. If you must assign an alias to a different type of KMS
            key, use <a>DeleteAlias</a> to delete the old alias and <a>CreateAlias</a> to create
            a new alias.
            </para>
             
            <para>
            You cannot use <c>UpdateAlias</c> to change an alias name. To change an alias name,
            use <a>DeleteAlias</a> to delete the old alias and <a>CreateAlias</a> to create a
            new alias.
            </para>
             
            <para>
            Because an alias is not a property of a KMS key, you can create, update, and delete
            the aliases of a KMS key without affecting the KMS key. Also, aliases do not appear
            in the response from the <a>DescribeKey</a> operation. To get the aliases of all KMS
            keys in the account, use the <a>ListAliases</a> operation. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the current KMS key (key policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the new KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="aliasName">Identifies the alias that is changing its KMS key. This value must begin with <c>alias/</c> followed by the alias name, such as <c>alias/ExampleAlias</c>. You cannot use <c>UpdateAlias</c> to change the alias name. <important> Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. </important></param>
            <param name="targetKeyId">Identifies the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed key</a> to associate with the alias. You don't have permission to associate an alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon Web Services managed key</a>. The KMS key must be in the same Amazon Web Services account and Region as the alias. Also, the new target KMS key must be the same type as the current target KMS key (both symmetric or both asymmetric or both HMAC) and they must have the same key usage.  Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>. To verify that the alias is mapped to the correct KMS key, use <a>ListAliases</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateAlias service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UpdateAlias">REST API Reference for UpdateAlias Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.UpdateAliasAsync(Amazon.KeyManagementService.Model.UpdateAliasRequest,System.Threading.CancellationToken)">
            <summary>
            Associates an existing KMS alias with a different KMS key. Each alias is associated
            with only one KMS key at a time, although a KMS key can have multiple aliases. The
            alias and the KMS key must be in the same Amazon Web Services account and Region.
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            The current and new KMS key must be the same type (both symmetric or both asymmetric
            or both HMAC), and they must have the same key usage. This restriction prevents errors
            in code that uses aliases. If you must assign an alias to a different type of KMS
            key, use <a>DeleteAlias</a> to delete the old alias and <a>CreateAlias</a> to create
            a new alias.
            </para>
             
            <para>
            You cannot use <c>UpdateAlias</c> to change an alias name. To change an alias name,
            use <a>DeleteAlias</a> to delete the old alias and <a>CreateAlias</a> to create a
            new alias.
            </para>
             
            <para>
            Because an alias is not a property of a KMS key, you can create, update, and delete
            the aliases of a KMS key without affecting the KMS key. Also, aliases do not appear
            in the response from the <a>DescribeKey</a> operation. To get the aliases of all KMS
            keys in the account, use the <a>ListAliases</a> operation. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the current KMS key (key policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the new KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateAlias service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateAlias service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UpdateAlias">REST API Reference for UpdateAlias Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.UpdateCustomKeyStoreAsync(Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest,System.Threading.CancellationToken)">
            <summary>
            Changes the properties of a custom key store. You can use this operation to change
            the properties of an CloudHSM key store or an external key store.
            
             
            <para>
            Use the required <c>CustomKeyStoreId</c> parameter to identify the custom key store.
            Use the remaining optional parameters to change its properties. This operation does
            not return any property values. To verify the updated property values, use the <a>DescribeCustomKeyStores</a>
            operation.
            </para>
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             <important> 
            <para>
            When updating the properties of an external key store, verify that the updated settings
            connect your key store, via the external key store proxy, to the same external key
            manager as the previous settings, or to a backup or snapshot of the external key manager
            with the same cryptographic keys. If the updated connection settings fail, you can
            fix them and retry, although an extended delay might disrupt Amazon Web Services services.
            However, if KMS permanently loses its access to cryptographic keys, ciphertext encrypted
            under those keys is unrecoverable.
            </para>
             </important> <note> 
            <para>
            For external key stores:
            </para>
             
            <para>
            Some external key managers provide a simpler method for updating an external key store.
            For details, see your external key manager documentation.
            </para>
             
            <para>
            When updating an external key store in the KMS console, you can upload a JSON-based
            proxy configuration file with the desired values. You cannot upload the proxy configuration
            file to the <c>UpdateCustomKeyStore</c> operation. However, you can use the file to
            help you determine the correct values for the <c>UpdateCustomKeyStore</c> parameters.
            </para>
             </note> 
            <para>
            For an CloudHSM key store, you can use this operation to change the custom key store
            friendly name (<c>NewCustomKeyStoreName</c>), to tell KMS about a change to the <c>kmsuser</c>
            crypto user password (<c>KeyStorePassword</c>), or to associate the custom key store
            with a different, but related, CloudHSM cluster (<c>CloudHsmClusterId</c>). To update
            any property of an CloudHSM key store, the <c>ConnectionState</c> of the CloudHSM
            key store must be <c>DISCONNECTED</c>. 
            </para>
             
            <para>
            For an external key store, you can use this operation to change the custom key store
            friendly name (<c>NewCustomKeyStoreName</c>), or to tell KMS about a change to the
            external key store proxy authentication credentials (<c>XksProxyAuthenticationCredential</c>),
            connection method (<c>XksProxyConnectivity</c>), external proxy endpoint (<c>XksProxyUriEndpoint</c>)
            and path (<c>XksProxyUriPath</c>). For external key stores with an <c>XksProxyConnectivity</c>
            of <c>VPC_ENDPOINT_SERVICE</c>, you can also update the Amazon VPC endpoint service
            name (<c>XksProxyVpcEndpointServiceName</c>). To update most properties of an external
            key store, the <c>ConnectionState</c> of the external key store must be <c>DISCONNECTED</c>.
            However, you can update the <c>CustomKeyStoreName</c>, <c>XksProxyAuthenticationCredential</c>,
            and <c>XksProxyUriPath</c> of an external key store when it is in the CONNECTED or
            DISCONNECTED state. 
            </para>
             
            <para>
            If your update requires a <c>DISCONNECTED</c> state, before using <c>UpdateCustomKeyStore</c>,
            use the <a>DisconnectCustomKeyStore</a> operation to disconnect the custom key store.
            After the <c>UpdateCustomKeyStore</c> operation completes, use the <a>ConnectCustomKeyStore</a>
            to reconnect the custom key store. To find the <c>ConnectionState</c> of the custom
            key store, use the <a>DescribeCustomKeyStores</a> operation. 
            </para>
             
            <para>
             
            </para>
             
            <para>
            Before updating the custom key store, verify that the new values allow KMS to connect
            the custom key store to its backing key store. For example, before you change the
            <c>XksProxyUriPath</c> value, verify that the external key store proxy is reachable
            at the new path.
            </para>
             
            <para>
            If the operation succeeds, it returns a JSON object with no properties.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateCustomKeyStore</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateCustomKeyStore service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateCustomKeyStore service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException">
            The request was rejected because the associated CloudHSM cluster did not meet the
            configuration requirements for an CloudHSM key store.
            
             <ul> <li> 
            <para>
            The CloudHSM cluster must be configured with private subnets in at least two different
            Availability Zones in the Region.
            </para>
             </li> <li> 
            <para>
            The <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">security
            group for the cluster</a> (cloudhsm-cluster-<i>&lt;cluster-id&gt;</i>-sg) must include
            inbound rules and outbound rules that allow TCP traffic on ports 2223-2225. The <b>Source</b>
            in the inbound rules and the <b>Destination</b> in the outbound rules must match the
            security group ID. These rules are set by default when you create the CloudHSM cluster.
            Do not delete or change them. To get information about a particular security group,
            use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html">DescribeSecurityGroups</a>
            operation.
            </para>
             </li> <li> 
            <para>
            The CloudHSM cluster must contain at least as many HSMs as the operation requires.
            To add HSMs, use the CloudHSM <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html">CreateHsm</a>
            operation.
            </para>
             
            <para>
            For the <a>CreateCustomKeyStore</a>, <a>UpdateCustomKeyStore</a>, and <a>CreateKey</a>
            operations, the CloudHSM cluster must have at least two active HSMs, each in a different
            Availability Zone. For the <a>ConnectCustomKeyStore</a> operation, the CloudHSM must
            contain at least one active HSM.
            </para>
             </li> </ul> 
            <para>
            For information about the requirements for an CloudHSM cluster that is associated
            with an CloudHSM key store, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">Assemble
            the Prerequisites</a> in the <i>Key Management Service Developer Guide</i>. For information
            about creating a private subnet for an CloudHSM cluster, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/create-subnets.html">Create
            a Private Subnet</a> in the <i>CloudHSM User Guide</i>. For information about cluster
            security groups, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">Configure
            a Default Security Group</a> in the <i> <i>CloudHSM User Guide</i> </i>. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException">
            The request was rejected because the CloudHSM cluster associated with the CloudHSM
            key store is not active. Initialize and activate the cluster and try the command again.
            For detailed instructions, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/getting-started.html">Getting
            Started</a> in the <i>CloudHSM User Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotFoundException">
            The request was rejected because KMS cannot find the CloudHSM cluster with the specified
            cluster ID. Retry the request with a different cluster ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotRelatedException">
            The request was rejected because the specified CloudHSM cluster has a different cluster
            certificate than the original cluster. You cannot use the operation to specify an
            unrelated cluster for an CloudHSM key store.
            
             
            <para>
            Specify an CloudHSM cluster that shares a backup history with the original cluster.
            This includes clusters that were created from a backup of the current cluster, and
            clusters that were created from the same backup that produced the current cluster.
            </para>
             
            <para>
            CloudHSM clusters that share a backup history have the same cluster certificate. To
            view the cluster certificate of an CloudHSM cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a>
            operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNameInUseException">
            The request was rejected because the specified custom key store name is already assigned
            to another custom key store in the account. Try again with a custom key store name
            that is unique in the account.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyIncorrectAuthenticationCredentialException">
            The request was rejected because the proxy credentials failed to authenticate to the
            specified external key store proxy. The specified external key store proxy rejected
            a status request from KMS due to invalid credentials. This can indicate an error in
            the credentials or in the identification of the external key store proxy.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyInvalidConfigurationException">
            The request was rejected because the external key store proxy is not configured correctly.
            To identify the cause, see the error message that accompanies the exception.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyInvalidResponseException">
            KMS cannot interpret the response it received from the external key store proxy. The
            problem might be a poorly constructed response, but it could also be a transient network
            issue. If you see this error repeatedly, report it to the proxy vendor.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyUriEndpointInUseException">
            The request was rejected because the <c>XksProxyUriEndpoint</c> is already associated
            with another external key store in this Amazon Web Services Region. To identify the
            cause, see the error message that accompanies the exception.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyUriInUseException">
            The request was rejected because the concatenation of the <c>XksProxyUriEndpoint</c>
            and <c>XksProxyUriPath</c> is already associated with another external key store in
            this Amazon Web Services Region. Each external key store in a Region must use a unique
            external key store proxy API address.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyUriUnreachableException">
            KMS was unable to reach the specified <c>XksProxyUriPath</c>. The path must be reachable
            before you create the external key store or update its settings.
            
             
            <para>
            This exception is also thrown when the external key store proxy response to a <c>GetHealthStatus</c>
            request indicates that all external key manager instances are unavailable.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInUseException">
            The request was rejected because the specified Amazon VPC endpoint service is already
            associated with another external key store in this Amazon Web Services Region. Each
            external key store in a Region must use a different Amazon VPC endpoint service.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInvalidConfigurationException">
            The request was rejected because the Amazon VPC endpoint service configuration does
            not fulfill the requirements for an external key store. To identify the cause, see
            the error message that accompanies the exception and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/vpc-connectivity.html#xks-vpc-requirements">review
            the requirements</a> for Amazon VPC endpoint service connectivity for an external
            key store.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceNotFoundException">
            The request was rejected because KMS could not find the specified VPC endpoint service.
            Use <a>DescribeCustomKeyStores</a> to verify the VPC endpoint service name for the
            external key store. Also, confirm that the <c>Allow principals</c> list for the VPC
            endpoint service includes the KMS service principal for the Region, such as <c>cks.kms.us-east-1.amazonaws.com</c>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UpdateCustomKeyStore">REST API Reference for UpdateCustomKeyStore Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.UpdateKeyDescriptionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates the description of a KMS key. To see the description of a KMS key, use <a>DescribeKey</a>.
            
            
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateKeyDescription</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Updates the description of the specified KMS key. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="description">New description for the KMS key. <important> Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. </important></param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateKeyDescription service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UpdateKeyDescription">REST API Reference for UpdateKeyDescription Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.UpdateKeyDescriptionAsync(Amazon.KeyManagementService.Model.UpdateKeyDescriptionRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the description of a KMS key. To see the description of a KMS key, use <a>DescribeKey</a>.
            
            
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateKeyDescription</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateKeyDescription service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateKeyDescription service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UpdateKeyDescription">REST API Reference for UpdateKeyDescription Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.UpdatePrimaryRegionAsync(Amazon.KeyManagementService.Model.UpdatePrimaryRegionRequest,System.Threading.CancellationToken)">
            <summary>
            Changes the primary key of a multi-Region key. 
            
             
            <para>
            This operation changes the replica key in the specified Region to a primary key and
            changes the former primary key to a replica key. For example, suppose you have a primary
            key in <c>us-east-1</c> and a replica key in <c>eu-west-2</c>. If you run <c>UpdatePrimaryRegion</c>
            with a <c>PrimaryRegion</c> value of <c>eu-west-2</c>, the primary key is now the
            key in <c>eu-west-2</c>, and the key in <c>us-east-1</c> becomes a replica key. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-update">Updating
            the primary Region</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            This operation supports <i>multi-Region keys</i>, an KMS feature that lets you create
            multiple interoperable KMS keys in different Amazon Web Services Regions. Because
            these KMS keys have the same key ID, key material, and other metadata, you can use
            them interchangeably to encrypt data in one Amazon Web Services Region and decrypt
            it in a different Amazon Web Services Region without re-encrypting the data or making
            a cross-Region call. For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The <i>primary key</i> of a multi-Region key is the source for properties that are
            always shared by primary and replica keys, including the key material, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id">key
            ID</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-spec">key
            spec</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-usage">key
            usage</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-origin">key
            material origin</a>, and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            key rotation</a>. It's the only key that can be replicated. You cannot <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html">delete
            the primary key</a> until all replica keys are deleted.
            </para>
             
            <para>
            The key ID and primary Region that you specify uniquely identify the replica key that
            will become the primary key. The primary Region must already have a replica key. This
            operation does not create a KMS key in the specified Region. To find the replica keys,
            use the <a>DescribeKey</a> operation on the primary key or any replica key. To create
            a replica key, use the <a>ReplicateKey</a> operation.
            </para>
             
            <para>
            You can run this operation while using the affected multi-Region keys in cryptographic
            operations. This operation should not delay, interrupt, or cause failures in cryptographic
            operations. 
            </para>
             
            <para>
            Even after this operation completes, the process of updating the primary Region might
            still be in progress for a few more seconds. Operations such as <c>DescribeKey</c>
            might display both the old and new primary keys as replicas. The old and new primary
            keys have a transient key state of <c>Updating</c>. The original key state is restored
            when the update is complete. While the key state is <c>Updating</c>, you can use the
            keys in cryptographic operations, but you cannot replicate the new primary key or
            perform certain management operations, such as enabling or disabling these keys. For
            details about the <c>Updating</c> key state, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            This operation does not return any output. To verify that primary key is changed,
            use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot use this operation in a different Amazon
            Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: 
            </para>
             <ul> <li> 
            <para>
             <c>kms:UpdatePrimaryRegion</c> on the current primary key (in the primary key's Region).
            Include this permission primary key's key policy.
            </para>
             </li> <li> 
            <para>
             <c>kms:UpdatePrimaryRegion</c> on the current replica key (in the replica key's Region).
            Include this permission in the replica key's key policy.
            </para>
             </li> </ul> 
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReplicateKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdatePrimaryRegion service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdatePrimaryRegion service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UpdatePrimaryRegion">REST API Reference for UpdatePrimaryRegion Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.VerifyAsync(Amazon.KeyManagementService.Model.VerifyRequest,System.Threading.CancellationToken)">
            <summary>
            Verifies a digital signature that was generated by the <a>Sign</a> operation. 
            
              
            <para>
            Verification confirms that an authorized user signed the message with the specified
            KMS key and signing algorithm, and the message hasn't changed since it was signed.
            If the signature is verified, the value of the <c>SignatureValid</c> field in the
            response is <c>True</c>. If the signature verification fails, the <c>Verify</c> operation
            fails with an <c>KMSInvalidSignatureException</c> exception.
            </para>
             
            <para>
            A digital signature is generated by using the private key in an asymmetric KMS key.
            The signature is verified by using the public key in the same asymmetric KMS key.
            For information about asymmetric KMS keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            To use the <c>Verify</c> operation, specify the same asymmetric KMS key, message,
            and signing algorithm that were used to produce the signature. The message type does
            not need to be the same as the one used for signing, but it must indicate whether
            the value of the <c>Message</c> parameter should be hashed as part of the verification
            process.
            </para>
             
            <para>
            You can also verify the digital signature by using the public key of the KMS key outside
            of KMS. Use the <a>GetPublicKey</a> operation to download the public key in the asymmetric
            KMS key and then use the public key to verify the signature outside of KMS. The advantage
            of using the <c>Verify</c> operation is that it is performed within KMS. As a result,
            it's easy to call, the operation is performed within the FIPS boundary, it is logged
            in CloudTrail, and you can use key policy and IAM policy to determine who is authorized
            to use the KMS key to verify signatures.
            </para>
             
            <para>
            To verify a signature outside of KMS with an SM2 public key (China Regions only),
            you must specify the distinguishing ID. By default, KMS uses <c>1234567812345678</c>
            as the distinguishing ID. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-sm-offline-verification">Offline
            verification with SM2 key pairs</a>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:Verify</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>Sign</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Verify service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Verify service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidSignatureException">
            The request was rejected because the signature verification failed. Signature verification
            fails when it cannot confirm that signature was produced by signing the specified
            message with the specified KMS key and signing algorithm.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/Verify">REST API Reference for Verify Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.VerifyMacAsync(Amazon.KeyManagementService.Model.VerifyMacRequest,System.Threading.CancellationToken)">
            <summary>
            Verifies the hash-based message authentication code (HMAC) for a specified message,
            HMAC KMS key, and MAC algorithm. To verify the HMAC, <c>VerifyMac</c> computes an
            HMAC using the message, HMAC KMS key, and MAC algorithm that you specify, and compares
            the computed HMAC to the HMAC that you specify. If the HMACs are identical, the verification
            succeeds; otherwise, it fails. Verification indicates that the message hasn't changed
            since the HMAC was calculated, and the specified key was used to generate and verify
            the HMAC.
            
             
            <para>
            HMAC KMS keys and the HMAC algorithms that KMS uses conform to industry standards
            defined in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC 2104</a>.
            </para>
             
            <para>
            This operation is part of KMS support for HMAC KMS keys. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:VerifyMac</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>GenerateMac</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the VerifyMac service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the VerifyMac service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidMacException">
            The request was rejected because the HMAC verification failed. HMAC verification fails
            when the HMAC computed by using the specified message, HMAC KMS key, and MAC algorithm
            does not match the HMAC specified in the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/VerifyMac">REST API Reference for VerifyMac Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceClient.DetermineServiceOperationEndpoint(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Returns the endpoint that will be used for a particular request.
            </summary>
            <param name="request">Request for the desired service operation.</param>
            <returns>The resolved endpoint for the given request.</returns>
        </member>
        <member name="T:Amazon.KeyManagementService.IAmazonKeyManagementService">
             <summary>
             <para>Interface for accessing KeyManagementService</para>
            
             Key Management Service 
             <para>
             Key Management Service (KMS) is an encryption and key management web service. This
             guide describes the KMS operations that you can call programmatically. For general
             information about KMS, see the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/">
             <i>Key Management Service Developer Guide</i> </a>.
             </para>
              <note> 
             <para>
             KMS has replaced the term <i>customer master key (CMK)</i> with <i>KMS key</i> and
             <i>KMS key</i>. The concept has not changed. To prevent breaking changes, KMS is keeping
             some variations of this term.
             </para>
              
             <para>
             Amazon Web Services provides SDKs that consist of libraries and sample code for various
             programming languages and platforms (Java, Ruby, .Net, macOS, Android, etc.). The
             SDKs provide a convenient way to create programmatic access to KMS and other Amazon
             Web Services services. For example, the SDKs take care of tasks such as signing requests
             (see below), managing errors, and retrying requests automatically. For more information
             about the Amazon Web Services SDKs, including how to download and install them, see
             <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>.
             </para>
              </note> 
             <para>
             We recommend that you use the Amazon Web Services SDKs to make programmatic API calls
             to KMS.
             </para>
              
             <para>
             If you need to use FIPS 140-2 validated cryptographic modules when communicating with
             Amazon Web Services, use the FIPS endpoint in your preferred Amazon Web Services Region.
             For more information about the available FIPS endpoints, see <a href="https://docs.aws.amazon.com/general/latest/gr/kms.html#kms_region">Service
             endpoints</a> in the Key Management Service topic of the <i>Amazon Web Services General
             Reference</i>.
             </para>
              
             <para>
             All KMS API calls must be signed and be transmitted using Transport Layer Security
             (TLS). KMS recommends you always use the latest supported TLS version. Clients must
             also support cipher suites with Perfect Forward Secrecy (PFS) such as Ephemeral Diffie-Hellman
             (DHE) or Elliptic Curve Ephemeral Diffie-Hellman (ECDHE). Most modern systems such
             as Java 7 and later support these modes.
             </para>
              
             <para>
              <b>Signing Requests</b> 
             </para>
              
             <para>
             Requests must be signed using an access key ID and a secret access key. We strongly
             recommend that you do not use your Amazon Web Services account root access key ID
             and secret access key for everyday work. You can use the access key ID and secret
             access key for an IAM user or you can use the Security Token Service (STS) to generate
             temporary security credentials and use those to sign requests. 
             </para>
              
             <para>
             All KMS requests must be signed with <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
             Version 4</a>.
             </para>
              
             <para>
              <b>Logging API Requests</b> 
             </para>
              
             <para>
             KMS supports CloudTrail, a service that logs Amazon Web Services API calls and related
             events for your Amazon Web Services account and delivers them to an Amazon S3 bucket
             that you specify. By using the information collected by CloudTrail, you can determine
             what requests were made to KMS, who made the request, when it was made, and so on.
             To learn more about CloudTrail, including how to turn it on and find your log files,
             see the <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/">CloudTrail
             User Guide</a>.
             </para>
              
             <para>
              <b>Additional Resources</b> 
             </para>
              
             <para>
             For more information about credentials and request signing, see the following:
             </para>
              <ul> <li> 
             <para>
              <a href="https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">Amazon
             Web Services Security Credentials</a> - This topic provides general information about
             the types of credentials used to access Amazon Web Services.
             </para>
              </li> <li> 
             <para>
              <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html">Temporary
             Security Credentials</a> - This section of the <i>IAM User Guide</i> describes how
             to create and use temporary security credentials.
             </para>
              </li> <li> 
             <para>
              <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
             Version 4 Signing Process</a> - This set of topics walks you through the process of
             signing a request using an access key ID and a secret access key.
             </para>
              </li> </ul> 
             <para>
              <b>Commonly Used API Operations</b> 
             </para>
              
             <para>
             Of the API operations discussed in this guide, the following will prove the most useful
             for most applications. You will likely perform operations other than these, such as
             creating keys and assigning policies, by using the console.
             </para>
              <ul> <li> 
             <para>
              <a>Encrypt</a> 
             </para>
              </li> <li> 
             <para>
              <a>Decrypt</a> 
             </para>
              </li> <li> 
             <para>
              <a>GenerateDataKey</a> 
             </para>
              </li> <li> 
             <para>
              <a>GenerateDataKeyWithoutPlaintext</a> 
             </para>
              </li> </ul>
             </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.IAmazonKeyManagementService.Paginators">
            <summary>
            Paginators for the service
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.CancelKeyDeletionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels the deletion of a KMS key. When this operation succeeds, the key state of
            the KMS key is <c>Disabled</c>. To enable the KMS key, use <a>EnableKey</a>. 
            
             
            <para>
            For more information about scheduling and canceling deletion of a KMS key, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html">Deleting
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CancelKeyDeletion</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>ScheduleKeyDeletion</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Identifies the KMS key whose deletion is being canceled. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CancelKeyDeletion service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CancelKeyDeletion">REST API Reference for CancelKeyDeletion Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.CancelKeyDeletionAsync(Amazon.KeyManagementService.Model.CancelKeyDeletionRequest,System.Threading.CancellationToken)">
            <summary>
            Cancels the deletion of a KMS key. When this operation succeeds, the key state of
            the KMS key is <c>Disabled</c>. To enable the KMS key, use <a>EnableKey</a>. 
            
             
            <para>
            For more information about scheduling and canceling deletion of a KMS key, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html">Deleting
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CancelKeyDeletion</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>ScheduleKeyDeletion</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CancelKeyDeletion service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CancelKeyDeletion service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CancelKeyDeletion">REST API Reference for CancelKeyDeletion Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ConnectCustomKeyStoreAsync(Amazon.KeyManagementService.Model.ConnectCustomKeyStoreRequest,System.Threading.CancellationToken)">
            <summary>
            Connects or reconnects a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> to its backing key store. For an CloudHSM key store, <c>ConnectCustomKeyStore</c>
            connects the key store to its associated CloudHSM cluster. For an external key store,
            <c>ConnectCustomKeyStore</c> connects the key store to the external key store proxy
            that communicates with your external key manager.
            
             
            <para>
            The custom key store must be connected before you can create KMS keys in the key store
            or use the KMS keys it contains. You can disconnect and reconnect a custom key store
            at any time.
            </para>
             
            <para>
            The connection process for a custom key store can take an extended amount of time
            to complete. This operation starts the connection process, but it does not wait for
            it to complete. When it succeeds, this operation quickly returns an HTTP 200 response
            and a JSON object with no properties. However, this response does not indicate that
            the custom key store is connected. To get the connection state of the custom key store,
            use the <a>DescribeCustomKeyStores</a> operation.
            </para>
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            The <c>ConnectCustomKeyStore</c> operation might fail for various reasons. To find
            the reason, use the <a>DescribeCustomKeyStores</a> operation and see the <c>ConnectionErrorCode</c>
            in the response. For help interpreting the <c>ConnectionErrorCode</c>, see <a>CustomKeyStoresListEntry</a>.
            </para>
             
            <para>
            To fix the failure, use the <a>DisconnectCustomKeyStore</a> operation to disconnect
            the custom key store, correct the error, use the <a>UpdateCustomKeyStore</a> operation
            if necessary, and then use <c>ConnectCustomKeyStore</c> again.
            </para>
             
            <para>
             <b>CloudHSM key store</b> 
            </para>
             
            <para>
            During the connection process for an CloudHSM key store, KMS finds the CloudHSM cluster
            that is associated with the custom key store, creates the connection infrastructure,
            connects to the cluster, logs into the CloudHSM client as the <c>kmsuser</c> CU, and
            rotates its password.
            </para>
             
            <para>
            To connect an CloudHSM key store, its associated CloudHSM cluster must have at least
            one active HSM. To get the number of active HSMs in a cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a>
            operation. To add HSMs to the cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html">CreateHsm</a>
            operation. Also, the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser">
            <c>kmsuser</c> crypto user</a> (CU) must not be logged into the cluster. This prevents
            KMS from using this account to log in.
            </para>
             
            <para>
            If you are having trouble connecting or disconnecting a CloudHSM key store, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            an CloudHSM key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>External key store</b> 
            </para>
             
            <para>
            When you connect an external key store that uses public endpoint connectivity, KMS
            tests its ability to communicate with your external key manager by sending a request
            via the external key store proxy.
            </para>
             
            <para>
            When you connect to an external key store that uses VPC endpoint service connectivity,
            KMS establishes the networking elements that it needs to communicate with your external
            key manager via the external key store proxy. This includes creating an interface
            endpoint to the VPC endpoint service and a private hosted zone for traffic between
            KMS and the VPC endpoint service.
            </para>
             
            <para>
            To connect an external key store, KMS must be able to connect to the external key
            store proxy, the external key store proxy must be able to communicate with your external
            key manager, and the external key manager must be available for cryptographic operations.
            </para>
             
            <para>
            If you are having trouble connecting or disconnecting an external key store, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/xks-troubleshooting.html">Troubleshooting
            an external key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ConnectCustomKeyStore</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ConnectCustomKeyStore service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ConnectCustomKeyStore service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException">
            The request was rejected because the associated CloudHSM cluster did not meet the
            configuration requirements for an CloudHSM key store.
            
             <ul> <li> 
            <para>
            The CloudHSM cluster must be configured with private subnets in at least two different
            Availability Zones in the Region.
            </para>
             </li> <li> 
            <para>
            The <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">security
            group for the cluster</a> (cloudhsm-cluster-<i>&lt;cluster-id&gt;</i>-sg) must include
            inbound rules and outbound rules that allow TCP traffic on ports 2223-2225. The <b>Source</b>
            in the inbound rules and the <b>Destination</b> in the outbound rules must match the
            security group ID. These rules are set by default when you create the CloudHSM cluster.
            Do not delete or change them. To get information about a particular security group,
            use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html">DescribeSecurityGroups</a>
            operation.
            </para>
             </li> <li> 
            <para>
            The CloudHSM cluster must contain at least as many HSMs as the operation requires.
            To add HSMs, use the CloudHSM <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html">CreateHsm</a>
            operation.
            </para>
             
            <para>
            For the <a>CreateCustomKeyStore</a>, <a>UpdateCustomKeyStore</a>, and <a>CreateKey</a>
            operations, the CloudHSM cluster must have at least two active HSMs, each in a different
            Availability Zone. For the <a>ConnectCustomKeyStore</a> operation, the CloudHSM must
            contain at least one active HSM.
            </para>
             </li> </ul> 
            <para>
            For information about the requirements for an CloudHSM cluster that is associated
            with an CloudHSM key store, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">Assemble
            the Prerequisites</a> in the <i>Key Management Service Developer Guide</i>. For information
            about creating a private subnet for an CloudHSM cluster, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/create-subnets.html">Create
            a Private Subnet</a> in the <i>CloudHSM User Guide</i>. For information about cluster
            security groups, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">Configure
            a Default Security Group</a> in the <i> <i>CloudHSM User Guide</i> </i>. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException">
            The request was rejected because the CloudHSM cluster associated with the CloudHSM
            key store is not active. Initialize and activate the cluster and try the command again.
            For detailed instructions, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/getting-started.html">Getting
            Started</a> in the <i>CloudHSM User Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ConnectCustomKeyStore">REST API Reference for ConnectCustomKeyStore Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.CreateAliasAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a friendly name for a KMS key. 
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            You can use an alias to identify a KMS key in the KMS console, in the <a>DescribeKey</a>
            operation and in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>, such as <a>Encrypt</a> and <a>GenerateDataKey</a>. You can also change
            the KMS key that's associated with the alias (<a>UpdateAlias</a>) or delete the alias
            (<a>DeleteAlias</a>) at any time. These operations don't affect the underlying KMS
            key. 
            </para>
             
            <para>
            You can associate the alias with any customer managed key in the same Amazon Web Services
            Region. Each alias is associated with only one KMS key at a time, but a KMS key can
            have multiple aliases. A valid KMS key is required. You can't create an alias without
            a KMS key.
            </para>
             
            <para>
            The alias must be unique in the account and Region, but you can have aliases with
            the same name in different Regions. For detailed information about aliases, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html">Using
            aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            This operation does not return a response. To get the alias that you created, use
            the <a>ListAliases</a> operation.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on an alias in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateAlias</a>
            on the KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="aliasName">Specifies the alias name. This value must begin with <c>alias/</c> followed by a name, such as <c>alias/ExampleAlias</c>.  <important> Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. </important> The <c>AliasName</c> value must be string of 1-256 characters. It can contain only alphanumeric characters, forward slashes (/), underscores (_), and dashes (-). The alias name cannot begin with <c>alias/aws/</c>. The <c>alias/aws/</c> prefix is reserved for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon Web Services managed keys</a>.</param>
            <param name="targetKeyId">Associates the alias with the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed key</a>. The KMS key must be in the same Amazon Web Services Region.  A valid key ID is required. If you supply a null or empty string value, this operation returns an error. For help finding the key ID and ARN, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn">Finding the Key ID and ARN</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateAlias service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.AlreadyExistsException">
            The request was rejected because it attempted to create a resource that already exists.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidAliasNameException">
            The request was rejected because the specified alias name is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CreateAlias">REST API Reference for CreateAlias Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.CreateAliasAsync(Amazon.KeyManagementService.Model.CreateAliasRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a friendly name for a KMS key. 
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            You can use an alias to identify a KMS key in the KMS console, in the <a>DescribeKey</a>
            operation and in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>, such as <a>Encrypt</a> and <a>GenerateDataKey</a>. You can also change
            the KMS key that's associated with the alias (<a>UpdateAlias</a>) or delete the alias
            (<a>DeleteAlias</a>) at any time. These operations don't affect the underlying KMS
            key. 
            </para>
             
            <para>
            You can associate the alias with any customer managed key in the same Amazon Web Services
            Region. Each alias is associated with only one KMS key at a time, but a KMS key can
            have multiple aliases. A valid KMS key is required. You can't create an alias without
            a KMS key.
            </para>
             
            <para>
            The alias must be unique in the account and Region, but you can have aliases with
            the same name in different Regions. For detailed information about aliases, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html">Using
            aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            This operation does not return a response. To get the alias that you created, use
            the <a>ListAliases</a> operation.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on an alias in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateAlias</a>
            on the KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateAlias service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateAlias service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.AlreadyExistsException">
            The request was rejected because it attempted to create a resource that already exists.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidAliasNameException">
            The request was rejected because the specified alias name is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CreateAlias">REST API Reference for CreateAlias Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.CreateCustomKeyStoreAsync(Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> backed by a key store that you own and manage. When you use a KMS key
            in a custom key store for a cryptographic operation, the cryptographic operation is
            actually performed in your key store using your keys. KMS supports <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key stores</a> backed by an <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/clusters.html">CloudHSM
            cluster</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key stores</a> backed by an external key store proxy and external key manager outside
            of Amazon Web Services.
            
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            Before you create the custom key store, the required elements must be in place and
            operational. We recommend that you use the test tools that KMS provides to verify
            the configuration your external key store proxy. For details about the required elements
            and verification tests, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">Assemble
            the prerequisites (for CloudHSM key stores)</a> or <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-xks-keystore.html#xks-requirements">Assemble
            the prerequisites (for external key stores)</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            To create a custom key store, use the following parameters.
            </para>
             <ul> <li> 
            <para>
            To create an CloudHSM key store, specify the <c>CustomKeyStoreName</c>, <c>CloudHsmClusterId</c>,
            <c>KeyStorePassword</c>, and <c>TrustAnchorCertificate</c>. The <c>CustomKeyStoreType</c>
            parameter is optional for CloudHSM key stores. If you include it, set it to the default
            value, <c>AWS_CLOUDHSM</c>. For help with failures, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            an CloudHSM key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
            To create an external key store, specify the <c>CustomKeyStoreName</c> and a <c>CustomKeyStoreType</c>
            of <c>EXTERNAL_KEY_STORE</c>. Also, specify values for <c>XksProxyConnectivity</c>,
            <c>XksProxyAuthenticationCredential</c>, <c>XksProxyUriEndpoint</c>, and <c>XksProxyUriPath</c>.
            If your <c>XksProxyConnectivity</c> value is <c>VPC_ENDPOINT_SERVICE</c>, specify
            the <c>XksProxyVpcEndpointServiceName</c> parameter. For help with failures, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/xks-troubleshooting.html">Troubleshooting
            an external key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> </ul> <note> 
            <para>
            For external key stores:
            </para>
             
            <para>
            Some external key managers provide a simpler method for creating an external key store.
            For details, see your external key manager documentation.
            </para>
             
            <para>
            When creating an external key store in the KMS console, you can upload a JSON-based
            proxy configuration file with the desired values. You cannot use a proxy configuration
            with the <c>CreateCustomKeyStore</c> operation. However, you can use the values in
            the file to help you determine the correct values for the <c>CreateCustomKeyStore</c>
            parameters.
            </para>
             </note> 
            <para>
            When the operation completes successfully, it returns the ID of the new custom key
            store. Before you can use your new custom key store, you need to use the <a>ConnectCustomKeyStore</a>
            operation to connect a new CloudHSM key store to its CloudHSM cluster, or to connect
            a new external key store to the external key store proxy for your external key manager.
            Even if you are not going to use your custom key store immediately, you might want
            to connect it to verify that all settings are correct and then disconnect it until
            you are ready to use it.
            </para>
             
            <para>
            For help with failures, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            a custom key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateCustomKeyStore</a>
            (IAM policy).
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateCustomKeyStore service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateCustomKeyStore service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterInUseException">
            The request was rejected because the specified CloudHSM cluster is already associated
            with an CloudHSM key store in the account, or it shares a backup history with an CloudHSM
            key store in the account. Each CloudHSM key store in the account must be associated
            with a different CloudHSM cluster.
            
             
            <para>
            CloudHSM clusters that share a backup history have the same cluster certificate. To
            view the cluster certificate of an CloudHSM cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a>
            operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException">
            The request was rejected because the associated CloudHSM cluster did not meet the
            configuration requirements for an CloudHSM key store.
            
             <ul> <li> 
            <para>
            The CloudHSM cluster must be configured with private subnets in at least two different
            Availability Zones in the Region.
            </para>
             </li> <li> 
            <para>
            The <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">security
            group for the cluster</a> (cloudhsm-cluster-<i>&lt;cluster-id&gt;</i>-sg) must include
            inbound rules and outbound rules that allow TCP traffic on ports 2223-2225. The <b>Source</b>
            in the inbound rules and the <b>Destination</b> in the outbound rules must match the
            security group ID. These rules are set by default when you create the CloudHSM cluster.
            Do not delete or change them. To get information about a particular security group,
            use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html">DescribeSecurityGroups</a>
            operation.
            </para>
             </li> <li> 
            <para>
            The CloudHSM cluster must contain at least as many HSMs as the operation requires.
            To add HSMs, use the CloudHSM <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html">CreateHsm</a>
            operation.
            </para>
             
            <para>
            For the <a>CreateCustomKeyStore</a>, <a>UpdateCustomKeyStore</a>, and <a>CreateKey</a>
            operations, the CloudHSM cluster must have at least two active HSMs, each in a different
            Availability Zone. For the <a>ConnectCustomKeyStore</a> operation, the CloudHSM must
            contain at least one active HSM.
            </para>
             </li> </ul> 
            <para>
            For information about the requirements for an CloudHSM cluster that is associated
            with an CloudHSM key store, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">Assemble
            the Prerequisites</a> in the <i>Key Management Service Developer Guide</i>. For information
            about creating a private subnet for an CloudHSM cluster, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/create-subnets.html">Create
            a Private Subnet</a> in the <i>CloudHSM User Guide</i>. For information about cluster
            security groups, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">Configure
            a Default Security Group</a> in the <i> <i>CloudHSM User Guide</i> </i>. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException">
            The request was rejected because the CloudHSM cluster associated with the CloudHSM
            key store is not active. Initialize and activate the cluster and try the command again.
            For detailed instructions, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/getting-started.html">Getting
            Started</a> in the <i>CloudHSM User Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotFoundException">
            The request was rejected because KMS cannot find the CloudHSM cluster with the specified
            cluster ID. Retry the request with a different cluster ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNameInUseException">
            The request was rejected because the specified custom key store name is already assigned
            to another custom key store in the account. Try again with a custom key store name
            that is unique in the account.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.IncorrectTrustAnchorException">
            The request was rejected because the trust anchor certificate in the request to create
            an CloudHSM key store is not the trust anchor certificate for the specified CloudHSM
            cluster.
            
             
            <para>
            When you <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html#sign-csr">initialize
            the CloudHSM cluster</a>, you create the trust anchor certificate and save it in the
            <c>customerCA.crt</c> file.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyIncorrectAuthenticationCredentialException">
            The request was rejected because the proxy credentials failed to authenticate to the
            specified external key store proxy. The specified external key store proxy rejected
            a status request from KMS due to invalid credentials. This can indicate an error in
            the credentials or in the identification of the external key store proxy.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyInvalidConfigurationException">
            The request was rejected because the external key store proxy is not configured correctly.
            To identify the cause, see the error message that accompanies the exception.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyInvalidResponseException">
            KMS cannot interpret the response it received from the external key store proxy. The
            problem might be a poorly constructed response, but it could also be a transient network
            issue. If you see this error repeatedly, report it to the proxy vendor.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyUriEndpointInUseException">
            The request was rejected because the <c>XksProxyUriEndpoint</c> is already associated
            with another external key store in this Amazon Web Services Region. To identify the
            cause, see the error message that accompanies the exception.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyUriInUseException">
            The request was rejected because the concatenation of the <c>XksProxyUriEndpoint</c>
            and <c>XksProxyUriPath</c> is already associated with another external key store in
            this Amazon Web Services Region. Each external key store in a Region must use a unique
            external key store proxy API address.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyUriUnreachableException">
            KMS was unable to reach the specified <c>XksProxyUriPath</c>. The path must be reachable
            before you create the external key store or update its settings.
            
             
            <para>
            This exception is also thrown when the external key store proxy response to a <c>GetHealthStatus</c>
            request indicates that all external key manager instances are unavailable.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInUseException">
            The request was rejected because the specified Amazon VPC endpoint service is already
            associated with another external key store in this Amazon Web Services Region. Each
            external key store in a Region must use a different Amazon VPC endpoint service.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInvalidConfigurationException">
            The request was rejected because the Amazon VPC endpoint service configuration does
            not fulfill the requirements for an external key store. To identify the cause, see
            the error message that accompanies the exception and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/vpc-connectivity.html#xks-vpc-requirements">review
            the requirements</a> for Amazon VPC endpoint service connectivity for an external
            key store.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceNotFoundException">
            The request was rejected because KMS could not find the specified VPC endpoint service.
            Use <a>DescribeCustomKeyStores</a> to verify the VPC endpoint service name for the
            external key store. Also, confirm that the <c>Allow principals</c> list for the VPC
            endpoint service includes the KMS service principal for the Region, such as <c>cks.kms.us-east-1.amazonaws.com</c>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CreateCustomKeyStore">REST API Reference for CreateCustomKeyStore Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.CreateGrantAsync(Amazon.KeyManagementService.Model.CreateGrantRequest,System.Threading.CancellationToken)">
            <summary>
            Adds a grant to a KMS key. 
            
             
            <para>
            A <i>grant</i> is a policy instrument that allows Amazon Web Services principals to
            use KMS keys in cryptographic operations. It also can allow them to view a KMS key
            (<a>DescribeKey</a>) and create and manage grants. When authorizing access to a KMS
            key, grants are considered along with key policies and IAM policies. Grants are often
            used for temporary permissions because you can create one, use its permissions, and
            delete it without changing your key policies or IAM policies. 
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
            The <c>CreateGrant</c> operation returns a <c>GrantToken</c> and a <c>GrantId</c>.
            </para>
             <ul> <li> 
            <para>
            When you create, retire, or revoke a grant, there might be a brief delay, usually
            less than five minutes, until the grant is available throughout KMS. This state is
            known as <i>eventual consistency</i>. Once the grant has achieved eventual consistency,
            the grantee principal can use the permissions in the grant without identifying the
            grant. 
            </para>
             
            <para>
            However, to use the permissions in the grant immediately, use the <c>GrantToken</c>
            that <c>CreateGrant</c> returns. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            The <c>CreateGrant</c> operation also returns a <c>GrantId</c>. You can use the <c>GrantId</c>
            and a key identifier to identify the grant in the <a>RetireGrant</a> and <a>RevokeGrant</a>
            operations. To find the grant ID, use the <a>ListGrants</a> or <a>ListRetirableGrants</a>
            operations.
            </para>
             </li> </ul> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateGrant</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateGrant service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateGrant service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CreateGrant">REST API Reference for CreateGrant Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.CreateKeyAsync(Amazon.KeyManagementService.Model.CreateKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a unique customer managed <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#kms-keys">KMS
            key</a> in your Amazon Web Services account and Region. You can use a KMS key in cryptographic
            operations, such as encryption and signing. Some Amazon Web Services services let
            you use KMS keys that you create and manage to protect your service resources.
            
             
            <para>
            A KMS key is a logical representation of a cryptographic key. In addition to the key
            material used in cryptographic operations, a KMS key includes metadata, such as the
            key ID, key policy, creation date, description, and key state. For details, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/getting-started.html">Managing
            keys</a> in the <i>Key Management Service Developer Guide</i> 
            </para>
             
            <para>
            Use the parameters of <c>CreateKey</c> to specify the type of KMS key, the source
            of its key material, its key policy, description, tags, and other properties.
            </para>
             <note> 
            <para>
            KMS has replaced the term <i>customer master key (CMK)</i> with <i>KMS key</i> and
            <i>KMS key</i>. The concept has not changed. To prevent breaking changes, KMS is keeping
            some variations of this term.
            </para>
             </note> 
            <para>
            To create different types of KMS keys, use the following guidance:
            </para>
             <dl> <dt>Symmetric encryption KMS key</dt> <dd> 
            <para>
            By default, <c>CreateKey</c> creates a symmetric encryption KMS key with key material
            that KMS generates. This is the basic and most widely used type of KMS key, and provides
            the best performance.
            </para>
             
            <para>
            To create a symmetric encryption KMS key, you don't need to specify any parameters.
            The default value for <c>KeySpec</c>, <c>SYMMETRIC_DEFAULT</c>, the default value
            for <c>KeyUsage</c>, <c>ENCRYPT_DECRYPT</c>, and the default value for <c>Origin</c>,
            <c>AWS_KMS</c>, create a symmetric encryption KMS key with KMS key material.
            </para>
             
            <para>
            If you need a key for basic encryption and decryption or you are creating a KMS key
            to protect your resources in an Amazon Web Services service, create a symmetric encryption
            KMS key. The key material in a symmetric encryption key never leaves KMS unencrypted.
            You can use a symmetric encryption KMS key to encrypt and decrypt data up to 4,096
            bytes, but they are typically used to generate data keys and data keys pairs. For
            details, see <a>GenerateDataKey</a> and <a>GenerateDataKeyPair</a>.
            </para>
             
            <para>
             
            </para>
             </dd> <dt>Asymmetric KMS keys</dt> <dd> 
            <para>
            To create an asymmetric KMS key, use the <c>KeySpec</c> parameter to specify the type
            of key material in the KMS key. Then, use the <c>KeyUsage</c> parameter to determine
            whether the KMS key will be used to encrypt and decrypt or sign and verify. You can't
            change these properties after the KMS key is created.
            </para>
             
            <para>
            Asymmetric KMS keys contain an RSA key pair, Elliptic Curve (ECC) key pair, or an
            SM2 key pair (China Regions only). The private key in an asymmetric KMS key never
            leaves KMS unencrypted. However, you can use the <a>GetPublicKey</a> operation to
            download the public key so it can be used outside of KMS. KMS keys with RSA key pairs
            can be used to encrypt or decrypt data or sign and verify messages (but not both).
            KMS keys with NIST-recommended ECC key pairs can be used to sign and verify messages
            or derive key agreement secrets (but not both). KMS keys with <c>ECC_SECG_P256K1</c>
            can be used only to sign and verify messages. KMS keys with SM2 key pairs (China Regions
            only) can be used to either encrypt or decrypt data, sign and verify messages, or
            generate key agreement secrets. For information about asymmetric KMS keys, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             
            </para>
             </dd> <dt>HMAC KMS key</dt> <dd> 
            <para>
            To create an HMAC KMS key, set the <c>KeySpec</c> parameter to a key spec value for
            HMAC KMS keys. Then set the <c>KeyUsage</c> parameter to <c>GENERATE_VERIFY_MAC</c>.
            You must set the key usage even though <c>GENERATE_VERIFY_MAC</c> is the only valid
            key usage value for HMAC KMS keys. You can't change these properties after the KMS
            key is created.
            </para>
             
            <para>
            HMAC KMS keys are symmetric keys that never leave KMS unencrypted. You can use HMAC
            keys to generate (<a>GenerateMac</a>) and verify (<a>VerifyMac</a>) HMAC codes for
            messages up to 4096 bytes.
            </para>
             
            <para>
             
            </para>
             </dd> <dt>Multi-Region primary keys</dt> <dt>Imported key material</dt> <dd> 
            <para>
            To create a multi-Region <i>primary key</i> in the local Amazon Web Services Region,
            use the <c>MultiRegion</c> parameter with a value of <c>True</c>. To create a multi-Region
            <i>replica key</i>, that is, a KMS key with the same key ID and key material as a
            primary key, but in a different Amazon Web Services Region, use the <a>ReplicateKey</a>
            operation. To change a replica key to a primary key, and its primary key to a replica
            key, use the <a>UpdatePrimaryRegion</a> operation.
            </para>
             
            <para>
            You can create multi-Region KMS keys for all supported KMS key types: symmetric encryption
            KMS keys, HMAC KMS keys, asymmetric encryption KMS keys, and asymmetric signing KMS
            keys. You can also create multi-Region keys with imported key material. However, you
            can't create multi-Region keys in a custom key store.
            </para>
             
            <para>
            This operation supports <i>multi-Region keys</i>, an KMS feature that lets you create
            multiple interoperable KMS keys in different Amazon Web Services Regions. Because
            these KMS keys have the same key ID, key material, and other metadata, you can use
            them interchangeably to encrypt data in one Amazon Web Services Region and decrypt
            it in a different Amazon Web Services Region without re-encrypting the data or making
            a cross-Region call. For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             
            </para>
             </dd> <dd> 
            <para>
            To import your own key material into a KMS key, begin by creating a KMS key with no
            key material. To do this, use the <c>Origin</c> parameter of <c>CreateKey</c> with
            a value of <c>EXTERNAL</c>. Next, use <a>GetParametersForImport</a> operation to get
            a public key and import token. Use the wrapping public key to encrypt your key material.
            Then, use <a>ImportKeyMaterial</a> with your import token to import the key material.
            For step-by-step instructions, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            Key Material</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             
            <para>
            You can import key material into KMS keys of all supported KMS key types: symmetric
            encryption KMS keys, HMAC KMS keys, asymmetric encryption KMS keys, and asymmetric
            signing KMS keys. You can also create multi-Region keys with imported key material.
            However, you can't import key material into a KMS key in a custom key store.
            </para>
             
            <para>
            To create a multi-Region primary key with imported key material, use the <c>Origin</c>
            parameter of <c>CreateKey</c> with a value of <c>EXTERNAL</c> and the <c>MultiRegion</c>
            parameter with a value of <c>True</c>. To create replicas of the multi-Region primary
            key, use the <a>ReplicateKey</a> operation. For instructions, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-import.html
            ">Importing key material into multi-Region keys</a>. For more information about multi-Region
            keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             
            </para>
             </dd> <dt>Custom key store</dt> <dd> 
            <para>
            A <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> lets you protect your Amazon Web Services resources using keys in a
            backing key store that you own and manage. When you request a cryptographic operation
            with a KMS key in a custom key store, the operation is performed in the backing key
            store using its cryptographic keys.
            </para>
             
            <para>
            KMS supports <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key stores</a> backed by an CloudHSM cluster and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key stores</a> backed by an external key manager outside of Amazon Web Services. When
            you create a KMS key in an CloudHSM key store, KMS generates an encryption key in
            the CloudHSM cluster and associates it with the KMS key. When you create a KMS key
            in an external key store, you specify an existing encryption key in the external key
            manager.
            </para>
             <note> 
            <para>
            Some external key managers provide a simpler method for creating a KMS key in an external
            key store. For details, see your external key manager documentation.
            </para>
             </note> 
            <para>
            Before you create a KMS key in a custom key store, the <c>ConnectionState</c> of the
            key store must be <c>CONNECTED</c>. To connect the custom key store, use the <a>ConnectCustomKeyStore</a>
            operation. To find the <c>ConnectionState</c>, use the <a>DescribeCustomKeyStores</a>
            operation.
            </para>
             
            <para>
            To create a KMS key in a custom key store, use the <c>CustomKeyStoreId</c>. Use the
            default <c>KeySpec</c> value, <c>SYMMETRIC_DEFAULT</c>, and the default <c>KeyUsage</c>
            value, <c>ENCRYPT_DECRYPT</c> to create a symmetric encryption key. No other key type
            is supported in a custom key store.
            </para>
             
            <para>
            To create a KMS key in an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key store</a>, use the <c>Origin</c> parameter with a value of <c>AWS_CLOUDHSM</c>.
            The CloudHSM cluster that is associated with the custom key store must have at least
            two active HSMs in different Availability Zones in the Amazon Web Services Region.
            </para>
             
            <para>
            To create a KMS key in an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key store</a>, use the <c>Origin</c> parameter with a value of <c>EXTERNAL_KEY_STORE</c>
            and an <c>XksKeyId</c> parameter that identifies an existing external key.
            </para>
             <note> 
            <para>
            Some external key managers provide a simpler method for creating a KMS key in an external
            key store. For details, see your external key manager documentation.
            </para>
             </note> </dd> </dl> 
            <para>
             <b>Cross-account use</b>: No. You cannot use this operation to create a KMS key in
            a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateKey</a>
            (IAM policy). To use the <c>Tags</c> parameter, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a>
            (IAM policy). For examples and information about related permissions, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/iam-policies.html#iam-policy-example-create-key">Allow
            a user to create KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DescribeKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeys</a> 
            </para>
             </li> <li> 
            <para>
             <a>ScheduleKeyDeletion</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException">
            The request was rejected because the associated CloudHSM cluster did not meet the
            configuration requirements for an CloudHSM key store.
            
             <ul> <li> 
            <para>
            The CloudHSM cluster must be configured with private subnets in at least two different
            Availability Zones in the Region.
            </para>
             </li> <li> 
            <para>
            The <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">security
            group for the cluster</a> (cloudhsm-cluster-<i>&lt;cluster-id&gt;</i>-sg) must include
            inbound rules and outbound rules that allow TCP traffic on ports 2223-2225. The <b>Source</b>
            in the inbound rules and the <b>Destination</b> in the outbound rules must match the
            security group ID. These rules are set by default when you create the CloudHSM cluster.
            Do not delete or change them. To get information about a particular security group,
            use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html">DescribeSecurityGroups</a>
            operation.
            </para>
             </li> <li> 
            <para>
            The CloudHSM cluster must contain at least as many HSMs as the operation requires.
            To add HSMs, use the CloudHSM <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html">CreateHsm</a>
            operation.
            </para>
             
            <para>
            For the <a>CreateCustomKeyStore</a>, <a>UpdateCustomKeyStore</a>, and <a>CreateKey</a>
            operations, the CloudHSM cluster must have at least two active HSMs, each in a different
            Availability Zone. For the <a>ConnectCustomKeyStore</a> operation, the CloudHSM must
            contain at least one active HSM.
            </para>
             </li> </ul> 
            <para>
            For information about the requirements for an CloudHSM cluster that is associated
            with an CloudHSM key store, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">Assemble
            the Prerequisites</a> in the <i>Key Management Service Developer Guide</i>. For information
            about creating a private subnet for an CloudHSM cluster, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/create-subnets.html">Create
            a Private Subnet</a> in the <i>CloudHSM User Guide</i>. For information about cluster
            security groups, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">Configure
            a Default Security Group</a> in the <i> <i>CloudHSM User Guide</i> </i>. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException">
            The request was rejected because the specified policy is not syntactically or semantically
            correct.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.TagException">
            The request was rejected because one or more tags are not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksKeyAlreadyInUseException">
            The request was rejected because the (<c>XksKeyId</c>) is already associated with
            another KMS key in this external key store. Each KMS key in an external key store
            must be associated with a different external key.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksKeyInvalidConfigurationException">
            The request was rejected because the external key specified by the <c>XksKeyId</c>
            parameter did not meet the configuration requirements for an external key store.
            
             
            <para>
            The external key must be an AES-256 symmetric key that is enabled and performs encryption
            and decryption.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksKeyNotFoundException">
            The request was rejected because the external key store proxy could not find the external
            key. This exception is thrown when the value of the <c>XksKeyId</c> parameter doesn't
            identify a key in the external key manager associated with the external key proxy.
            
             
            <para>
            Verify that the <c>XksKeyId</c> represents an existing key in the external key manager.
            Use the key identifier that the external key store proxy uses to identify the key.
            For details, see the documentation provided with your external key store proxy or
            key manager.
            </para>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/CreateKey">REST API Reference for CreateKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DecryptAsync(Amazon.KeyManagementService.Model.DecryptRequest,System.Threading.CancellationToken)">
            <summary>
            Decrypts ciphertext that was encrypted by a KMS key using any of the following operations:
            
             <ul> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyWithoutPlaintext</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPairWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
            You can use this operation to decrypt ciphertext that was encrypted under a symmetric
            encryption KMS key or an asymmetric encryption KMS key. When the KMS key is asymmetric,
            you must specify the KMS key and the encryption algorithm that was used to encrypt
            the ciphertext. For information about asymmetric KMS keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The <c>Decrypt</c> operation also decrypts ciphertext that was encrypted outside of
            KMS by the public key in an KMS asymmetric KMS key. However, it cannot decrypt symmetric
            ciphertext produced by other libraries, such as the <a href="https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/">Amazon
            Web Services Encryption SDK</a> or <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html">Amazon
            S3 client-side encryption</a>. These libraries return a ciphertext format that is
            incompatible with KMS.
            </para>
             
            <para>
            If the ciphertext was encrypted under a symmetric encryption KMS key, the <c>KeyId</c>
            parameter is optional. KMS can get this information from metadata that it adds to
            the symmetric ciphertext blob. This feature adds durability to your implementation
            by ensuring that authorized users can decrypt ciphertext decades after it was encrypted,
            even if they've lost track of the key ID. However, specifying the KMS key is always
            recommended as a best practice. When you use the <c>KeyId</c> parameter to specify
            a KMS key, KMS only uses the KMS key you specify. If the ciphertext was encrypted
            under a different KMS key, the <c>Decrypt</c> operation fails. This practice ensures
            that you use the KMS key that you intend.
            </para>
             
            <para>
            Whenever possible, use key policies to give users permission to call the <c>Decrypt</c>
            operation on a particular KMS key, instead of using &amp;IAM; policies. Otherwise,
            you might create an &amp;IAM; policy that gives the user <c>Decrypt</c> permission
            on all KMS keys. This user could decrypt ciphertext that was encrypted by KMS keys
            in other accounts if the key policy for the cross-account KMS key permits it. If you
            must use an IAM policy for <c>Decrypt</c> permissions, limit the user to particular
            KMS keys or particular trusted accounts. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/iam-policies.html#iam-policies-best-practices">Best
            practices for IAM policies</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <c>Decrypt</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>Decrypt</c> for a Nitro enclave, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. Instead of the plaintext
            data, the response includes the plaintext data encrypted with the public key from
            the attestation document (<c>CiphertextForRecipient</c>). For information about the
            interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. If you use the <c>KeyId</c> parameter to identify
            a KMS key in a different Amazon Web Services account, specify the key ARN or the alias
            ARN of the KMS key.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:Decrypt</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReEncrypt</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Decrypt service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Decrypt service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.IncorrectKeyException">
            The request was rejected because the specified KMS key cannot decrypt the data. The
            <c>KeyId</c> in a <a>Decrypt</a> request and the <c>SourceKeyId</c> in a <a>ReEncrypt</a>
            request must identify the same KMS key that was used to encrypt the ciphertext.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidCiphertextException">
            From the <a>Decrypt</a> or <a>ReEncrypt</a> operation, the request was rejected because
            the specified ciphertext, or additional authenticated data incorporated into the ciphertext,
            such as the encryption context, is corrupted, missing, or otherwise invalid.
            
             
            <para>
            From the <a>ImportKeyMaterial</a> operation, the request was rejected because KMS
            could not decrypt the encrypted (wrapped) key material. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/Decrypt">REST API Reference for Decrypt Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DeleteAliasAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified alias. 
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            Because an alias is not a property of a KMS key, you can delete and change the aliases
            of a KMS key without affecting the KMS key. Also, aliases do not appear in the response
            from the <a>DescribeKey</a> operation. To get the aliases of all KMS keys, use the
            <a>ListAliases</a> operation. 
            </para>
             
            <para>
            Each KMS key can have multiple aliases. To change the alias of a KMS key, use <a>DeleteAlias</a>
            to delete the current alias and <a>CreateAlias</a> to create a new alias. To associate
            an existing alias with a different KMS key, call <a>UpdateAlias</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on an alias in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteAlias</a>
            on the KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="aliasName">The alias to be deleted. The alias name must begin with <c>alias/</c> followed by the alias name, such as <c>alias/ExampleAlias</c>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteAlias service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DeleteAlias">REST API Reference for DeleteAlias Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DeleteAliasAsync(Amazon.KeyManagementService.Model.DeleteAliasRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified alias. 
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            Because an alias is not a property of a KMS key, you can delete and change the aliases
            of a KMS key without affecting the KMS key. Also, aliases do not appear in the response
            from the <a>DescribeKey</a> operation. To get the aliases of all KMS keys, use the
            <a>ListAliases</a> operation. 
            </para>
             
            <para>
            Each KMS key can have multiple aliases. To change the alias of a KMS key, use <a>DeleteAlias</a>
            to delete the current alias and <a>CreateAlias</a> to create a new alias. To associate
            an existing alias with a different KMS key, call <a>UpdateAlias</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on an alias in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteAlias</a>
            on the KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteAlias service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteAlias service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DeleteAlias">REST API Reference for DeleteAlias Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DeleteCustomKeyStoreAsync(Amazon.KeyManagementService.Model.DeleteCustomKeyStoreRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. This operation does not affect any backing elements of the custom key
            store. It does not delete the CloudHSM cluster that is associated with an CloudHSM
            key store, or affect any users or keys in the cluster. For an external key store,
            it does not affect the external key store proxy, external key manager, or any external
            keys.
            
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            The custom key store that you delete cannot contain any <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#kms_keys">KMS
            keys</a>. Before deleting the key store, verify that you will never need to use any
            of the KMS keys in the key store for any <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. Then, use <a>ScheduleKeyDeletion</a> to delete the KMS keys from the
            key store. After the required waiting period expires and all KMS keys are deleted
            from the custom key store, use <a>DisconnectCustomKeyStore</a> to disconnect the key
            store from KMS. Then, you can delete the custom key store.
            </para>
             
            <para>
            For keys in an CloudHSM key store, the <c>ScheduleKeyDeletion</c> operation makes
            a best effort to delete the key material from the associated cluster. However, you
            might need to manually <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key">delete
            the orphaned key material</a> from the cluster and its backups. KMS never creates,
            manages, or deletes cryptographic keys in the external key manager associated with
            an external key store. You must manage them using your external key manager tools.
            </para>
             
            <para>
            Instead of deleting the custom key store, consider using the <a>DisconnectCustomKeyStore</a>
            operation to disconnect the custom key store from its backing key store. While the
            key store is disconnected, you cannot create or use the KMS keys in the key store.
            But, you do not need to delete KMS keys and you can reconnect a disconnected custom
            key store at any time.
            </para>
             
            <para>
            If the operation succeeds, it returns a JSON object with no properties.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteCustomKeyStore</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteCustomKeyStore service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteCustomKeyStore service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreHasCMKsException">
            The request was rejected because the custom key store contains KMS keys. After verifying
            that you do not need to use the KMS keys, use the <a>ScheduleKeyDeletion</a> operation
            to delete the KMS keys. After they are deleted, you can delete the custom key store.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DeleteCustomKeyStore">REST API Reference for DeleteCustomKeyStore Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DeleteImportedKeyMaterialAsync(Amazon.KeyManagementService.Model.DeleteImportedKeyMaterialRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes key material that was previously imported. This operation makes the specified
            KMS key temporarily unusable. To restore the usability of the KMS key, reimport the
            same key material. For more information about importing key material into KMS, see
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            Key Material</a> in the <i>Key Management Service Developer Guide</i>.
            
             
            <para>
            When the specified KMS key is in the <c>PendingDeletion</c> state, this operation
            does not change the KMS key's state. Otherwise, it changes the KMS key's state to
            <c>PendingImport</c>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteImportedKeyMaterial</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>GetParametersForImport</a> 
            </para>
             </li> <li> 
            <para>
             <a>ImportKeyMaterial</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteImportedKeyMaterial service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteImportedKeyMaterial service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DeleteImportedKeyMaterial">REST API Reference for DeleteImportedKeyMaterial Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DeriveSharedSecretAsync(Amazon.KeyManagementService.Model.DeriveSharedSecretRequest,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeriveSharedSecret service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeriveSharedSecret service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DeriveSharedSecret">REST API Reference for DeriveSharedSecret Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DescribeCustomKeyStoresAsync(Amazon.KeyManagementService.Model.DescribeCustomKeyStoresRequest,System.Threading.CancellationToken)">
            <summary>
            Gets information about <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> in the account and Region.
            
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            By default, this operation returns information about all custom key stores in the
            account and Region. To get only information about a particular custom key store, use
            either the <c>CustomKeyStoreName</c> or <c>CustomKeyStoreId</c> parameter (but not
            both).
            </para>
             
            <para>
            To determine whether the custom key store is connected to its CloudHSM cluster or
            external key store proxy, use the <c>ConnectionState</c> element in the response.
            If an attempt to connect the custom key store failed, the <c>ConnectionState</c> value
            is <c>FAILED</c> and the <c>ConnectionErrorCode</c> element in the response indicates
            the cause of the failure. For help interpreting the <c>ConnectionErrorCode</c>, see
            <a>CustomKeyStoresListEntry</a>.
            </para>
             
            <para>
            Custom key stores have a <c>DISCONNECTED</c> connection state if the key store has
            never been connected or you used the <a>DisconnectCustomKeyStore</a> operation to
            disconnect it. Otherwise, the connection state is CONNECTED. If your custom key store
            connection state is <c>CONNECTED</c> but you are having trouble using it, verify that
            the backing store is active and available. For an CloudHSM key store, verify that
            the associated CloudHSM cluster is active and contains the minimum number of HSMs
            required for the operation, if any. For an external key store, verify that the external
            key store proxy and its associated external key manager are reachable and enabled.
            </para>
             
            <para>
             For help repairing your CloudHSM key store, see the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            CloudHSM key stores</a>. For help repairing your external key store, see the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/xks-troubleshooting.html">Troubleshooting
            external key stores</a>. Both topics are in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DescribeCustomKeyStores</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeCustomKeyStores service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeCustomKeyStores service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DescribeCustomKeyStores">REST API Reference for DescribeCustomKeyStores Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DescribeKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Provides detailed information about a KMS key. You can run <c>DescribeKey</c> on a
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a> or an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed key</a>.
            
             
            <para>
            This detailed information includes the key ARN, creation date (and deletion date,
            if applicable), the key state, and the origin and expiration date (if any) of the
            key material. It includes fields, like <c>KeySpec</c>, that help you distinguish different
            types of KMS keys. It also displays the key usage (encryption, signing, or generating
            and verifying MACs) and the algorithms that the KMS key supports. 
            </para>
             
            <para>
            For <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">multi-Region
            keys</a>, <c>DescribeKey</c> displays the primary key and all related replica keys.
            For KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key stores</a>, it includes information about the key store, such as the key store
            ID and the CloudHSM cluster ID. For KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key stores</a>, it includes the custom key store ID and the ID of the external key.
            </para>
             
            <para>
             <c>DescribeKey</c> does not return the following information:
            </para>
             <ul> <li> 
            <para>
            Aliases associated with the KMS key. To get this information, use <a>ListAliases</a>.
            </para>
             </li> <li> 
            <para>
            Whether automatic key rotation is enabled on the KMS key. To get this information,
            use <a>GetKeyRotationStatus</a>. Also, some key states prevent a KMS key from being
            automatically rotated. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotate-keys-how-it-works">How
            Automatic Key Rotation Works</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
            Tags on the KMS key. To get this information, use <a>ListResourceTags</a>.
            </para>
             </li> <li> 
            <para>
            Key policies and grants on the KMS key. To get this information, use <a>GetKeyPolicy</a>
            and <a>ListGrants</a>.
            </para>
             </li> </ul> 
            <para>
            In general, <c>DescribeKey</c> is a non-mutating operation. It returns data about
            KMS keys, but doesn't change them. However, Amazon Web Services services use <c>DescribeKey</c>
            to create <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed keys</a> from a <i>predefined Amazon Web Services alias</i> with
            no key ID.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DescribeKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>GetKeyPolicy</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeys</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Describes the specified KMS key.  If you specify a predefined Amazon Web Services alias (an Amazon Web Services alias with no key ID), KMS associates the alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html##aws-managed-cmk">Amazon Web Services managed key</a> and returns its <c>KeyId</c> and <c>Arn</c> in the response. To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Alias name: <c>alias/ExampleAlias</c>  </li> <li> Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>. To get the alias name and alias ARN, use <a>ListAliases</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DescribeKey">REST API Reference for DescribeKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DescribeKeyAsync(Amazon.KeyManagementService.Model.DescribeKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Provides detailed information about a KMS key. You can run <c>DescribeKey</c> on a
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a> or an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed key</a>.
            
             
            <para>
            This detailed information includes the key ARN, creation date (and deletion date,
            if applicable), the key state, and the origin and expiration date (if any) of the
            key material. It includes fields, like <c>KeySpec</c>, that help you distinguish different
            types of KMS keys. It also displays the key usage (encryption, signing, or generating
            and verifying MACs) and the algorithms that the KMS key supports. 
            </para>
             
            <para>
            For <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">multi-Region
            keys</a>, <c>DescribeKey</c> displays the primary key and all related replica keys.
            For KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key stores</a>, it includes information about the key store, such as the key store
            ID and the CloudHSM cluster ID. For KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key stores</a>, it includes the custom key store ID and the ID of the external key.
            </para>
             
            <para>
             <c>DescribeKey</c> does not return the following information:
            </para>
             <ul> <li> 
            <para>
            Aliases associated with the KMS key. To get this information, use <a>ListAliases</a>.
            </para>
             </li> <li> 
            <para>
            Whether automatic key rotation is enabled on the KMS key. To get this information,
            use <a>GetKeyRotationStatus</a>. Also, some key states prevent a KMS key from being
            automatically rotated. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotate-keys-how-it-works">How
            Automatic Key Rotation Works</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
            Tags on the KMS key. To get this information, use <a>ListResourceTags</a>.
            </para>
             </li> <li> 
            <para>
            Key policies and grants on the KMS key. To get this information, use <a>GetKeyPolicy</a>
            and <a>ListGrants</a>.
            </para>
             </li> </ul> 
            <para>
            In general, <c>DescribeKey</c> is a non-mutating operation. It returns data about
            KMS keys, but doesn't change them. However, Amazon Web Services services use <c>DescribeKey</c>
            to create <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed keys</a> from a <i>predefined Amazon Web Services alias</i> with
            no key ID.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DescribeKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>GetKeyPolicy</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeys</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DescribeKey">REST API Reference for DescribeKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DisableKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the state of a KMS key to disabled. This change temporarily prevents use of the
            KMS key for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. 
            
             
            <para>
            For more information about how key state affects the use of a KMS key, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisableKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>EnableKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Identifies the KMS key to disable. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisableKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DisableKey">REST API Reference for DisableKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DisableKeyAsync(Amazon.KeyManagementService.Model.DisableKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Sets the state of a KMS key to disabled. This change temporarily prevents use of the
            KMS key for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. 
            
             
            <para>
            For more information about how key state affects the use of a KMS key, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisableKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>EnableKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DisableKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisableKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DisableKey">REST API Reference for DisableKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DisableKeyRotationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Disables <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            rotation of the key material</a> of the specified symmetric encryption KMS key.
            
             
            <para>
            Automatic key rotation is supported only on symmetric encryption KMS keys. You cannot
            enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key.
            </para>
             
            <para>
            You can enable (<a>EnableKeyRotation</a>) and disable automatic rotation of the key
            material in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed KMS keys</a>. Key material rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a> is not configurable. KMS always rotates the key
            material for every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> varies.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years to every year. For details, see <a>EnableKeyRotation</a>.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisableKeyRotation</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Identifies a symmetric encryption KMS key. You cannot enable or disable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html#asymmetric-cmks">asymmetric KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisableKeyRotation service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DisableKeyRotation">REST API Reference for DisableKeyRotation Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DisableKeyRotationAsync(Amazon.KeyManagementService.Model.DisableKeyRotationRequest,System.Threading.CancellationToken)">
            <summary>
            Disables <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            rotation of the key material</a> of the specified symmetric encryption KMS key.
            
             
            <para>
            Automatic key rotation is supported only on symmetric encryption KMS keys. You cannot
            enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key.
            </para>
             
            <para>
            You can enable (<a>EnableKeyRotation</a>) and disable automatic rotation of the key
            material in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed KMS keys</a>. Key material rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a> is not configurable. KMS always rotates the key
            material for every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> varies.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years to every year. For details, see <a>EnableKeyRotation</a>.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisableKeyRotation</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DisableKeyRotation service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisableKeyRotation service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DisableKeyRotation">REST API Reference for DisableKeyRotation Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DisconnectCustomKeyStoreAsync(Amazon.KeyManagementService.Model.DisconnectCustomKeyStoreRequest,System.Threading.CancellationToken)">
            <summary>
            Disconnects the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> from its backing key store. This operation disconnects an CloudHSM key
            store from its associated CloudHSM cluster or disconnects an external key store from
            the external key store proxy that communicates with your external key manager.
            
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            While a custom key store is disconnected, you can manage the custom key store and
            its KMS keys, but you cannot create or use its KMS keys. You can reconnect the custom
            key store at any time.
            </para>
             <note> 
            <para>
            While a custom key store is disconnected, all attempts to create KMS keys in the custom
            key store or to use existing KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a> will fail. This action can prevent users from storing and accessing
            sensitive data.
            </para>
             </note> 
            <para>
            When you disconnect a custom key store, its <c>ConnectionState</c> changes to <c>Disconnected</c>.
            To find the connection state of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation. To reconnect a custom key store, use the <a>ConnectCustomKeyStore</a> operation.
            </para>
             
            <para>
            If the operation succeeds, it returns a JSON object with no properties.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisconnectCustomKeyStore</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DisconnectCustomKeyStore service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisconnectCustomKeyStore service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/DisconnectCustomKeyStore">REST API Reference for DisconnectCustomKeyStore Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.EnableKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the key state of a KMS key to enabled. This allows you to use the KMS key for
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. 
            
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:EnableKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>DisableKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Identifies the KMS key to enable. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the EnableKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/EnableKey">REST API Reference for EnableKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.EnableKeyAsync(Amazon.KeyManagementService.Model.EnableKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Sets the key state of a KMS key to enabled. This allows you to use the KMS key for
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. 
            
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:EnableKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>DisableKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the EnableKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the EnableKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/EnableKey">REST API Reference for EnableKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.EnableKeyRotationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Enables <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-enable-disable">automatic
            rotation of the key material</a> of the specified symmetric encryption KMS key. 
            
             
            <para>
            By default, when you enable automatic rotation of a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed KMS key</a>, KMS rotates the key material of the KMS key one year (approximately
            365 days) from the enable date and every year thereafter. You can use the optional
            <c>RotationPeriodInDays</c> parameter to specify a custom rotation period when you
            enable key rotation, or you can use <c>RotationPeriodInDays</c> to modify the rotation
            period of a key that you previously enabled automatic key rotation on.
            </para>
             
            <para>
            You can monitor rotation of the key material for your KMS keys in CloudTrail and Amazon
            CloudWatch. To disable rotation of the key material in a customer managed KMS key,
            use the <a>DisableKeyRotation</a> operation. You can use the <a>GetKeyRotationStatus</a>
            operation to identify any in progress rotations. You can use the <a>ListKeyRotations</a>
            operation to view the details of completed rotations.
            </para>
             
            <para>
            Automatic key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key. 
            </para>
             
            <para>
            You cannot enable or disable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a>. KMS always rotates the key material of Amazon Web
            Services managed keys every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> is managed by the Amazon Web Services service that
            owns the key.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years (approximately 1,095 days) to every year (approximately 365
            days).
            </para>
             
            <para>
            New Amazon Web Services managed keys are automatically rotated one year after they
            are created, and approximately every year thereafter. 
            </para>
             
            <para>
            Existing Amazon Web Services managed keys are automatically rotated one year after
            their most recent rotation, and every year thereafter.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:EnableKeyRotation</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             <note> 
            <para>
            You can perform on-demand (<a>RotateKeyOnDemand</a>) rotation of the key material
            in customer managed KMS keys, regardless of whether or not automatic key rotation
            is enabled.
            </para>
             </note> </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Identifies a symmetric encryption KMS key. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region keys</a>, set the property on the primary key. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the EnableKeyRotation service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/EnableKeyRotation">REST API Reference for EnableKeyRotation Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.EnableKeyRotationAsync(Amazon.KeyManagementService.Model.EnableKeyRotationRequest,System.Threading.CancellationToken)">
            <summary>
            Enables <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-enable-disable">automatic
            rotation of the key material</a> of the specified symmetric encryption KMS key. 
            
             
            <para>
            By default, when you enable automatic rotation of a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed KMS key</a>, KMS rotates the key material of the KMS key one year (approximately
            365 days) from the enable date and every year thereafter. You can use the optional
            <c>RotationPeriodInDays</c> parameter to specify a custom rotation period when you
            enable key rotation, or you can use <c>RotationPeriodInDays</c> to modify the rotation
            period of a key that you previously enabled automatic key rotation on.
            </para>
             
            <para>
            You can monitor rotation of the key material for your KMS keys in CloudTrail and Amazon
            CloudWatch. To disable rotation of the key material in a customer managed KMS key,
            use the <a>DisableKeyRotation</a> operation. You can use the <a>GetKeyRotationStatus</a>
            operation to identify any in progress rotations. You can use the <a>ListKeyRotations</a>
            operation to view the details of completed rotations.
            </para>
             
            <para>
            Automatic key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key. 
            </para>
             
            <para>
            You cannot enable or disable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a>. KMS always rotates the key material of Amazon Web
            Services managed keys every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> is managed by the Amazon Web Services service that
            owns the key.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years (approximately 1,095 days) to every year (approximately 365
            days).
            </para>
             
            <para>
            New Amazon Web Services managed keys are automatically rotated one year after they
            are created, and approximately every year thereafter. 
            </para>
             
            <para>
            Existing Amazon Web Services managed keys are automatically rotated one year after
            their most recent rotation, and every year thereafter.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:EnableKeyRotation</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             <note> 
            <para>
            You can perform on-demand (<a>RotateKeyOnDemand</a>) rotation of the key material
            in customer managed KMS keys, regardless of whether or not automatic key rotation
            is enabled.
            </para>
             </note> </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the EnableKeyRotation service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the EnableKeyRotation service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/EnableKeyRotation">REST API Reference for EnableKeyRotation Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.EncryptAsync(Amazon.KeyManagementService.Model.EncryptRequest,System.Threading.CancellationToken)">
            <summary>
            Encrypts plaintext of up to 4,096 bytes using a KMS key. You can use a symmetric or
            asymmetric KMS key with a <c>KeyUsage</c> of <c>ENCRYPT_DECRYPT</c>.
            
             
            <para>
            You can use this operation to encrypt small amounts of arbitrary data, such as a personal
            identifier or database password, or other sensitive information. You don't need to
            use the <c>Encrypt</c> operation to encrypt a data key. The <a>GenerateDataKey</a>
            and <a>GenerateDataKeyPair</a> operations return a plaintext data key and an encrypted
            copy of that data key.
            </para>
             
            <para>
            If you use a symmetric encryption KMS key, you can use an encryption context to add
            additional security to your encryption operation. If you specify an <c>EncryptionContext</c>
            when encrypting data, you must specify the same encryption context (a case-sensitive
            exact match) when decrypting the data. Otherwise, the request to decrypt fails with
            an <c>InvalidCiphertextException</c>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            If you specify an asymmetric KMS key, you must also specify the encryption algorithm.
            The algorithm must be compatible with the KMS key spec.
            </para>
             <important> 
            <para>
            When you use an asymmetric KMS key to encrypt or reencrypt data, be sure to record
            the KMS key and encryption algorithm that you choose. You will be required to provide
            the same KMS key and encryption algorithm when you decrypt the data. If the KMS key
            and algorithm do not match the values used to encrypt the data, the decrypt operation
            fails.
            </para>
             
            <para>
            You are not required to supply the key ID and encryption algorithm when you decrypt
            with symmetric encryption KMS keys because KMS stores this information in the ciphertext
            blob. KMS cannot store metadata in ciphertext generated with asymmetric keys. The
            standard format for asymmetric key ciphertext does not include configurable fields.
            </para>
             </important> 
            <para>
            The maximum size of the data that you can encrypt varies with the type of KMS key
            and the encryption algorithm that you choose.
            </para>
             <ul> <li> 
            <para>
            Symmetric encryption KMS keys
            </para>
             <ul> <li> 
            <para>
             <c>SYMMETRIC_DEFAULT</c>: 4096 bytes
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>RSA_2048</c> 
            </para>
             <ul> <li> 
            <para>
             <c>RSAES_OAEP_SHA_1</c>: 214 bytes
            </para>
             </li> <li> 
            <para>
             <c>RSAES_OAEP_SHA_256</c>: 190 bytes
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>RSA_3072</c> 
            </para>
             <ul> <li> 
            <para>
             <c>RSAES_OAEP_SHA_1</c>: 342 bytes
            </para>
             </li> <li> 
            <para>
             <c>RSAES_OAEP_SHA_256</c>: 318 bytes
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>RSA_4096</c> 
            </para>
             <ul> <li> 
            <para>
             <c>RSAES_OAEP_SHA_1</c>: 470 bytes
            </para>
             </li> <li> 
            <para>
             <c>RSAES_OAEP_SHA_256</c>: 446 bytes
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>SM2PKE</c>: 1024 bytes (China Regions only)
            </para>
             </li> </ul> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:Encrypt</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Encrypt service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Encrypt service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/Encrypt">REST API Reference for Encrypt Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GenerateDataKeyAsync(Amazon.KeyManagementService.Model.GenerateDataKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a unique symmetric data key for use outside of KMS. This operation returns
            a plaintext copy of the data key and a copy that is encrypted under a symmetric encryption
            KMS key that you specify. The bytes in the plaintext key are random; they are not
            related to the caller or the KMS key. You can use the plaintext key to encrypt your
            data outside of KMS and store the encrypted data key with the encrypted data.
            
             
            <para>
            To generate a data key, specify the symmetric encryption KMS key that will be used
            to encrypt the data key. You cannot use an asymmetric KMS key to encrypt data keys.
            To get the type of your KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            You must also specify the length of the data key. Use either the <c>KeySpec</c> or
            <c>NumberOfBytes</c> parameters (but not both). For 128-bit and 256-bit data keys,
            use the <c>KeySpec</c> parameter.
            </para>
             
            <para>
            To generate a 128-bit SM4 data key (China Regions only), specify a <c>KeySpec</c>
            value of <c>AES_128</c> or a <c>NumberOfBytes</c> value of <c>16</c>. The symmetric
            encryption key used in China Regions to encrypt your data key is an SM4 encryption
            key.
            </para>
             
            <para>
            To get only an encrypted copy of the data key, use <a>GenerateDataKeyWithoutPlaintext</a>.
            To generate an asymmetric data key pair, use the <a>GenerateDataKeyPair</a> or <a>GenerateDataKeyPairWithoutPlaintext</a>
            operation. To get a cryptographically secure random byte string, use <a>GenerateRandom</a>.
            </para>
             
            <para>
            You can use an optional encryption context to add additional security to the encryption
            operation. If you specify an <c>EncryptionContext</c>, you must specify the same encryption
            context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise,
            the request to decrypt fails with an <c>InvalidCiphertextException</c>. For more information,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <c>GenerateDataKey</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>GenerateDataKey</c> for an Amazon Web Services Nitro enclave,
            use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. <c>GenerateDataKey</c>
            returns a copy of the data key encrypted under the specified KMS key, as usual. But
            instead of a plaintext copy of the data key, the response includes a copy of the data
            key encrypted under the public key from the attestation document (<c>CiphertextForRecipient</c>).
            For information about the interaction between KMS and Amazon Web Services Nitro Enclaves,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>..
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>How to use your data key</b> 
            </para>
             
            <para>
            We recommend that you use the following pattern to encrypt data locally in your application.
            You can write your own code or use a client-side encryption library, such as the <a
            href="https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/">Amazon Web
            Services Encryption SDK</a>, the <a href="https://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/">Amazon
            DynamoDB Encryption Client</a>, or <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html">Amazon
            S3 client-side encryption</a> to do these tasks for you.
            </para>
             
            <para>
            To encrypt data outside of KMS:
            </para>
             <ol> <li> 
            <para>
            Use the <c>GenerateDataKey</c> operation to get a data key.
            </para>
             </li> <li> 
            <para>
            Use the plaintext data key (in the <c>Plaintext</c> field of the response) to encrypt
            your data outside of KMS. Then erase the plaintext data key from memory.
            </para>
             </li> <li> 
            <para>
            Store the encrypted data key (in the <c>CiphertextBlob</c> field of the response)
            with the encrypted data.
            </para>
             </li> </ol> 
            <para>
            To decrypt data outside of KMS:
            </para>
             <ol> <li> 
            <para>
            Use the <a>Decrypt</a> operation to decrypt the encrypted data key. The operation
            returns a plaintext copy of the data key.
            </para>
             </li> <li> 
            <para>
            Use the plaintext data key to decrypt data outside of KMS, then erase the plaintext
            data key from memory.
            </para>
             </li> </ol> 
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateDataKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPairWithoutPlaintext</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GenerateDataKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateDataKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateDataKey">REST API Reference for GenerateDataKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GenerateDataKeyPairAsync(Amazon.KeyManagementService.Model.GenerateDataKeyPairRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a unique asymmetric data key pair for use outside of KMS. This operation returns
            a plaintext public key, a plaintext private key, and a copy of the private key that
            is encrypted under the symmetric encryption KMS key you specify. You can use the data
            key pair to perform asymmetric cryptography and implement digital signatures outside
            of KMS. The bytes in the keys are random; they are not related to the caller or to
            the KMS key that is used to encrypt the private key. 
            
             
            <para>
            You can use the public key that <c>GenerateDataKeyPair</c> returns to encrypt data
            or verify a signature outside of KMS. Then, store the encrypted private key with the
            data. When you are ready to decrypt data or sign a message, you can use the <a>Decrypt</a>
            operation to decrypt the encrypted private key.
            </para>
             
            <para>
            To generate a data key pair, you must specify a symmetric encryption KMS key to encrypt
            the private key in a data key pair. You cannot use an asymmetric KMS key or a KMS
            key in a custom key store. To get the type and origin of your KMS key, use the <a>DescribeKey</a>
            operation. 
            </para>
             
            <para>
            Use the <c>KeyPairSpec</c> parameter to choose an RSA or Elliptic Curve (ECC) data
            key pair. In China Regions, you can also choose an SM2 data key pair. KMS recommends
            that you use ECC key pairs for signing, and use RSA and SM2 key pairs for either encryption
            or signing, but not both. However, KMS cannot enforce any restrictions on the use
            of data key pairs outside of KMS.
            </para>
             
            <para>
            If you are using the data key pair to encrypt data, or for any operation where you
            don't immediately need a private key, consider using the <a>GenerateDataKeyPairWithoutPlaintext</a>
            operation. <c>GenerateDataKeyPairWithoutPlaintext</c> returns a plaintext public key
            and an encrypted private key, but omits the plaintext private key that you need only
            to decrypt ciphertext or sign a message. Later, when you need to decrypt the data
            or sign a message, use the <a>Decrypt</a> operation to decrypt the encrypted private
            key in the data key pair.
            </para>
             
            <para>
             <c>GenerateDataKeyPair</c> returns a unique data key pair for each request. The bytes
            in the keys are random; they are not related to the caller or the KMS key that is
            used to encrypt the private key. The public key is a DER-encoded X.509 SubjectPublicKeyInfo,
            as specified in <a href="https://tools.ietf.org/html/rfc5280">RFC 5280</a>. The private
            key is a DER-encoded PKCS8 PrivateKeyInfo, as specified in <a href="https://tools.ietf.org/html/rfc5958">RFC
            5958</a>.
            </para>
             
            <para>
             <c>GenerateDataKeyPair</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>GenerateDataKeyPair</c> for an Amazon Web Services Nitro enclave,
            use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. <c>GenerateDataKeyPair</c>
            returns the public data key and a copy of the private data key encrypted under the
            specified KMS key, as usual. But instead of a plaintext copy of the private data key
            (<c>PrivateKeyPlaintext</c>), the response includes a copy of the private data key
            encrypted under the public key from the attestation document (<c>CiphertextForRecipient</c>).
            For information about the interaction between KMS and Amazon Web Services Nitro Enclaves,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>..
            </para>
             
            <para>
            You can use an optional encryption context to add additional security to the encryption
            operation. If you specify an <c>EncryptionContext</c>, you must specify the same encryption
            context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise,
            the request to decrypt fails with an <c>InvalidCiphertextException</c>. For more information,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateDataKeyPair</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPairWithoutPlaintext</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GenerateDataKeyPair service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateDataKeyPair service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateDataKeyPair">REST API Reference for GenerateDataKeyPair Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GenerateDataKeyPairWithoutPlaintextAsync(Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a unique asymmetric data key pair for use outside of KMS. This operation returns
            a plaintext public key and a copy of the private key that is encrypted under the symmetric
            encryption KMS key you specify. Unlike <a>GenerateDataKeyPair</a>, this operation
            does not return a plaintext private key. The bytes in the keys are random; they are
            not related to the caller or to the KMS key that is used to encrypt the private key.
            
            
             
            <para>
            You can use the public key that <c>GenerateDataKeyPairWithoutPlaintext</c> returns
            to encrypt data or verify a signature outside of KMS. Then, store the encrypted private
            key with the data. When you are ready to decrypt data or sign a message, you can use
            the <a>Decrypt</a> operation to decrypt the encrypted private key.
            </para>
             
            <para>
            To generate a data key pair, you must specify a symmetric encryption KMS key to encrypt
            the private key in a data key pair. You cannot use an asymmetric KMS key or a KMS
            key in a custom key store. To get the type and origin of your KMS key, use the <a>DescribeKey</a>
            operation. 
            </para>
             
            <para>
            Use the <c>KeyPairSpec</c> parameter to choose an RSA or Elliptic Curve (ECC) data
            key pair. In China Regions, you can also choose an SM2 data key pair. KMS recommends
            that you use ECC key pairs for signing, and use RSA and SM2 key pairs for either encryption
            or signing, but not both. However, KMS cannot enforce any restrictions on the use
            of data key pairs outside of KMS.
            </para>
             
            <para>
             <c>GenerateDataKeyPairWithoutPlaintext</c> returns a unique data key pair for each
            request. The bytes in the key are not related to the caller or KMS key that is used
            to encrypt the private key. The public key is a DER-encoded X.509 SubjectPublicKeyInfo,
            as specified in <a href="https://tools.ietf.org/html/rfc5280">RFC 5280</a>.
            </para>
             
            <para>
            You can use an optional encryption context to add additional security to the encryption
            operation. If you specify an <c>EncryptionContext</c>, you must specify the same encryption
            context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise,
            the request to decrypt fails with an <c>InvalidCiphertextException</c>. For more information,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateDataKeyPairWithoutPlaintext</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GenerateDataKeyPairWithoutPlaintext service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateDataKeyPairWithoutPlaintext service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateDataKeyPairWithoutPlaintext">REST API Reference for GenerateDataKeyPairWithoutPlaintext Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GenerateDataKeyWithoutPlaintextAsync(Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a unique symmetric data key for use outside of KMS. This operation returns
            a data key that is encrypted under a symmetric encryption KMS key that you specify.
            The bytes in the key are random; they are not related to the caller or to the KMS
            key.
            
             
            <para>
             <c>GenerateDataKeyWithoutPlaintext</c> is identical to the <a>GenerateDataKey</a>
            operation except that it does not return a plaintext copy of the data key. 
            </para>
             
            <para>
            This operation is useful for systems that need to encrypt data at some point, but
            not immediately. When you need to encrypt the data, you call the <a>Decrypt</a> operation
            on the encrypted copy of the key.
            </para>
             
            <para>
            It's also useful in distributed systems with different levels of trust. For example,
            you might store encrypted data in containers. One component of your system creates
            new containers and stores an encrypted data key with each container. Then, a different
            component puts the data into the containers. That component first decrypts the data
            key, uses the plaintext data key to encrypt data, puts the encrypted data into the
            container, and then destroys the plaintext data key. In this system, the component
            that creates the containers never sees the plaintext data key.
            </para>
             
            <para>
            To request an asymmetric data key pair, use the <a>GenerateDataKeyPair</a> or <a>GenerateDataKeyPairWithoutPlaintext</a>
            operations.
            </para>
             
            <para>
            To generate a data key, you must specify the symmetric encryption KMS key that is
            used to encrypt the data key. You cannot use an asymmetric KMS key or a key in a custom
            key store to generate a data key. To get the type of your KMS key, use the <a>DescribeKey</a>
            operation.
            </para>
             
            <para>
            You must also specify the length of the data key. Use either the <c>KeySpec</c> or
            <c>NumberOfBytes</c> parameters (but not both). For 128-bit and 256-bit data keys,
            use the <c>KeySpec</c> parameter.
            </para>
             
            <para>
            To generate an SM4 data key (China Regions only), specify a <c>KeySpec</c> value of
            <c>AES_128</c> or <c>NumberOfBytes</c> value of <c>16</c>. The symmetric encryption
            key used in China Regions to encrypt your data key is an SM4 encryption key.
            </para>
             
            <para>
            If the operation succeeds, you will find the encrypted copy of the data key in the
            <c>CiphertextBlob</c> field.
            </para>
             
            <para>
            You can use an optional encryption context to add additional security to the encryption
            operation. If you specify an <c>EncryptionContext</c>, you must specify the same encryption
            context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise,
            the request to decrypt fails with an <c>InvalidCiphertextException</c>. For more information,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateDataKeyWithoutPlaintext</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPairWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GenerateDataKeyWithoutPlaintext service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateDataKeyWithoutPlaintext service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateDataKeyWithoutPlaintext">REST API Reference for GenerateDataKeyWithoutPlaintext Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GenerateMacAsync(Amazon.KeyManagementService.Model.GenerateMacRequest,System.Threading.CancellationToken)">
            <summary>
            Generates a hash-based message authentication code (HMAC) for a message using an HMAC
            KMS key and a MAC algorithm that the key supports. HMAC KMS keys and the HMAC algorithms
            that KMS uses conform to industry standards defined in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC
            2104</a>.
            
             
            <para>
            You can use value that GenerateMac returns in the <a>VerifyMac</a> operation to demonstrate
            that the original message has not changed. Also, because a secret key is used to create
            the hash, you can verify that the party that generated the hash has the required secret
            key. You can also use the raw result to implement HMAC-based algorithms such as key
            derivation functions. This operation is part of KMS support for HMAC KMS keys. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            keys in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             <note> 
            <para>
            Best practices recommend that you limit the time during which any signing mechanism,
            including an HMAC, is effective. This deters an attack where the actor uses a signed
            message to establish validity repeatedly or long after the message is superseded.
            HMAC tags do not include a timestamp, but you can include a timestamp in the token
            or message to help you detect when its time to refresh the HMAC. 
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateMac</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>VerifyMac</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GenerateMac service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateMac service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateMac">REST API Reference for GenerateMac Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GenerateRandomAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a random byte string that is cryptographically secure.
            
             
            <para>
            You must use the <c>NumberOfBytes</c> parameter to specify the length of the random
            byte string. There is no default value for string length.
            </para>
             
            <para>
            By default, the random byte string is generated in KMS. To generate the byte string
            in the CloudHSM cluster associated with an CloudHSM key store, use the <c>CustomKeyStoreId</c>
            parameter.
            </para>
             
            <para>
             <c>GenerateRandom</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>GenerateRandom</c> for a Nitro enclave, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. Instead of plaintext
            bytes, the response includes the plaintext bytes encrypted under the public key from
            the attestation document (<c>CiphertextForRecipient</c>).For information about the
            interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            For more information about entropy and random number generation, see <a href="https://docs.aws.amazon.com/kms/latest/cryptographic-details/">Key
            Management Service Cryptographic Details</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Not applicable. <c>GenerateRandom</c> does not use any
            account-specific resources, such as KMS keys.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateRandom</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="numberOfBytes">The length of the random byte string. This parameter is required.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateRandom service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateRandom">REST API Reference for GenerateRandom Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GenerateRandomAsync(Amazon.KeyManagementService.Model.GenerateRandomRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a random byte string that is cryptographically secure.
            
             
            <para>
            You must use the <c>NumberOfBytes</c> parameter to specify the length of the random
            byte string. There is no default value for string length.
            </para>
             
            <para>
            By default, the random byte string is generated in KMS. To generate the byte string
            in the CloudHSM cluster associated with an CloudHSM key store, use the <c>CustomKeyStoreId</c>
            parameter.
            </para>
             
            <para>
             <c>GenerateRandom</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>GenerateRandom</c> for a Nitro enclave, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. Instead of plaintext
            bytes, the response includes the plaintext bytes encrypted under the public key from
            the attestation document (<c>CiphertextForRecipient</c>).For information about the
            interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            For more information about entropy and random number generation, see <a href="https://docs.aws.amazon.com/kms/latest/cryptographic-details/">Key
            Management Service Cryptographic Details</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Not applicable. <c>GenerateRandom</c> does not use any
            account-specific resources, such as KMS keys.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateRandom</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GenerateRandom service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GenerateRandom service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GenerateRandom">REST API Reference for GenerateRandom Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GetKeyPolicyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a key policy attached to the specified KMS key.
            
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetKeyPolicy</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html">PutKeyPolicy</a>
            
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Gets the key policy for the specified KMS key. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="policyName">Specifies the name of the key policy. If no policy name is specified, the default value is <c>default</c>. The only valid name is <c>default</c>. To get the names of key policies, use <a>ListKeyPolicies</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetKeyPolicy service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GetKeyPolicy">REST API Reference for GetKeyPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GetKeyPolicyAsync(Amazon.KeyManagementService.Model.GetKeyPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Gets a key policy attached to the specified KMS key.
            
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetKeyPolicy</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html">PutKeyPolicy</a>
            
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetKeyPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetKeyPolicy service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GetKeyPolicy">REST API Reference for GetKeyPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GetKeyRotationStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Provides detailed information about the rotation status for a KMS key, including whether
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            rotation of the key material</a> is enabled for the specified KMS key, the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotation-period">rotation
            period</a>, and the next scheduled rotation date.
            
             
            <para>
            Automatic key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key..
            </para>
             
            <para>
            You can enable (<a>EnableKeyRotation</a>) and disable automatic rotation (<a>DisableKeyRotation</a>)
            of the key material in customer managed KMS keys. Key material rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a> is not configurable. KMS always rotates the key
            material in Amazon Web Services managed KMS keys every year. The key rotation status
            for Amazon Web Services managed KMS keys is always <c>true</c>.
            </para>
             
            <para>
            You can perform on-demand (<a>RotateKeyOnDemand</a>) rotation of the key material
            in customer managed KMS keys, regardless of whether or not automatic key rotation
            is enabled. You can use GetKeyRotationStatus to identify the date and time that an
            in progress on-demand rotation was initiated. You can use <a>ListKeyRotations</a>
            to view the details of completed rotations.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years to every year. For details, see <a>EnableKeyRotation</a>.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             <ul> <li> 
            <para>
            Disabled: The key rotation status does not change when you disable a KMS key. However,
            while the KMS key is disabled, KMS does not rotate the key material. When you re-enable
            the KMS key, rotation resumes. If the key material in the re-enabled KMS key hasn't
            been rotated in one year, KMS rotates it immediately, and every year thereafter. If
            it's been less than a year since the key material in the re-enabled KMS key was rotated,
            the KMS key resumes its prior rotation schedule.
            </para>
             </li> <li> 
            <para>
            Pending deletion: While a KMS key is pending deletion, its key rotation status is
            <c>false</c> and KMS does not rotate the key material. If you cancel the deletion,
            the original key rotation status returns to <c>true</c>.
            </para>
             </li> </ul> 
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetKeyRotationStatus</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Gets the rotation status for the specified KMS key. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetKeyRotationStatus service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GetKeyRotationStatus">REST API Reference for GetKeyRotationStatus Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GetKeyRotationStatusAsync(Amazon.KeyManagementService.Model.GetKeyRotationStatusRequest,System.Threading.CancellationToken)">
            <summary>
            Provides detailed information about the rotation status for a KMS key, including whether
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            rotation of the key material</a> is enabled for the specified KMS key, the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotation-period">rotation
            period</a>, and the next scheduled rotation date.
            
             
            <para>
            Automatic key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key..
            </para>
             
            <para>
            You can enable (<a>EnableKeyRotation</a>) and disable automatic rotation (<a>DisableKeyRotation</a>)
            of the key material in customer managed KMS keys. Key material rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a> is not configurable. KMS always rotates the key
            material in Amazon Web Services managed KMS keys every year. The key rotation status
            for Amazon Web Services managed KMS keys is always <c>true</c>.
            </para>
             
            <para>
            You can perform on-demand (<a>RotateKeyOnDemand</a>) rotation of the key material
            in customer managed KMS keys, regardless of whether or not automatic key rotation
            is enabled. You can use GetKeyRotationStatus to identify the date and time that an
            in progress on-demand rotation was initiated. You can use <a>ListKeyRotations</a>
            to view the details of completed rotations.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years to every year. For details, see <a>EnableKeyRotation</a>.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             <ul> <li> 
            <para>
            Disabled: The key rotation status does not change when you disable a KMS key. However,
            while the KMS key is disabled, KMS does not rotate the key material. When you re-enable
            the KMS key, rotation resumes. If the key material in the re-enabled KMS key hasn't
            been rotated in one year, KMS rotates it immediately, and every year thereafter. If
            it's been less than a year since the key material in the re-enabled KMS key was rotated,
            the KMS key resumes its prior rotation schedule.
            </para>
             </li> <li> 
            <para>
            Pending deletion: While a KMS key is pending deletion, its key rotation status is
            <c>false</c> and KMS does not rotate the key material. If you cancel the deletion,
            the original key rotation status returns to <c>true</c>.
            </para>
             </li> </ul> 
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetKeyRotationStatus</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetKeyRotationStatus service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetKeyRotationStatus service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GetKeyRotationStatus">REST API Reference for GetKeyRotationStatus Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GetParametersForImportAsync(Amazon.KeyManagementService.Model.GetParametersForImportRequest,System.Threading.CancellationToken)">
            <summary>
            Returns the public key and an import token you need to import or reimport key material
            for a KMS key. 
            
             
            <para>
            By default, KMS keys are created with key material that KMS generates. This operation
            supports <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            key material</a>, an advanced feature that lets you generate and import the cryptographic
            key material for a KMS key. For more information about importing key material into
            KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            key material</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            Before calling <c>GetParametersForImport</c>, use the <a>CreateKey</a> operation with
            an <c>Origin</c> value of <c>EXTERNAL</c> to create a KMS key with no key material.
            You can import key material for a symmetric encryption KMS key, HMAC KMS key, asymmetric
            encryption KMS key, or asymmetric signing KMS key. You can also import key material
            into a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">multi-Region
            key</a> of any supported type. However, you can't import key material into a KMS key
            in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. You can also use <c>GetParametersForImport</c> to get a public key
            and import token to <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html#reimport-key-material">reimport
            the original key material</a> into a KMS key whose key material expired or was deleted.
            </para>
             
            <para>
             <c>GetParametersForImport</c> returns the items that you need to import your key
            material.
            </para>
             <ul> <li> 
            <para>
            The public key (or "wrapping key") of an RSA key pair that KMS generates.
            </para>
             
            <para>
            You will use this public key to encrypt ("wrap") your key material while it's in transit
            to KMS. 
            </para>
             </li> <li> 
            <para>
            A import token that ensures that KMS can decrypt your key material and associate it
            with the correct KMS key.
            </para>
             </li> </ul> 
            <para>
            The public key and its import token are permanently linked and must be used together.
            Each public key and import token set is valid for 24 hours. The expiration date and
            time appear in the <c>ParametersValidTo</c> field in the <c>GetParametersForImport</c>
            response. You cannot use an expired public key or import token in an <a>ImportKeyMaterial</a>
            request. If your key and token expire, send another <c>GetParametersForImport</c>
            request.
            </para>
             
            <para>
             <c>GetParametersForImport</c> requires the following information:
            </para>
             <ul> <li> 
            <para>
            The key ID of the KMS key for which you are importing the key material.
            </para>
             </li> <li> 
            <para>
            The key spec of the public key ("wrapping key") that you will use to encrypt your
            key material during import.
            </para>
             </li> <li> 
            <para>
            The wrapping algorithm that you will use with the public key to encrypt your key material.
            </para>
             </li> </ul> 
            <para>
            You can use the same or a different public key spec and wrapping algorithm each time
            you import or reimport the same key material. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetParametersForImport</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ImportKeyMaterial</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteImportedKeyMaterial</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetParametersForImport service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetParametersForImport service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GetParametersForImport">REST API Reference for GetParametersForImport Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.GetPublicKeyAsync(Amazon.KeyManagementService.Model.GetPublicKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Returns the public key of an asymmetric KMS key. Unlike the private key of a asymmetric
            KMS key, which never leaves KMS unencrypted, callers with <c>kms:GetPublicKey</c>
            permission can download the public key of an asymmetric KMS key. You can share the
            public key to allow others to encrypt messages and verify signatures outside of KMS.
            For information about asymmetric KMS keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            
             
            <para>
            You do not need to download the public key. Instead, you can use the public key within
            KMS by calling the <a>Encrypt</a>, <a>ReEncrypt</a>, or <a>Verify</a> operations with
            the identifier of an asymmetric KMS key. When you use the public key within KMS, you
            benefit from the authentication, authorization, and logging that are part of every
            KMS operation. You also reduce of risk of encrypting data that cannot be decrypted.
            These features are not effective outside of KMS.
            </para>
             
            <para>
            To help you use the public key safely outside of KMS, <c>GetPublicKey</c> returns
            important information about the public key in the response, including:
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_GetPublicKey.html#KMS-GetPublicKey-response-KeySpec">KeySpec</a>:
            The type of key material in the public key, such as <c>RSA_4096</c> or <c>ECC_NIST_P521</c>.
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_GetPublicKey.html#KMS-GetPublicKey-response-KeyUsage">KeyUsage</a>:
            Whether the key is used for encryption, signing, or generating a shared secret.
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_GetPublicKey.html#KMS-GetPublicKey-response-EncryptionAlgorithms">EncryptionAlgorithms</a>
            or <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_GetPublicKey.html#KMS-GetPublicKey-response-SigningAlgorithms">SigningAlgorithms</a>:
            A list of the encryption algorithms or the signing algorithms for the key.
            </para>
             </li> </ul> 
            <para>
            Although KMS cannot enforce these restrictions on external operations, it is crucial
            that you use this information to prevent the public key from being used improperly.
            For example, you can prevent a public signing key from being used encrypt data, or
            prevent a public key from being used with an encryption algorithm that is not supported
            by KMS. You can also avoid errors, such as using the wrong signing algorithm in a
            verification operation.
            </para>
             
            <para>
            To verify a signature outside of KMS with an SM2 public key (China Regions only),
            you must specify the distinguishing ID. By default, KMS uses <c>1234567812345678</c>
            as the distinguishing ID. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-sm-offline-verification">Offline
            verification with SM2 key pairs</a>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetPublicKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>CreateKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetPublicKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetPublicKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/GetPublicKey">REST API Reference for GetPublicKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ImportKeyMaterialAsync(Amazon.KeyManagementService.Model.ImportKeyMaterialRequest,System.Threading.CancellationToken)">
            <summary>
            Imports or reimports key material into an existing KMS key that was created without
            key material. <c>ImportKeyMaterial</c> also sets the expiration model and expiration
            date of the imported key material.
            
             
            <para>
            By default, KMS keys are created with key material that KMS generates. This operation
            supports <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            key material</a>, an advanced feature that lets you generate and import the cryptographic
            key material for a KMS key. For more information about importing key material into
            KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            key material</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            After you successfully import key material into a KMS key, you can <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html#reimport-key-material">reimport
            the same key material</a> into that KMS key, but you cannot import different key material.
            You might reimport key material to replace key material that expired or key material
            that you deleted. You might also reimport key material to change the expiration model
            or expiration date of the key material. 
            </para>
             
            <para>
            Each time you import key material into KMS, you can determine whether (<c>ExpirationModel</c>)
            and when (<c>ValidTo</c>) the key material expires. To change the expiration of your
            key material, you must import it again, either by calling <c>ImportKeyMaterial</c>
            or using the <a href="kms/latest/developerguide/importing-keys-import-key-material.html#importing-keys-import-key-material-console">import
            features</a> of the KMS console.
            </para>
             
            <para>
            Before calling <c>ImportKeyMaterial</c>:
            </para>
             <ul> <li> 
            <para>
            Create or identify a KMS key with no key material. The KMS key must have an <c>Origin</c>
            value of <c>EXTERNAL</c>, which indicates that the KMS key is designed for imported
            key material. 
            </para>
             
            <para>
            To create an new KMS key for imported key material, call the <a>CreateKey</a> operation
            with an <c>Origin</c> value of <c>EXTERNAL</c>. You can create a symmetric encryption
            KMS key, HMAC KMS key, asymmetric encryption KMS key, or asymmetric signing KMS key.
            You can also import key material into a <a href="kms/latest/developerguide/multi-region-keys-overview.html">multi-Region
            key</a> of any supported type. However, you can't import key material into a KMS key
            in a <a href="kms/latest/developerguide/custom-key-store-overview.html">custom key
            store</a>.
            </para>
             </li> <li> 
            <para>
            Use the <a>DescribeKey</a> operation to verify that the <c>KeyState</c> of the KMS
            key is <c>PendingImport</c>, which indicates that the KMS key has no key material.
            
            </para>
             
            <para>
            If you are reimporting the same key material into an existing KMS key, you might need
            to call the <a>DeleteImportedKeyMaterial</a> to delete its existing key material.
            </para>
             </li> <li> 
            <para>
            Call the <a>GetParametersForImport</a> operation to get a public key and import token
            set for importing key material. 
            </para>
             </li> <li> 
            <para>
            Use the public key in the <a>GetParametersForImport</a> response to encrypt your key
            material.
            </para>
             </li> </ul> 
            <para>
             Then, in an <c>ImportKeyMaterial</c> request, you submit your encrypted key material
            and import token. When calling this operation, you must specify the following values:
            </para>
             <ul> <li> 
            <para>
            The key ID or key ARN of the KMS key to associate with the imported key material.
            Its <c>Origin</c> must be <c>EXTERNAL</c> and its <c>KeyState</c> must be <c>PendingImport</c>.
            You cannot perform this operation on a KMS key in a <a href="kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>, or on a KMS key in a different Amazon Web Services account. To get
            the <c>Origin</c> and <c>KeyState</c> of a KMS key, call <a>DescribeKey</a>.
            </para>
             </li> <li> 
            <para>
            The encrypted key material. 
            </para>
             </li> <li> 
            <para>
            The import token that <a>GetParametersForImport</a> returned. You must use a public
            key and token from the same <c>GetParametersForImport</c> response.
            </para>
             </li> <li> 
            <para>
            Whether the key material expires (<c>ExpirationModel</c>) and, if so, when (<c>ValidTo</c>).
            For help with this choice, see <a href="https://docs.aws.amazon.com/en_us/kms/latest/developerguide/importing-keys.html#importing-keys-expiration">Setting
            an expiration time</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            If you set an expiration date, KMS deletes the key material from the KMS key on the
            specified date, making the KMS key unusable. To use the KMS key in cryptographic operations
            again, you must reimport the same key material. However, you can delete and reimport
            the key material at any time, including before the key material expires. Each time
            you reimport, you can eliminate or reset the expiration time.
            </para>
             </li> </ul> 
            <para>
            When this operation is successful, the key state of the KMS key changes from <c>PendingImport</c>
            to <c>Enabled</c>, and you can use the KMS key in cryptographic operations.
            </para>
             
            <para>
            If this operation fails, use the exception to help determine the problem. If the error
            is related to the key material, the import token, or wrapping key, use <a>GetParametersForImport</a>
            to get a new public key and import token for the KMS key and repeat the import procedure.
            For help, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html#importing-keys-overview">How
            To Import Key Material</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ImportKeyMaterial</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DeleteImportedKeyMaterial</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetParametersForImport</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ImportKeyMaterial service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ImportKeyMaterial service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.ExpiredImportTokenException">
            The request was rejected because the specified import token is expired. Use <a>GetParametersForImport</a>
            to get a new import token and public key, use the new public key to encrypt the key
            material, and then try the request again.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.IncorrectKeyMaterialException">
            The request was rejected because the key material in the request is, expired, invalid,
            or is not the same key material that was previously imported into this KMS key.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidCiphertextException">
            From the <a>Decrypt</a> or <a>ReEncrypt</a> operation, the request was rejected because
            the specified ciphertext, or additional authenticated data incorporated into the ciphertext,
            such as the encryption context, is corrupted, missing, or otherwise invalid.
            
             
            <para>
            From the <a>ImportKeyMaterial</a> operation, the request was rejected because KMS
            could not decrypt the encrypted (wrapped) key material. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidImportTokenException">
            The request was rejected because the provided import token is invalid or is associated
            with a different KMS key.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ImportKeyMaterial">REST API Reference for ImportKeyMaterial Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ListAliasesAsync(Amazon.KeyManagementService.Model.ListAliasesRequest,System.Threading.CancellationToken)">
            <summary>
            Gets a list of aliases in the caller's Amazon Web Services account and region. For
            more information about aliases, see <a>CreateAlias</a>.
            
             
            <para>
            By default, the <c>ListAliases</c> operation returns all aliases in the account and
            region. To get only the aliases associated with a particular KMS key, use the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
            The <c>ListAliases</c> response can include aliases that you created and associated
            with your customer managed keys, and aliases that Amazon Web Services created and
            associated with Amazon Web Services managed keys in your account. You can recognize
            Amazon Web Services aliases because their names have the format <c>aws/&lt;service-name&gt;</c>,
            such as <c>aws/dynamodb</c>.
            </para>
             
            <para>
            The response might also include aliases that have no <c>TargetKeyId</c> field. These
            are predefined aliases that Amazon Web Services has created but has not yet associated
            with a KMS key. Aliases that Amazon Web Services creates in your account, including
            predefined aliases, do not count against your <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#aliases-limit">KMS
            aliases quota</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. <c>ListAliases</c> does not return aliases in other
            Amazon Web Services accounts.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListAliases</a>
            (IAM policy)
            </para>
             
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListAliases service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListAliases service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListAliases">REST API Reference for ListAliases Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ListGrantsAsync(Amazon.KeyManagementService.Model.ListGrantsRequest,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all grants for the specified KMS key. 
            
             
            <para>
            You must specify the KMS key in all requests. You can filter the grant list by grant
            ID or grantee principal.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             <note> 
            <para>
            The <c>GranteePrincipal</c> field in the <c>ListGrants</c> response usually contains
            the user or role designated as the grantee principal in the grant. However, when the
            grantee principal in the grant is an Amazon Web Services service, the <c>GranteePrincipal</c>
            field contains the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services">service
            principal</a>, which might represent several different grantee principals.
            </para>
             </note> 
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListGrants</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListGrants service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListGrants service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantIdException">
            The request was rejected because the specified <c>GrantId</c> is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListGrants">REST API Reference for ListGrants Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ListKeyPoliciesAsync(Amazon.KeyManagementService.Model.ListKeyPoliciesRequest,System.Threading.CancellationToken)">
            <summary>
            Gets the names of the key policies that are attached to a KMS key. This operation
            is designed to get policy names that you can use in a <a>GetKeyPolicy</a> operation.
            However, the only valid policy name is <c>default</c>. 
            
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListKeyPolicies</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>GetKeyPolicy</a> 
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html">PutKeyPolicy</a>
            
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListKeyPolicies service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListKeyPolicies service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListKeyPolicies">REST API Reference for ListKeyPolicies Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ListKeyRotationsAsync(Amazon.KeyManagementService.Model.ListKeyRotationsRequest,System.Threading.CancellationToken)">
            <summary>
            Returns information about all completed key material rotations for the specified KMS
            key.
            
             
            <para>
            You must specify the KMS key in all requests. You can refine the key rotations list
            by limiting the number of rotations returned.
            </para>
             
            <para>
            For detailed information about automatic and on-demand key rotations, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">Rotating
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListKeyRotations</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListKeyRotations service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListKeyRotations service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListKeyRotations">REST API Reference for ListKeyRotations Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ListKeysAsync(Amazon.KeyManagementService.Model.ListKeysRequest,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all KMS keys in the caller's Amazon Web Services account and Region.
            
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListKeys</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListKeys service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListKeys service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListKeys">REST API Reference for ListKeys Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ListResourceTagsAsync(Amazon.KeyManagementService.Model.ListResourceTagsRequest,System.Threading.CancellationToken)">
            <summary>
            Returns all tags on the specified KMS key.
            
             
            <para>
            For general information about tags, including the format and syntax, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
            Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.
            For information about using tags in KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging
            keys</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListResourceTags</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReplicateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>TagResource</a> 
            </para>
             </li> <li> 
            <para>
             <a>UntagResource</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListResourceTags service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListResourceTags service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListResourceTags">REST API Reference for ListResourceTags Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ListRetirableGrantsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns information about all grants in the Amazon Web Services account and Region
            that have the specified retiring principal. 
            
             
            <para>
            You can specify any principal in your Amazon Web Services account. The grants that
            are returned include grants for KMS keys in your Amazon Web Services account and other
            Amazon Web Services accounts. You might use this operation to determine which grants
            you may retire. To retire a grant, use the <a>RetireGrant</a> operation.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: You must specify a principal in your Amazon Web Services
            account. This operation returns a list of grants where the retiring principal specified
            in the <c>ListRetirableGrants</c> request is the same retiring principal on the grant.
            This can include grants on KMS keys owned by other Amazon Web Services accounts, but
            you do not need <c>kms:ListRetirableGrants</c> permission (or any other additional
            permission) in any Amazon Web Services account other than your own.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListRetirableGrants</a>
            (IAM policy) in your Amazon Web Services account.
            </para>
             <note> 
            <para>
            KMS authorizes <c>ListRetirableGrants</c> requests by evaluating the caller account's
            kms:ListRetirableGrants permissions. The authorized resource in <c>ListRetirableGrants</c>
            calls is the retiring principal specified in the request. KMS does not evaluate the
            caller's permissions to verify their access to any KMS keys or grants that might be
            returned by the <c>ListRetirableGrants</c> call.
            </para>
             </note> 
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="retiringPrincipal">The retiring principal for which to list grants. Enter a principal in your Amazon Web Services account. To specify the retiring principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of an Amazon Web Services principal. Valid principals include Amazon Web Services accounts, IAM users, IAM roles, federated users, and assumed role users. For help with the ARN syntax for a principal, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns">IAM ARNs</a> in the <i> <i>Identity and Access Management User Guide</i> </i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListRetirableGrants service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListRetirableGrants">REST API Reference for ListRetirableGrants Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ListRetirableGrantsAsync(System.Threading.CancellationToken)">
            <summary>
            Returns information about all grants in the Amazon Web Services account and Region
            that have the specified retiring principal. 
            
             
            <para>
            You can specify any principal in your Amazon Web Services account. The grants that
            are returned include grants for KMS keys in your Amazon Web Services account and other
            Amazon Web Services accounts. You might use this operation to determine which grants
            you may retire. To retire a grant, use the <a>RetireGrant</a> operation.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: You must specify a principal in your Amazon Web Services
            account. This operation returns a list of grants where the retiring principal specified
            in the <c>ListRetirableGrants</c> request is the same retiring principal on the grant.
            This can include grants on KMS keys owned by other Amazon Web Services accounts, but
            you do not need <c>kms:ListRetirableGrants</c> permission (or any other additional
            permission) in any Amazon Web Services account other than your own.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListRetirableGrants</a>
            (IAM policy) in your Amazon Web Services account.
            </para>
             <note> 
            <para>
            KMS authorizes <c>ListRetirableGrants</c> requests by evaluating the caller account's
            kms:ListRetirableGrants permissions. The authorized resource in <c>ListRetirableGrants</c>
            calls is the retiring principal specified in the request. KMS does not evaluate the
            caller's permissions to verify their access to any KMS keys or grants that might be
            returned by the <c>ListRetirableGrants</c> call.
            </para>
             </note> 
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListRetirableGrants service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListRetirableGrants">REST API Reference for ListRetirableGrants Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ListRetirableGrantsAsync(Amazon.KeyManagementService.Model.ListRetirableGrantsRequest,System.Threading.CancellationToken)">
            <summary>
            Returns information about all grants in the Amazon Web Services account and Region
            that have the specified retiring principal. 
            
             
            <para>
            You can specify any principal in your Amazon Web Services account. The grants that
            are returned include grants for KMS keys in your Amazon Web Services account and other
            Amazon Web Services accounts. You might use this operation to determine which grants
            you may retire. To retire a grant, use the <a>RetireGrant</a> operation.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: You must specify a principal in your Amazon Web Services
            account. This operation returns a list of grants where the retiring principal specified
            in the <c>ListRetirableGrants</c> request is the same retiring principal on the grant.
            This can include grants on KMS keys owned by other Amazon Web Services accounts, but
            you do not need <c>kms:ListRetirableGrants</c> permission (or any other additional
            permission) in any Amazon Web Services account other than your own.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListRetirableGrants</a>
            (IAM policy) in your Amazon Web Services account.
            </para>
             <note> 
            <para>
            KMS authorizes <c>ListRetirableGrants</c> requests by evaluating the caller account's
            kms:ListRetirableGrants permissions. The authorized resource in <c>ListRetirableGrants</c>
            calls is the retiring principal specified in the request. KMS does not evaluate the
            caller's permissions to verify their access to any KMS keys or grants that might be
            returned by the <c>ListRetirableGrants</c> call.
            </para>
             </note> 
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListRetirableGrants service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListRetirableGrants service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ListRetirableGrants">REST API Reference for ListRetirableGrants Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.PutKeyPolicyAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Attaches a key policy to the specified KMS key. 
            
             
            <para>
            For more information about key policies, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Key
            Policies</a> in the <i>Key Management Service Developer Guide</i>. For help writing
            and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM
            JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i>
            </i>. For examples of adding a key policy in multiple programming languages, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-key-policies.html#put-policy">Setting
            a key policy</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:PutKeyPolicy</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>GetKeyPolicy</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Sets the key policy on the specified KMS key. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="policy">The key policy to attach to the KMS key. The key policy must meet the following criteria: <ul> <li> The key policy must allow the calling principal to make a subsequent <c>PutKeyPolicy</c> request on the KMS key. This reduces the risk that the KMS key becomes unmanageable. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key">Default key policy</a> in the <i>Key Management Service Developer Guide</i>. (To omit this condition, set <c>BypassPolicyLockoutSafetyCheck</c> to true.) </li> <li> Each statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal, you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes that I make are not always immediately visible</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>. </li> </ul> A key policy document can include only the following characters: <ul> <li> Printable ASCII characters from the space character (<c>\u0020</c>) through the end of the ASCII character range. </li> <li> Printable characters in the Basic Latin and Latin-1 Supplement character set (through <c>\u00FF</c>). </li> <li> The tab (<c>\u0009</c>), line feed (<c>\u000A</c>), and carriage return (<c>\u000D</c>) special characters </li> </ul> For information about key policies, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Key policies in KMS</a> in the <i>Key Management Service Developer Guide</i>.For help writing and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i> </i>.</param>
            <param name="policyName">The name of the key policy. If no policy name is specified, the default value is <c>default</c>. The only valid value is <c>default</c>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutKeyPolicy service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException">
            The request was rejected because the specified policy is not syntactically or semantically
            correct.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/PutKeyPolicy">REST API Reference for PutKeyPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.PutKeyPolicyAsync(Amazon.KeyManagementService.Model.PutKeyPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Attaches a key policy to the specified KMS key. 
            
             
            <para>
            For more information about key policies, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Key
            Policies</a> in the <i>Key Management Service Developer Guide</i>. For help writing
            and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM
            JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i>
            </i>. For examples of adding a key policy in multiple programming languages, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-key-policies.html#put-policy">Setting
            a key policy</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:PutKeyPolicy</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>GetKeyPolicy</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutKeyPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutKeyPolicy service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException">
            The request was rejected because the specified policy is not syntactically or semantically
            correct.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/PutKeyPolicy">REST API Reference for PutKeyPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ReEncryptAsync(Amazon.KeyManagementService.Model.ReEncryptRequest,System.Threading.CancellationToken)">
            <summary>
            Decrypts ciphertext and then reencrypts it entirely within KMS. You can use this operation
            to change the KMS key under which data is encrypted, such as when you <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotate-keys-manually">manually
            rotate</a> a KMS key or change the KMS key that protects a ciphertext. You can also
            use it to reencrypt ciphertext under the same KMS key, such as to change the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">encryption
            context</a> of a ciphertext.
            
             
            <para>
            The <c>ReEncrypt</c> operation can decrypt ciphertext that was encrypted by using
            a KMS key in an KMS operation, such as <a>Encrypt</a> or <a>GenerateDataKey</a>. It
            can also decrypt ciphertext that was encrypted by using the public key of an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-concepts.html#asymmetric-cmks">asymmetric
            KMS key</a> outside of KMS. However, it cannot decrypt ciphertext produced by other
            libraries, such as the <a href="https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/">Amazon
            Web Services Encryption SDK</a> or <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html">Amazon
            S3 client-side encryption</a>. These libraries return a ciphertext format that is
            incompatible with KMS.
            </para>
             
            <para>
            When you use the <c>ReEncrypt</c> operation, you need to provide information for the
            decrypt operation and the subsequent encrypt operation.
            </para>
             <ul> <li> 
            <para>
            If your ciphertext was encrypted under an asymmetric KMS key, you must use the <c>SourceKeyId</c>
            parameter to identify the KMS key that encrypted the ciphertext. You must also supply
            the encryption algorithm that was used. This information is required to decrypt the
            data.
            </para>
             </li> <li> 
            <para>
            If your ciphertext was encrypted under a symmetric encryption KMS key, the <c>SourceKeyId</c>
            parameter is optional. KMS can get this information from metadata that it adds to
            the symmetric ciphertext blob. This feature adds durability to your implementation
            by ensuring that authorized users can decrypt ciphertext decades after it was encrypted,
            even if they've lost track of the key ID. However, specifying the source KMS key is
            always recommended as a best practice. When you use the <c>SourceKeyId</c> parameter
            to specify a KMS key, KMS uses only the KMS key you specify. If the ciphertext was
            encrypted under a different KMS key, the <c>ReEncrypt</c> operation fails. This practice
            ensures that you use the KMS key that you intend.
            </para>
             </li> <li> 
            <para>
            To reencrypt the data, you must use the <c>DestinationKeyId</c> parameter to specify
            the KMS key that re-encrypts the data after it is decrypted. If the destination KMS
            key is an asymmetric KMS key, you must also provide the encryption algorithm. The
            algorithm that you choose must be compatible with the KMS key.
            </para>
             <important> 
            <para>
            When you use an asymmetric KMS key to encrypt or reencrypt data, be sure to record
            the KMS key and encryption algorithm that you choose. You will be required to provide
            the same KMS key and encryption algorithm when you decrypt the data. If the KMS key
            and algorithm do not match the values used to encrypt the data, the decrypt operation
            fails.
            </para>
             
            <para>
            You are not required to supply the key ID and encryption algorithm when you decrypt
            with symmetric encryption KMS keys because KMS stores this information in the ciphertext
            blob. KMS cannot store metadata in ciphertext generated with asymmetric keys. The
            standard format for asymmetric key ciphertext does not include configurable fields.
            </para>
             </important> </li> </ul> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. The source KMS key and destination KMS key can be
            in different Amazon Web Services accounts. Either or both KMS keys can be in a different
            account than the caller. To specify a KMS key in a different account, you must use
            its key ARN or alias ARN.
            </para>
             
            <para>
             <b>Required permissions</b>:
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ReEncryptFrom</a>
            permission on the source KMS key (key policy)
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ReEncryptTo</a>
            permission on the destination KMS key (key policy)
            </para>
             </li> </ul> 
            <para>
            To permit reencryption from or to a KMS key, include the <c>"kms:ReEncrypt*"</c> permission
            in your <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">key
            policy</a>. This permission is automatically included in the key policy when you use
            the console to create a KMS key. But you must include it manually when you create
            a KMS key programmatically or when you use the <a>PutKeyPolicy</a> operation to set
            a key policy.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ReEncrypt service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ReEncrypt service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.IncorrectKeyException">
            The request was rejected because the specified KMS key cannot decrypt the data. The
            <c>KeyId</c> in a <a>Decrypt</a> request and the <c>SourceKeyId</c> in a <a>ReEncrypt</a>
            request must identify the same KMS key that was used to encrypt the ciphertext.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidCiphertextException">
            From the <a>Decrypt</a> or <a>ReEncrypt</a> operation, the request was rejected because
            the specified ciphertext, or additional authenticated data incorporated into the ciphertext,
            such as the encryption context, is corrupted, missing, or otherwise invalid.
            
             
            <para>
            From the <a>ImportKeyMaterial</a> operation, the request was rejected because KMS
            could not decrypt the encrypted (wrapped) key material. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ReEncrypt">REST API Reference for ReEncrypt Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ReplicateKeyAsync(Amazon.KeyManagementService.Model.ReplicateKeyRequest,System.Threading.CancellationToken)">
            <summary>
            Replicates a multi-Region key into the specified Region. This operation creates a
            multi-Region replica key based on a multi-Region primary key in a different Region
            of the same Amazon Web Services partition. You can create multiple replicas of a primary
            key, but each must be in a different Region. To create a multi-Region primary key,
            use the <a>CreateKey</a> operation.
            
             
            <para>
            This operation supports <i>multi-Region keys</i>, an KMS feature that lets you create
            multiple interoperable KMS keys in different Amazon Web Services Regions. Because
            these KMS keys have the same key ID, key material, and other metadata, you can use
            them interchangeably to encrypt data in one Amazon Web Services Region and decrypt
            it in a different Amazon Web Services Region without re-encrypting the data or making
            a cross-Region call. For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            A <i>replica key</i> is a fully-functional KMS key that can be used independently
            of its primary and peer replica keys. A primary key and its replica keys share properties
            that make them interoperable. They have the same <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id">key
            ID</a> and key material. They also have the same <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-spec">key
            spec</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-usage">key
            usage</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-origin">key
            material origin</a>, and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            key rotation status</a>. KMS automatically synchronizes these shared properties among
            related multi-Region keys. All other properties of a replica key can differ, including
            its <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">key
            policy</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">tags</a>,
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html">aliases</a>,
            and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a>. KMS pricing and quotas for KMS keys apply to each primary
            key and replica key.
            </para>
             
            <para>
            When this operation completes, the new replica key has a transient key state of <c>Creating</c>.
            This key state changes to <c>Enabled</c> (or <c>PendingImport</c>) after a few seconds
            when the process of creating the new replica key is complete. While the key state
            is <c>Creating</c>, you can manage key, but you cannot yet use it in cryptographic
            operations. If you are creating and using the replica key programmatically, retry
            on <c>KMSInvalidStateException</c> or call <c>DescribeKey</c> to check its <c>KeyState</c>
            value before using it. For details about the <c>Creating</c> key state, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            You cannot create more than one replica of a primary key in any Region. If the Region
            already includes a replica of the key you're trying to replicate, <c>ReplicateKey</c>
            returns an <c>AlreadyExistsException</c> error. If the key state of the existing replica
            is <c>PendingDeletion</c>, you can cancel the scheduled key deletion (<a>CancelKeyDeletion</a>)
            or wait for the key to be deleted. The new replica key you create will have the same
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html#mrk-sync-properties">shared
            properties</a> as the original replica key.
            </para>
             
            <para>
            The CloudTrail log of a <c>ReplicateKey</c> operation records a <c>ReplicateKey</c>
            operation in the primary key's Region and a <a>CreateKey</a> operation in the replica
            key's Region.
            </para>
             
            <para>
            If you replicate a multi-Region primary key with imported key material, the replica
            key is created with no key material. You must import the same key material that you
            imported into the primary key. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-import.html">Importing
            key material into multi-Region keys</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            To convert a replica key to a primary key, use the <a>UpdatePrimaryRegion</a> operation.
            </para>
             <note> 
            <para>
             <c>ReplicateKey</c> uses different default values for the <c>KeyPolicy</c> and <c>Tags</c>
            parameters than those used in the KMS console. For details, see the parameter descriptions.
            </para>
             </note> 
            <para>
             <b>Cross-account use</b>: No. You cannot use this operation to create a replica key
            in a different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: 
            </para>
             <ul> <li> 
            <para>
             <c>kms:ReplicateKey</c> on the primary key (in the primary key's Region). Include
            this permission in the primary key's key policy.
            </para>
             </li> <li> 
            <para>
             <c>kms:CreateKey</c> in an IAM policy in the replica Region.
            </para>
             </li> <li> 
            <para>
            To use the <c>Tags</c> parameter, <c>kms:TagResource</c> in an IAM policy in the replica
            Region.
            </para>
             </li> </ul> 
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdatePrimaryRegion</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ReplicateKey service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ReplicateKey service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.AlreadyExistsException">
            The request was rejected because it attempted to create a resource that already exists.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException">
            The request was rejected because the specified policy is not syntactically or semantically
            correct.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.TagException">
            The request was rejected because one or more tags are not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ReplicateKey">REST API Reference for ReplicateKey Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.RetireGrantAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a grant. Typically, you retire a grant when you no longer need its permissions.
            To identify the grant to retire, use a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">grant
            token</a>, or both the grant ID and a key identifier (key ID or key ARN) of the KMS
            key. The <a>CreateGrant</a> operation returns both values.
            
             
            <para>
            This operation can be called by the <i>retiring principal</i> for a grant, by the
            <i>grantee principal</i> if the grant allows the <c>RetireGrant</c> operation, and
            by the Amazon Web Services account in which the grant is created. It can also be called
            by principals to whom permission for retiring a grant is delegated. For details, see
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. You can retire a grant on a KMS key in a different
            Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: Permission to retire a grant is determined primarily
            by the grant. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="grantToken">Identifies the grant to be retired. You can use a grant token to identify a new grant even before it has achieved eventual consistency. Only the <a>CreateGrant</a> operation returns a grant token. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-eventual-consistency">Eventual consistency</a> in the <i>Key Management Service Developer Guide</i>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RetireGrant service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantIdException">
            The request was rejected because the specified <c>GrantId</c> is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/RetireGrant">REST API Reference for RetireGrant Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.RetireGrantAsync(Amazon.KeyManagementService.Model.RetireGrantRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes a grant. Typically, you retire a grant when you no longer need its permissions.
            To identify the grant to retire, use a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">grant
            token</a>, or both the grant ID and a key identifier (key ID or key ARN) of the KMS
            key. The <a>CreateGrant</a> operation returns both values.
            
             
            <para>
            This operation can be called by the <i>retiring principal</i> for a grant, by the
            <i>grantee principal</i> if the grant allows the <c>RetireGrant</c> operation, and
            by the Amazon Web Services account in which the grant is created. It can also be called
            by principals to whom permission for retiring a grant is delegated. For details, see
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. You can retire a grant on a KMS key in a different
            Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: Permission to retire a grant is determined primarily
            by the grant. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RetireGrant service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RetireGrant service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantIdException">
            The request was rejected because the specified <c>GrantId</c> is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/RetireGrant">REST API Reference for RetireGrant Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.RevokeGrantAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified grant. You revoke a grant to terminate the permissions that
            the grant allows. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            
             
            <para>
            When you create, retire, or revoke a grant, there might be a brief delay, usually
            less than five minutes, until the grant is available throughout KMS. This state is
            known as <i>eventual consistency</i>. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-eventual-consistency">Eventual
            consistency</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. 
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:RevokeGrant</a>
            (key policy).
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="grantId">Identifies the grant to revoke. To get the grant ID, use <a>CreateGrant</a>, <a>ListGrants</a>, or <a>ListRetirableGrants</a>.</param>
            <param name="keyId">A unique identifier for the KMS key associated with the grant. To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>. Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RevokeGrant service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantIdException">
            The request was rejected because the specified <c>GrantId</c> is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/RevokeGrant">REST API Reference for RevokeGrant Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.RevokeGrantAsync(Amazon.KeyManagementService.Model.RevokeGrantRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified grant. You revoke a grant to terminate the permissions that
            the grant allows. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            
             
            <para>
            When you create, retire, or revoke a grant, there might be a brief delay, usually
            less than five minutes, until the grant is available throughout KMS. This state is
            known as <i>eventual consistency</i>. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-eventual-consistency">Eventual
            consistency</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. 
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:RevokeGrant</a>
            (key policy).
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RevokeGrant service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RevokeGrant service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantIdException">
            The request was rejected because the specified <c>GrantId</c> is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/RevokeGrant">REST API Reference for RevokeGrant Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.RotateKeyOnDemandAsync(Amazon.KeyManagementService.Model.RotateKeyOnDemandRequest,System.Threading.CancellationToken)">
            <summary>
            Immediately initiates rotation of the key material of the specified symmetric encryption
            KMS key.
            
             
            <para>
            You can perform <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-on-demand">on-demand
            rotation</a> of the key material in customer managed KMS keys, regardless of whether
            or not <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-enable-disable">automatic
            key rotation</a> is enabled. On-demand rotations do not change existing automatic
            rotation schedules. For example, consider a KMS key that has automatic key rotation
            enabled with a rotation period of 730 days. If the key is scheduled to automatically
            rotate on April 14, 2024, and you perform an on-demand rotation on April 10, 2024,
            the key will automatically rotate, as scheduled, on April 14, 2024 and every 730 days
            thereafter.
            </para>
             <note> 
            <para>
            You can perform on-demand key rotation a <b>maximum of 10 times</b> per KMS key. You
            can use the KMS console to view the number of remaining on-demand rotations available
            for a KMS key.
            </para>
             </note> 
            <para>
            You can use <a>GetKeyRotationStatus</a> to identify any in progress on-demand rotations.
            You can use <a>ListKeyRotations</a> to identify the date that completed on-demand
            rotations were performed. You can monitor rotation of the key material for your KMS
            keys in CloudTrail and Amazon CloudWatch.
            </para>
             
            <para>
            On-demand key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot perform on-demand rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To perform on-demand rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, invoke the on-demand rotation on the primary key.
            </para>
             
            <para>
            You cannot initiate on-demand rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a>. KMS always rotates the key material of Amazon Web
            Services managed keys every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> is managed by the Amazon Web Services service that
            owns the key.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:RotateKeyOnDemand</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RotateKeyOnDemand service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RotateKeyOnDemand service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.ConflictException">
            The request was rejected because an automatic rotation of this key is currently in
            progress or scheduled to begin within the next 20 minutes.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/RotateKeyOnDemand">REST API Reference for RotateKeyOnDemand Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ScheduleKeyDeletionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Schedules the deletion of a KMS key. By default, KMS applies a waiting period of 30
            days, but you can specify a waiting period of 7-30 days. When this operation is successful,
            the key state of the KMS key changes to <c>PendingDeletion</c> and the key can't be
            used in any cryptographic operations. It remains in this state for the duration of
            the waiting period. Before the waiting period ends, you can use <a>CancelKeyDeletion</a>
            to cancel the deletion of the KMS key. After the waiting period ends, KMS deletes
            the KMS key, its key material, and all KMS data associated with it, including all
            aliases that refer to it.
            
             <important> 
            <para>
            Deleting a KMS key is a destructive and potentially dangerous operation. When a KMS
            key is deleted, all data that was encrypted under the KMS key is unrecoverable. (The
            only exception is a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">multi-Region
            replica key</a>, or an <a href="kms/latest/developerguide/importing-keys-managing.html#import-delete-key">asymmetric
            or HMAC KMS key with imported key material</a>.) To prevent the use of a KMS key without
            deleting it, use <a>DisableKey</a>. 
            </para>
             </important> 
            <para>
            You can schedule the deletion of a multi-Region primary key and its replica keys at
            any time. However, KMS will not delete a multi-Region primary key with existing replica
            keys. If you schedule the deletion of a primary key with replicas, its key state changes
            to <c>PendingReplicaDeletion</c> and it cannot be replicated or used in cryptographic
            operations. This status can continue indefinitely. When the last of its replicas keys
            is deleted (not just scheduled), the key state of the primary key changes to <c>PendingDeletion</c>
            and its waiting period (<c>PendingWindowInDays</c>) begins. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">Deleting
            multi-Region keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            When KMS <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-cmk-keystore.html">deletes
            a KMS key from an CloudHSM key store</a>, it makes a best effort to delete the associated
            key material from the associated CloudHSM cluster. However, you might need to manually
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key">delete
            the orphaned key material</a> from the cluster and its backups. <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-xks-key.html">Deleting
            a KMS key from an external key store</a> has no effect on the associated external
            key. However, for both types of custom key stores, deleting a KMS key is destructive
            and irreversible. You cannot decrypt ciphertext encrypted under the KMS key by using
            only its associated external key or CloudHSM key. Also, you cannot recreate a KMS
            key in an external key store by creating a new KMS key with the same key material.
            </para>
             
            <para>
            For more information about scheduling a KMS key for deletion, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html">Deleting
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: kms:ScheduleKeyDeletion (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CancelKeyDeletion</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">The unique identifier of the KMS key to delete. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ScheduleKeyDeletion service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ScheduleKeyDeletion">REST API Reference for ScheduleKeyDeletion Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ScheduleKeyDeletionAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Schedules the deletion of a KMS key. By default, KMS applies a waiting period of 30
            days, but you can specify a waiting period of 7-30 days. When this operation is successful,
            the key state of the KMS key changes to <c>PendingDeletion</c> and the key can't be
            used in any cryptographic operations. It remains in this state for the duration of
            the waiting period. Before the waiting period ends, you can use <a>CancelKeyDeletion</a>
            to cancel the deletion of the KMS key. After the waiting period ends, KMS deletes
            the KMS key, its key material, and all KMS data associated with it, including all
            aliases that refer to it.
            
             <important> 
            <para>
            Deleting a KMS key is a destructive and potentially dangerous operation. When a KMS
            key is deleted, all data that was encrypted under the KMS key is unrecoverable. (The
            only exception is a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">multi-Region
            replica key</a>, or an <a href="kms/latest/developerguide/importing-keys-managing.html#import-delete-key">asymmetric
            or HMAC KMS key with imported key material</a>.) To prevent the use of a KMS key without
            deleting it, use <a>DisableKey</a>. 
            </para>
             </important> 
            <para>
            You can schedule the deletion of a multi-Region primary key and its replica keys at
            any time. However, KMS will not delete a multi-Region primary key with existing replica
            keys. If you schedule the deletion of a primary key with replicas, its key state changes
            to <c>PendingReplicaDeletion</c> and it cannot be replicated or used in cryptographic
            operations. This status can continue indefinitely. When the last of its replicas keys
            is deleted (not just scheduled), the key state of the primary key changes to <c>PendingDeletion</c>
            and its waiting period (<c>PendingWindowInDays</c>) begins. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">Deleting
            multi-Region keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            When KMS <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-cmk-keystore.html">deletes
            a KMS key from an CloudHSM key store</a>, it makes a best effort to delete the associated
            key material from the associated CloudHSM cluster. However, you might need to manually
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key">delete
            the orphaned key material</a> from the cluster and its backups. <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-xks-key.html">Deleting
            a KMS key from an external key store</a> has no effect on the associated external
            key. However, for both types of custom key stores, deleting a KMS key is destructive
            and irreversible. You cannot decrypt ciphertext encrypted under the KMS key by using
            only its associated external key or CloudHSM key. Also, you cannot recreate a KMS
            key in an external key store by creating a new KMS key with the same key material.
            </para>
             
            <para>
            For more information about scheduling a KMS key for deletion, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html">Deleting
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: kms:ScheduleKeyDeletion (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CancelKeyDeletion</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">The unique identifier of the KMS key to delete. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="pendingWindowInDays">The waiting period, specified in number of days. After the waiting period ends, KMS deletes the KMS key. If the KMS key is a multi-Region primary key with replica keys, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately. This value is optional. If you include a value, it must be between 7 and 30, inclusive. If you do not include a value, it defaults to 30. You can use the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/conditions-kms.html#conditions-kms-schedule-key-deletion-pending-window-in-days"> <c>kms:ScheduleKeyDeletionPendingWindowInDays</c> </a> condition key to further constrain the values that principals can specify in the <c>PendingWindowInDays</c> parameter.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ScheduleKeyDeletion service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ScheduleKeyDeletion">REST API Reference for ScheduleKeyDeletion Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.ScheduleKeyDeletionAsync(Amazon.KeyManagementService.Model.ScheduleKeyDeletionRequest,System.Threading.CancellationToken)">
            <summary>
            Schedules the deletion of a KMS key. By default, KMS applies a waiting period of 30
            days, but you can specify a waiting period of 7-30 days. When this operation is successful,
            the key state of the KMS key changes to <c>PendingDeletion</c> and the key can't be
            used in any cryptographic operations. It remains in this state for the duration of
            the waiting period. Before the waiting period ends, you can use <a>CancelKeyDeletion</a>
            to cancel the deletion of the KMS key. After the waiting period ends, KMS deletes
            the KMS key, its key material, and all KMS data associated with it, including all
            aliases that refer to it.
            
             <important> 
            <para>
            Deleting a KMS key is a destructive and potentially dangerous operation. When a KMS
            key is deleted, all data that was encrypted under the KMS key is unrecoverable. (The
            only exception is a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">multi-Region
            replica key</a>, or an <a href="kms/latest/developerguide/importing-keys-managing.html#import-delete-key">asymmetric
            or HMAC KMS key with imported key material</a>.) To prevent the use of a KMS key without
            deleting it, use <a>DisableKey</a>. 
            </para>
             </important> 
            <para>
            You can schedule the deletion of a multi-Region primary key and its replica keys at
            any time. However, KMS will not delete a multi-Region primary key with existing replica
            keys. If you schedule the deletion of a primary key with replicas, its key state changes
            to <c>PendingReplicaDeletion</c> and it cannot be replicated or used in cryptographic
            operations. This status can continue indefinitely. When the last of its replicas keys
            is deleted (not just scheduled), the key state of the primary key changes to <c>PendingDeletion</c>
            and its waiting period (<c>PendingWindowInDays</c>) begins. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">Deleting
            multi-Region keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            When KMS <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-cmk-keystore.html">deletes
            a KMS key from an CloudHSM key store</a>, it makes a best effort to delete the associated
            key material from the associated CloudHSM cluster. However, you might need to manually
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key">delete
            the orphaned key material</a> from the cluster and its backups. <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-xks-key.html">Deleting
            a KMS key from an external key store</a> has no effect on the associated external
            key. However, for both types of custom key stores, deleting a KMS key is destructive
            and irreversible. You cannot decrypt ciphertext encrypted under the KMS key by using
            only its associated external key or CloudHSM key. Also, you cannot recreate a KMS
            key in an external key store by creating a new KMS key with the same key material.
            </para>
             
            <para>
            For more information about scheduling a KMS key for deletion, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html">Deleting
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: kms:ScheduleKeyDeletion (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CancelKeyDeletion</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ScheduleKeyDeletion service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ScheduleKeyDeletion service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/ScheduleKeyDeletion">REST API Reference for ScheduleKeyDeletion Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.SignAsync(Amazon.KeyManagementService.Model.SignRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a <a href="https://en.wikipedia.org/wiki/Digital_signature">digital signature</a>
            for a message or message digest by using the private key in an asymmetric signing
            KMS key. To verify the signature, use the <a>Verify</a> operation, or use the public
            key in the same asymmetric KMS key outside of KMS. For information about asymmetric
            KMS keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            
             
            <para>
            Digital signatures are generated and verified by using asymmetric key pair, such as
            an RSA or ECC pair that is represented by an asymmetric KMS key. The key owner (or
            an authorized user) uses their private key to sign a message. Anyone with the public
            key can verify that the message was signed with that particular private key and that
            the message hasn't changed since it was signed. 
            </para>
             
            <para>
            To use the <c>Sign</c> operation, provide the following information:
            </para>
             <ul> <li> 
            <para>
            Use the <c>KeyId</c> parameter to identify an asymmetric KMS key with a <c>KeyUsage</c>
            value of <c>SIGN_VERIFY</c>. To get the <c>KeyUsage</c> value of a KMS key, use the
            <a>DescribeKey</a> operation. The caller must have <c>kms:Sign</c> permission on the
            KMS key.
            </para>
             </li> <li> 
            <para>
            Use the <c>Message</c> parameter to specify the message or message digest to sign.
            You can submit messages of up to 4096 bytes. To sign a larger message, generate a
            hash digest of the message, and then provide the hash digest in the <c>Message</c>
            parameter. To indicate whether the message is a full message or a digest, use the
            <c>MessageType</c> parameter.
            </para>
             </li> <li> 
            <para>
            Choose a signing algorithm that is compatible with the KMS key. 
            </para>
             </li> </ul> <important> 
            <para>
            When signing a message, be sure to record the KMS key and the signing algorithm. This
            information is required to verify the signature.
            </para>
             </important> <note> 
            <para>
            Best practices recommend that you limit the time during which any signature is effective.
            This deters an attack where the actor uses a signed message to establish validity
            repeatedly or long after the message is superseded. Signatures do not include a timestamp,
            but you can include a timestamp in the signed message to help you detect when its
            time to refresh the signature. 
            </para>
             </note> 
            <para>
            To verify the signature that this operation generates, use the <a>Verify</a> operation.
            Or use the <a>GetPublicKey</a> operation to download the public key and then use the
            public key to verify the signature outside of KMS. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:Sign</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>Verify</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Sign service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Sign service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/Sign">REST API Reference for Sign Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.TagResourceAsync(Amazon.KeyManagementService.Model.TagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Adds or edits tags on a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a>.
            
             <note> 
            <para>
            Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            Each tag consists of a tag key and a tag value, both of which are case-sensitive strings.
            The tag value can be an empty (null) string. To add a tag, specify a new tag key and
            a tag value. To edit a tag, specify an existing tag key and a new tag value.
            </para>
             
            <para>
            You can use this operation to tag a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a>, but you cannot tag an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed key</a>, an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned key</a>, a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#keystore-concept">custom
            key store</a>, or an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#alias-concept">alias</a>.
            </para>
             
            <para>
            You can also add tags to a KMS key while creating it (<a>CreateKey</a>) or replicating
            it (<a>ReplicateKey</a>).
            </para>
             
            <para>
            For information about using tags in KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging
            keys</a>. For general information about tags, including the format and syntax, see
            <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon
            Web Services resources</a> in the <i>Amazon Web Services General Reference</i>. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReplicateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>UntagResource</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the TagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the TagResource service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.TagException">
            The request was rejected because one or more tags are not valid.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.UntagResourceAsync(Amazon.KeyManagementService.Model.UntagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes tags from a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a>. To delete a tag, specify the tag key and the KMS key.
            
             <note> 
            <para>
            Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            When it succeeds, the <c>UntagResource</c> operation doesn't return any output. Also,
            if the specified tag key isn't found on the KMS key, it doesn't throw an exception
            or return a response. To confirm that the operation worked, use the <a>ListResourceTags</a>
            operation.
            </para>
             
            <para>
            For information about using tags in KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging
            keys</a>. For general information about tags, including the format and syntax, see
            <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon
            Web Services resources</a> in the <i>Amazon Web Services General Reference</i>. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UntagResource</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReplicateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>TagResource</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UntagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UntagResource service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.TagException">
            The request was rejected because one or more tags are not valid.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.UpdateAliasAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Associates an existing KMS alias with a different KMS key. Each alias is associated
            with only one KMS key at a time, although a KMS key can have multiple aliases. The
            alias and the KMS key must be in the same Amazon Web Services account and Region.
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            The current and new KMS key must be the same type (both symmetric or both asymmetric
            or both HMAC), and they must have the same key usage. This restriction prevents errors
            in code that uses aliases. If you must assign an alias to a different type of KMS
            key, use <a>DeleteAlias</a> to delete the old alias and <a>CreateAlias</a> to create
            a new alias.
            </para>
             
            <para>
            You cannot use <c>UpdateAlias</c> to change an alias name. To change an alias name,
            use <a>DeleteAlias</a> to delete the old alias and <a>CreateAlias</a> to create a
            new alias.
            </para>
             
            <para>
            Because an alias is not a property of a KMS key, you can create, update, and delete
            the aliases of a KMS key without affecting the KMS key. Also, aliases do not appear
            in the response from the <a>DescribeKey</a> operation. To get the aliases of all KMS
            keys in the account, use the <a>ListAliases</a> operation. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the current KMS key (key policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the new KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="aliasName">Identifies the alias that is changing its KMS key. This value must begin with <c>alias/</c> followed by the alias name, such as <c>alias/ExampleAlias</c>. You cannot use <c>UpdateAlias</c> to change the alias name. <important> Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. </important></param>
            <param name="targetKeyId">Identifies the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed key</a> to associate with the alias. You don't have permission to associate an alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon Web Services managed key</a>. The KMS key must be in the same Amazon Web Services account and Region as the alias. Also, the new target KMS key must be the same type as the current target KMS key (both symmetric or both asymmetric or both HMAC) and they must have the same key usage.  Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>. To verify that the alias is mapped to the correct KMS key, use <a>ListAliases</a>.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateAlias service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UpdateAlias">REST API Reference for UpdateAlias Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.UpdateAliasAsync(Amazon.KeyManagementService.Model.UpdateAliasRequest,System.Threading.CancellationToken)">
            <summary>
            Associates an existing KMS alias with a different KMS key. Each alias is associated
            with only one KMS key at a time, although a KMS key can have multiple aliases. The
            alias and the KMS key must be in the same Amazon Web Services account and Region.
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            The current and new KMS key must be the same type (both symmetric or both asymmetric
            or both HMAC), and they must have the same key usage. This restriction prevents errors
            in code that uses aliases. If you must assign an alias to a different type of KMS
            key, use <a>DeleteAlias</a> to delete the old alias and <a>CreateAlias</a> to create
            a new alias.
            </para>
             
            <para>
            You cannot use <c>UpdateAlias</c> to change an alias name. To change an alias name,
            use <a>DeleteAlias</a> to delete the old alias and <a>CreateAlias</a> to create a
            new alias.
            </para>
             
            <para>
            Because an alias is not a property of a KMS key, you can create, update, and delete
            the aliases of a KMS key without affecting the KMS key. Also, aliases do not appear
            in the response from the <a>DescribeKey</a> operation. To get the aliases of all KMS
            keys in the account, use the <a>ListAliases</a> operation. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the current KMS key (key policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the new KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateAlias service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateAlias service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.LimitExceededException">
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UpdateAlias">REST API Reference for UpdateAlias Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.UpdateCustomKeyStoreAsync(Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest,System.Threading.CancellationToken)">
            <summary>
            Changes the properties of a custom key store. You can use this operation to change
            the properties of an CloudHSM key store or an external key store.
            
             
            <para>
            Use the required <c>CustomKeyStoreId</c> parameter to identify the custom key store.
            Use the remaining optional parameters to change its properties. This operation does
            not return any property values. To verify the updated property values, use the <a>DescribeCustomKeyStores</a>
            operation.
            </para>
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             <important> 
            <para>
            When updating the properties of an external key store, verify that the updated settings
            connect your key store, via the external key store proxy, to the same external key
            manager as the previous settings, or to a backup or snapshot of the external key manager
            with the same cryptographic keys. If the updated connection settings fail, you can
            fix them and retry, although an extended delay might disrupt Amazon Web Services services.
            However, if KMS permanently loses its access to cryptographic keys, ciphertext encrypted
            under those keys is unrecoverable.
            </para>
             </important> <note> 
            <para>
            For external key stores:
            </para>
             
            <para>
            Some external key managers provide a simpler method for updating an external key store.
            For details, see your external key manager documentation.
            </para>
             
            <para>
            When updating an external key store in the KMS console, you can upload a JSON-based
            proxy configuration file with the desired values. You cannot upload the proxy configuration
            file to the <c>UpdateCustomKeyStore</c> operation. However, you can use the file to
            help you determine the correct values for the <c>UpdateCustomKeyStore</c> parameters.
            </para>
             </note> 
            <para>
            For an CloudHSM key store, you can use this operation to change the custom key store
            friendly name (<c>NewCustomKeyStoreName</c>), to tell KMS about a change to the <c>kmsuser</c>
            crypto user password (<c>KeyStorePassword</c>), or to associate the custom key store
            with a different, but related, CloudHSM cluster (<c>CloudHsmClusterId</c>). To update
            any property of an CloudHSM key store, the <c>ConnectionState</c> of the CloudHSM
            key store must be <c>DISCONNECTED</c>. 
            </para>
             
            <para>
            For an external key store, you can use this operation to change the custom key store
            friendly name (<c>NewCustomKeyStoreName</c>), or to tell KMS about a change to the
            external key store proxy authentication credentials (<c>XksProxyAuthenticationCredential</c>),
            connection method (<c>XksProxyConnectivity</c>), external proxy endpoint (<c>XksProxyUriEndpoint</c>)
            and path (<c>XksProxyUriPath</c>). For external key stores with an <c>XksProxyConnectivity</c>
            of <c>VPC_ENDPOINT_SERVICE</c>, you can also update the Amazon VPC endpoint service
            name (<c>XksProxyVpcEndpointServiceName</c>). To update most properties of an external
            key store, the <c>ConnectionState</c> of the external key store must be <c>DISCONNECTED</c>.
            However, you can update the <c>CustomKeyStoreName</c>, <c>XksProxyAuthenticationCredential</c>,
            and <c>XksProxyUriPath</c> of an external key store when it is in the CONNECTED or
            DISCONNECTED state. 
            </para>
             
            <para>
            If your update requires a <c>DISCONNECTED</c> state, before using <c>UpdateCustomKeyStore</c>,
            use the <a>DisconnectCustomKeyStore</a> operation to disconnect the custom key store.
            After the <c>UpdateCustomKeyStore</c> operation completes, use the <a>ConnectCustomKeyStore</a>
            to reconnect the custom key store. To find the <c>ConnectionState</c> of the custom
            key store, use the <a>DescribeCustomKeyStores</a> operation. 
            </para>
             
            <para>
             
            </para>
             
            <para>
            Before updating the custom key store, verify that the new values allow KMS to connect
            the custom key store to its backing key store. For example, before you change the
            <c>XksProxyUriPath</c> value, verify that the external key store proxy is reachable
            at the new path.
            </para>
             
            <para>
            If the operation succeeds, it returns a JSON object with no properties.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateCustomKeyStore</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateCustomKeyStore service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateCustomKeyStore service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException">
            The request was rejected because the associated CloudHSM cluster did not meet the
            configuration requirements for an CloudHSM key store.
            
             <ul> <li> 
            <para>
            The CloudHSM cluster must be configured with private subnets in at least two different
            Availability Zones in the Region.
            </para>
             </li> <li> 
            <para>
            The <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">security
            group for the cluster</a> (cloudhsm-cluster-<i>&lt;cluster-id&gt;</i>-sg) must include
            inbound rules and outbound rules that allow TCP traffic on ports 2223-2225. The <b>Source</b>
            in the inbound rules and the <b>Destination</b> in the outbound rules must match the
            security group ID. These rules are set by default when you create the CloudHSM cluster.
            Do not delete or change them. To get information about a particular security group,
            use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html">DescribeSecurityGroups</a>
            operation.
            </para>
             </li> <li> 
            <para>
            The CloudHSM cluster must contain at least as many HSMs as the operation requires.
            To add HSMs, use the CloudHSM <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html">CreateHsm</a>
            operation.
            </para>
             
            <para>
            For the <a>CreateCustomKeyStore</a>, <a>UpdateCustomKeyStore</a>, and <a>CreateKey</a>
            operations, the CloudHSM cluster must have at least two active HSMs, each in a different
            Availability Zone. For the <a>ConnectCustomKeyStore</a> operation, the CloudHSM must
            contain at least one active HSM.
            </para>
             </li> </ul> 
            <para>
            For information about the requirements for an CloudHSM cluster that is associated
            with an CloudHSM key store, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">Assemble
            the Prerequisites</a> in the <i>Key Management Service Developer Guide</i>. For information
            about creating a private subnet for an CloudHSM cluster, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/create-subnets.html">Create
            a Private Subnet</a> in the <i>CloudHSM User Guide</i>. For information about cluster
            security groups, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">Configure
            a Default Security Group</a> in the <i> <i>CloudHSM User Guide</i> </i>. 
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException">
            The request was rejected because the CloudHSM cluster associated with the CloudHSM
            key store is not active. Initialize and activate the cluster and try the command again.
            For detailed instructions, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/getting-started.html">Getting
            Started</a> in the <i>CloudHSM User Guide</i>.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotFoundException">
            The request was rejected because KMS cannot find the CloudHSM cluster with the specified
            cluster ID. Retry the request with a different cluster ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotRelatedException">
            The request was rejected because the specified CloudHSM cluster has a different cluster
            certificate than the original cluster. You cannot use the operation to specify an
            unrelated cluster for an CloudHSM key store.
            
             
            <para>
            Specify an CloudHSM cluster that shares a backup history with the original cluster.
            This includes clusters that were created from a backup of the current cluster, and
            clusters that were created from the same backup that produced the current cluster.
            </para>
             
            <para>
            CloudHSM clusters that share a backup history have the same cluster certificate. To
            view the cluster certificate of an CloudHSM cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a>
            operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNameInUseException">
            The request was rejected because the specified custom key store name is already assigned
            to another custom key store in the account. Try again with a custom key store name
            that is unique in the account.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyIncorrectAuthenticationCredentialException">
            The request was rejected because the proxy credentials failed to authenticate to the
            specified external key store proxy. The specified external key store proxy rejected
            a status request from KMS due to invalid credentials. This can indicate an error in
            the credentials or in the identification of the external key store proxy.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyInvalidConfigurationException">
            The request was rejected because the external key store proxy is not configured correctly.
            To identify the cause, see the error message that accompanies the exception.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyInvalidResponseException">
            KMS cannot interpret the response it received from the external key store proxy. The
            problem might be a poorly constructed response, but it could also be a transient network
            issue. If you see this error repeatedly, report it to the proxy vendor.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyUriEndpointInUseException">
            The request was rejected because the <c>XksProxyUriEndpoint</c> is already associated
            with another external key store in this Amazon Web Services Region. To identify the
            cause, see the error message that accompanies the exception.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyUriInUseException">
            The request was rejected because the concatenation of the <c>XksProxyUriEndpoint</c>
            and <c>XksProxyUriPath</c> is already associated with another external key store in
            this Amazon Web Services Region. Each external key store in a Region must use a unique
            external key store proxy API address.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyUriUnreachableException">
            KMS was unable to reach the specified <c>XksProxyUriPath</c>. The path must be reachable
            before you create the external key store or update its settings.
            
             
            <para>
            This exception is also thrown when the external key store proxy response to a <c>GetHealthStatus</c>
            request indicates that all external key manager instances are unavailable.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInUseException">
            The request was rejected because the specified Amazon VPC endpoint service is already
            associated with another external key store in this Amazon Web Services Region. Each
            external key store in a Region must use a different Amazon VPC endpoint service.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInvalidConfigurationException">
            The request was rejected because the Amazon VPC endpoint service configuration does
            not fulfill the requirements for an external key store. To identify the cause, see
            the error message that accompanies the exception and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/vpc-connectivity.html#xks-vpc-requirements">review
            the requirements</a> for Amazon VPC endpoint service connectivity for an external
            key store.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceNotFoundException">
            The request was rejected because KMS could not find the specified VPC endpoint service.
            Use <a>DescribeCustomKeyStores</a> to verify the VPC endpoint service name for the
            external key store. Also, confirm that the <c>Allow principals</c> list for the VPC
            endpoint service includes the KMS service principal for the Region, such as <c>cks.kms.us-east-1.amazonaws.com</c>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UpdateCustomKeyStore">REST API Reference for UpdateCustomKeyStore Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.UpdateKeyDescriptionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates the description of a KMS key. To see the description of a KMS key, use <a>DescribeKey</a>.
            
            
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateKeyDescription</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="keyId">Updates the description of the specified KMS key. Specify the key ID or key ARN of the KMS key. For example: <ul> <li> Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> <li> Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>  </li> </ul> To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.</param>
            <param name="description">New description for the KMS key. <important> Do not include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output. </important></param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateKeyDescription service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UpdateKeyDescription">REST API Reference for UpdateKeyDescription Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.UpdateKeyDescriptionAsync(Amazon.KeyManagementService.Model.UpdateKeyDescriptionRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the description of a KMS key. To see the description of a KMS key, use <a>DescribeKey</a>.
            
            
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateKeyDescription</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateKeyDescription service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateKeyDescription service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UpdateKeyDescription">REST API Reference for UpdateKeyDescription Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.UpdatePrimaryRegionAsync(Amazon.KeyManagementService.Model.UpdatePrimaryRegionRequest,System.Threading.CancellationToken)">
            <summary>
            Changes the primary key of a multi-Region key. 
            
             
            <para>
            This operation changes the replica key in the specified Region to a primary key and
            changes the former primary key to a replica key. For example, suppose you have a primary
            key in <c>us-east-1</c> and a replica key in <c>eu-west-2</c>. If you run <c>UpdatePrimaryRegion</c>
            with a <c>PrimaryRegion</c> value of <c>eu-west-2</c>, the primary key is now the
            key in <c>eu-west-2</c>, and the key in <c>us-east-1</c> becomes a replica key. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-update">Updating
            the primary Region</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            This operation supports <i>multi-Region keys</i>, an KMS feature that lets you create
            multiple interoperable KMS keys in different Amazon Web Services Regions. Because
            these KMS keys have the same key ID, key material, and other metadata, you can use
            them interchangeably to encrypt data in one Amazon Web Services Region and decrypt
            it in a different Amazon Web Services Region without re-encrypting the data or making
            a cross-Region call. For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The <i>primary key</i> of a multi-Region key is the source for properties that are
            always shared by primary and replica keys, including the key material, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id">key
            ID</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-spec">key
            spec</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-usage">key
            usage</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-origin">key
            material origin</a>, and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            key rotation</a>. It's the only key that can be replicated. You cannot <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html">delete
            the primary key</a> until all replica keys are deleted.
            </para>
             
            <para>
            The key ID and primary Region that you specify uniquely identify the replica key that
            will become the primary key. The primary Region must already have a replica key. This
            operation does not create a KMS key in the specified Region. To find the replica keys,
            use the <a>DescribeKey</a> operation on the primary key or any replica key. To create
            a replica key, use the <a>ReplicateKey</a> operation.
            </para>
             
            <para>
            You can run this operation while using the affected multi-Region keys in cryptographic
            operations. This operation should not delay, interrupt, or cause failures in cryptographic
            operations. 
            </para>
             
            <para>
            Even after this operation completes, the process of updating the primary Region might
            still be in progress for a few more seconds. Operations such as <c>DescribeKey</c>
            might display both the old and new primary keys as replicas. The old and new primary
            keys have a transient key state of <c>Updating</c>. The original key state is restored
            when the update is complete. While the key state is <c>Updating</c>, you can use the
            keys in cryptographic operations, but you cannot replicate the new primary key or
            perform certain management operations, such as enabling or disabling these keys. For
            details about the <c>Updating</c> key state, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            This operation does not return any output. To verify that primary key is changed,
            use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot use this operation in a different Amazon
            Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: 
            </para>
             <ul> <li> 
            <para>
             <c>kms:UpdatePrimaryRegion</c> on the current primary key (in the primary key's Region).
            Include this permission primary key's key policy.
            </para>
             </li> <li> 
            <para>
             <c>kms:UpdatePrimaryRegion</c> on the current replica key (in the replica key's Region).
            Include this permission in the replica key's key policy.
            </para>
             </li> </ul> 
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReplicateKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdatePrimaryRegion service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdatePrimaryRegion service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidArnException">
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/UpdatePrimaryRegion">REST API Reference for UpdatePrimaryRegion Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.VerifyAsync(Amazon.KeyManagementService.Model.VerifyRequest,System.Threading.CancellationToken)">
            <summary>
            Verifies a digital signature that was generated by the <a>Sign</a> operation. 
            
              
            <para>
            Verification confirms that an authorized user signed the message with the specified
            KMS key and signing algorithm, and the message hasn't changed since it was signed.
            If the signature is verified, the value of the <c>SignatureValid</c> field in the
            response is <c>True</c>. If the signature verification fails, the <c>Verify</c> operation
            fails with an <c>KMSInvalidSignatureException</c> exception.
            </para>
             
            <para>
            A digital signature is generated by using the private key in an asymmetric KMS key.
            The signature is verified by using the public key in the same asymmetric KMS key.
            For information about asymmetric KMS keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            To use the <c>Verify</c> operation, specify the same asymmetric KMS key, message,
            and signing algorithm that were used to produce the signature. The message type does
            not need to be the same as the one used for signing, but it must indicate whether
            the value of the <c>Message</c> parameter should be hashed as part of the verification
            process.
            </para>
             
            <para>
            You can also verify the digital signature by using the public key of the KMS key outside
            of KMS. Use the <a>GetPublicKey</a> operation to download the public key in the asymmetric
            KMS key and then use the public key to verify the signature outside of KMS. The advantage
            of using the <c>Verify</c> operation is that it is performed within KMS. As a result,
            it's easy to call, the operation is performed within the FIPS boundary, it is logged
            in CloudTrail, and you can use key policy and IAM policy to determine who is authorized
            to use the KMS key to verify signatures.
            </para>
             
            <para>
            To verify a signature outside of KMS with an SM2 public key (China Regions only),
            you must specify the distinguishing ID. By default, KMS uses <c>1234567812345678</c>
            as the distinguishing ID. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-sm-offline-verification">Offline
            verification with SM2 key pairs</a>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:Verify</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>Sign</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the Verify service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the Verify service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            The system timed out while trying to fulfill the request. You can retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidSignatureException">
            The request was rejected because the signature verification failed. Signature verification
            fails when it cannot confirm that signature was produced by signing the specified
            message with the specified KMS key and signing algorithm.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/Verify">REST API Reference for Verify Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.VerifyMacAsync(Amazon.KeyManagementService.Model.VerifyMacRequest,System.Threading.CancellationToken)">
            <summary>
            Verifies the hash-based message authentication code (HMAC) for a specified message,
            HMAC KMS key, and MAC algorithm. To verify the HMAC, <c>VerifyMac</c> computes an
            HMAC using the message, HMAC KMS key, and MAC algorithm that you specify, and compares
            the computed HMAC to the HMAC that you specify. If the HMACs are identical, the verification
            succeeds; otherwise, it fails. Verification indicates that the message hasn't changed
            since the HMAC was calculated, and the specified key was used to generate and verify
            the HMAC.
            
             
            <para>
            HMAC KMS keys and the HMAC algorithms that KMS uses conform to industry standards
            defined in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC 2104</a>.
            </para>
             
            <para>
            This operation is part of KMS support for HMAC KMS keys. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:VerifyMac</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>GenerateMac</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the VerifyMac service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the VerifyMac service method, as returned by KeyManagementService.</returns>
            <exception cref="T:Amazon.KeyManagementService.Model.DisabledException">
            The request was rejected because the specified KMS key is not enabled.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            The request was rejected because the DryRun parameter was specified.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            The request was rejected because the specified grant token is not valid.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInternalException">
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidMacException">
            The request was rejected because the HMAC verification failed. HMAC verification fails
            when the HMAC computed by using the specified message, HMAC KMS key, and MAC algorithm
            does not match the HMAC specified in the request.
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.KeyManagementService.Model.NotFoundException">
            The request was rejected because the specified entity or resource could not be found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kms-2014-11-01/VerifyMac">REST API Reference for VerifyMac Operation</seealso>
        </member>
        <member name="M:Amazon.KeyManagementService.IAmazonKeyManagementService.DetermineServiceOperationEndpoint(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Returns the endpoint that will be used for a particular request.
            </summary>
            <param name="request">Request for the desired service operation.</param>
            <returns>The resolved endpoint for the given request.</returns>
        </member>
        <member name="T:Amazon.KeyManagementService.AmazonKeyManagementServiceConfig">
            <summary>
            Configuration for accessing Amazon KeyManagementService service
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.AmazonKeyManagementServiceConfig.ServiceId">
            <summary>
             The ServiceId, which is the unique identifier for a service.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.AmazonKeyManagementServiceConfig.RegionEndpointServiceName">
            <summary>
            The constant used to lookup in the region hash the endpoint.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.AmazonKeyManagementServiceConfig.ServiceVersion">
            <summary>
            Gets the ServiceVersion property.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.AmazonKeyManagementServiceConfig.UserAgent">
            <summary>
            Gets the value of UserAgent property.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.AmazonKeyManagementServiceDefaultConfiguration">
            <summary>
            Configuration for accessing Amazon KeyManagementService service
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceDefaultConfiguration.GetAllConfigurations">
            <summary>
            Collection of all <see cref="T:Amazon.Runtime.DefaultConfiguration"/>s supported by
            KeyManagementService
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.AmazonKeyManagementServiceDefaultConfiguration.Standard">
            <summary>
            <p>The STANDARD mode provides the latest recommended default values that should be safe to run in most scenarios</p><p>Note that the default values vended from this mode might change as best practices may evolve. As a result, it is encouraged to perform tests when upgrading the SDK</p>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.AmazonKeyManagementServiceDefaultConfiguration.InRegion">
            <summary>
            <p>The IN_REGION mode builds on the standard mode and includes optimization tailored for applications which call AWS services from within the same AWS region</p><p>Note that the default values vended from this mode might change as best practices may evolve. As a result, it is encouraged to perform tests when upgrading the SDK</p>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.AmazonKeyManagementServiceDefaultConfiguration.CrossRegion">
            <summary>
            <p>The CROSS_REGION mode builds on the standard mode and includes optimization tailored for applications which call AWS services in a different region</p><p>Note that the default values vended from this mode might change as best practices may evolve. As a result, it is encouraged to perform tests when upgrading the SDK</p>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.AmazonKeyManagementServiceDefaultConfiguration.Mobile">
            <summary>
            <p>The MOBILE mode builds on the standard mode and includes optimization tailored for mobile applications</p><p>Note that the default values vended from this mode might change as best practices may evolve. As a result, it is encouraged to perform tests when upgrading the SDK</p>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.AmazonKeyManagementServiceDefaultConfiguration.Auto">
            <summary>
            <p>The AUTO mode is an experimental mode that builds on the standard mode. The SDK will attempt to discover the execution environment to determine the appropriate settings automatically.</p><p>Note that the auto detection is heuristics-based and does not guarantee 100% accuracy. STANDARD mode will be used if the execution environment cannot be determined. The auto detection might query <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">EC2 Instance Metadata service</a>, which might introduce latency. Therefore we recommend choosing an explicit defaults_mode instead if startup latency is critical to your application</p>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.AmazonKeyManagementServiceDefaultConfiguration.Legacy">
            <summary>
            <p>The LEGACY mode provides default settings that vary per SDK and were used prior to establishment of defaults_mode</p>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Endpoints.KeyManagementServiceEndpointParameters">
            <summary>
            Contains parameters used for resolving KeyManagementService endpoints
            Parameters can be sourced from client config and service operations
            Used by internal KeyManagementServiceEndpointProvider and KeyManagementServiceEndpointResolver
            Can be used by custom EndpointProvider, see ClientConfig.EndpointProvider
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Endpoints.KeyManagementServiceEndpointParameters.#ctor">
            <summary>
            KeyManagementServiceEndpointParameters constructor
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Endpoints.KeyManagementServiceEndpointParameters.Region">
            <summary>
            Region parameter
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Endpoints.KeyManagementServiceEndpointParameters.UseDualStack">
            <summary>
            UseDualStack parameter
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Endpoints.KeyManagementServiceEndpointParameters.UseFIPS">
            <summary>
            UseFIPS parameter
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Endpoints.KeyManagementServiceEndpointParameters.Endpoint">
            <summary>
            Endpoint parameter
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.AmazonKeyManagementServiceException">
            <summary>
             Common exception for the KeyManagementService service.
             </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceException.#ctor(System.String)">
            <summary>
            Construct instance of AmazonKeyManagementServiceException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AmazonKeyManagementServiceException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceException.#ctor(System.Exception)">
            <summary>
            Construct instance of AmazonKeyManagementServiceException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonKeyManagementServiceException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.AmazonKeyManagementServiceException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonKeyManagementServiceException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Internal.AmazonKeyManagementServiceEndpointProvider">
            <summary>
            Amazon KeyManagementService endpoint provider.
            Resolves endpoint for given set of KeyManagementServiceEndpointParameters.
            Can throw AmazonClientException if endpoint resolution is unsuccessful.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Internal.AmazonKeyManagementServiceEndpointProvider.ResolveEndpoint(Amazon.Runtime.Endpoints.EndpointParameters)">
            <summary>
            Resolve endpoint for KeyManagementServiceEndpointParameters
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Internal.AmazonKeyManagementServiceEndpointResolver">
            <summary>
            Amazon KeyManagementService endpoint resolver.
            Custom PipelineHandler responsible for resolving endpoint and setting authentication parameters for KeyManagementService service requests.
            Collects values for KeyManagementServiceEndpointParameters and then tries to resolve endpoint by calling 
            ResolveEndpoint method on GlobalEndpoints.Provider if present, otherwise uses KeyManagementServiceEndpointProvider.
            Responsible for setting authentication and http headers provided by resolved endpoint.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Internal.AmazonKeyManagementServiceMetadata">
            <summary>
            Service metadata for  Amazon KeyManagementService service
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Internal.AmazonKeyManagementServiceMetadata.ServiceId">
            <summary>
            Gets the value of the Service Id.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Internal.AmazonKeyManagementServiceMetadata.OperationNameMapping">
            <summary>
            Gets the dictionary that gives mapping of renamed operations
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.AliasListEntry">
            <summary>
            Contains information about an alias.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.AliasListEntry.AliasArn">
            <summary>
            Gets and sets the property AliasArn. 
            <para>
            String that contains the key ARN.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.AliasListEntry.AliasName">
            <summary>
            Gets and sets the property AliasName. 
            <para>
            String that contains the alias. This value begins with <c>alias/</c>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.AliasListEntry.CreationDate">
            <summary>
            Gets and sets the property CreationDate. 
            <para>
            Date and time that the alias was most recently created in the account and Region.
            Formatted as Unix time.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.AliasListEntry.LastUpdatedDate">
            <summary>
            Gets and sets the property LastUpdatedDate. 
            <para>
            Date and time that the alias was most recently associated with a KMS key in the account
            and Region. Formatted as Unix time.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.AliasListEntry.TargetKeyId">
            <summary>
            Gets and sets the property TargetKeyId. 
            <para>
            String that contains the key identifier of the KMS key associated with the alias.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.AlreadyExistsException">
            <summary>
            The request was rejected because it attempted to create a resource that already exists.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.AlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new AlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.AlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.AlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of AlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.AlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.AlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CancelKeyDeletionRequest">
            <summary>
            Container for the parameters to the CancelKeyDeletion operation.
            Cancels the deletion of a KMS key. When this operation succeeds, the key state of
            the KMS key is <c>Disabled</c>. To enable the KMS key, use <a>EnableKey</a>. 
            
             
            <para>
            For more information about scheduling and canceling deletion of a KMS key, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html">Deleting
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CancelKeyDeletion</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>ScheduleKeyDeletion</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CancelKeyDeletionRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the KMS key whose deletion is being canceled.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CancelKeyDeletionResponse">
            <summary>
            This is the response object from the CancelKeyDeletion operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CancelKeyDeletionResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the KMS key whose deletion is canceled.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CloudHsmClusterInUseException">
            <summary>
            The request was rejected because the specified CloudHSM cluster is already associated
            with an CloudHSM key store in the account, or it shares a backup history with an CloudHSM
            key store in the account. Each CloudHSM key store in the account must be associated
            with a different CloudHSM cluster.
            
             
            <para>
            CloudHSM clusters that share a backup history have the same cluster certificate. To
            view the cluster certificate of an CloudHSM cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a>
            operation.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterInUseException.#ctor(System.String)">
            <summary>
            Constructs a new CloudHsmClusterInUseException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of CloudHsmClusterInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterInUseException.#ctor(System.Exception)">
            <summary>
            Construct instance of CloudHsmClusterInUseException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterInUseException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CloudHsmClusterInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterInUseException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CloudHsmClusterInUseException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException">
            <summary>
            The request was rejected because the associated CloudHSM cluster did not meet the
            configuration requirements for an CloudHSM key store.
            
             <ul> <li> 
            <para>
            The CloudHSM cluster must be configured with private subnets in at least two different
            Availability Zones in the Region.
            </para>
             </li> <li> 
            <para>
            The <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">security
            group for the cluster</a> (cloudhsm-cluster-<i>&lt;cluster-id&gt;</i>-sg) must include
            inbound rules and outbound rules that allow TCP traffic on ports 2223-2225. The <b>Source</b>
            in the inbound rules and the <b>Destination</b> in the outbound rules must match the
            security group ID. These rules are set by default when you create the CloudHSM cluster.
            Do not delete or change them. To get information about a particular security group,
            use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html">DescribeSecurityGroups</a>
            operation.
            </para>
             </li> <li> 
            <para>
            The CloudHSM cluster must contain at least as many HSMs as the operation requires.
            To add HSMs, use the CloudHSM <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html">CreateHsm</a>
            operation.
            </para>
             
            <para>
            For the <a>CreateCustomKeyStore</a>, <a>UpdateCustomKeyStore</a>, and <a>CreateKey</a>
            operations, the CloudHSM cluster must have at least two active HSMs, each in a different
            Availability Zone. For the <a>ConnectCustomKeyStore</a> operation, the CloudHSM must
            contain at least one active HSM.
            </para>
             </li> </ul> 
            <para>
            For information about the requirements for an CloudHSM cluster that is associated
            with an CloudHSM key store, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">Assemble
            the Prerequisites</a> in the <i>Key Management Service Developer Guide</i>. For information
            about creating a private subnet for an CloudHSM cluster, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/create-subnets.html">Create
            a Private Subnet</a> in the <i>CloudHSM User Guide</i>. For information about cluster
            security groups, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/configure-sg.html">Configure
            a Default Security Group</a> in the <i> <i>CloudHSM User Guide</i> </i>. 
            </para>
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException.#ctor(System.String)">
            <summary>
            Constructs a new CloudHsmClusterInvalidConfigurationException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of CloudHsmClusterInvalidConfigurationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException.#ctor(System.Exception)">
            <summary>
            Construct instance of CloudHsmClusterInvalidConfigurationException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CloudHsmClusterInvalidConfigurationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterInvalidConfigurationException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CloudHsmClusterInvalidConfigurationException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException">
            <summary>
            The request was rejected because the CloudHSM cluster associated with the CloudHSM
            key store is not active. Initialize and activate the cluster and try the command again.
            For detailed instructions, see <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/getting-started.html">Getting
            Started</a> in the <i>CloudHSM User Guide</i>.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException.#ctor(System.String)">
            <summary>
            Constructs a new CloudHsmClusterNotActiveException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of CloudHsmClusterNotActiveException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException.#ctor(System.Exception)">
            <summary>
            Construct instance of CloudHsmClusterNotActiveException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CloudHsmClusterNotActiveException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotActiveException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CloudHsmClusterNotActiveException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotFoundException">
            <summary>
            The request was rejected because KMS cannot find the CloudHSM cluster with the specified
            cluster ID. Retry the request with a different cluster ID.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new CloudHsmClusterNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of CloudHsmClusterNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of CloudHsmClusterNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CloudHsmClusterNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CloudHsmClusterNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CloudHsmClusterNotRelatedException">
            <summary>
            The request was rejected because the specified CloudHSM cluster has a different cluster
            certificate than the original cluster. You cannot use the operation to specify an
            unrelated cluster for an CloudHSM key store.
            
             
            <para>
            Specify an CloudHSM cluster that shares a backup history with the original cluster.
            This includes clusters that were created from a backup of the current cluster, and
            clusters that were created from the same backup that produced the current cluster.
            </para>
             
            <para>
            CloudHSM clusters that share a backup history have the same cluster certificate. To
            view the cluster certificate of an CloudHSM cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a>
            operation.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotRelatedException.#ctor(System.String)">
            <summary>
            Constructs a new CloudHsmClusterNotRelatedException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotRelatedException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of CloudHsmClusterNotRelatedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotRelatedException.#ctor(System.Exception)">
            <summary>
            Construct instance of CloudHsmClusterNotRelatedException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotRelatedException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CloudHsmClusterNotRelatedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CloudHsmClusterNotRelatedException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CloudHsmClusterNotRelatedException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ConflictException">
            <summary>
            The request was rejected because an automatic rotation of this key is currently in
            progress or scheduled to begin within the next 20 minutes.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.ConflictException.#ctor(System.String)">
            <summary>
            Constructs a new ConflictException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.ConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ConflictException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.ConflictException.#ctor(System.Exception)">
            <summary>
            Construct instance of ConflictException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.ConflictException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ConflictException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.ConflictException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ConflictException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ConnectCustomKeyStoreRequest">
            <summary>
            Container for the parameters to the ConnectCustomKeyStore operation.
            Connects or reconnects a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> to its backing key store. For an CloudHSM key store, <c>ConnectCustomKeyStore</c>
            connects the key store to its associated CloudHSM cluster. For an external key store,
            <c>ConnectCustomKeyStore</c> connects the key store to the external key store proxy
            that communicates with your external key manager.
            
             
            <para>
            The custom key store must be connected before you can create KMS keys in the key store
            or use the KMS keys it contains. You can disconnect and reconnect a custom key store
            at any time.
            </para>
             
            <para>
            The connection process for a custom key store can take an extended amount of time
            to complete. This operation starts the connection process, but it does not wait for
            it to complete. When it succeeds, this operation quickly returns an HTTP 200 response
            and a JSON object with no properties. However, this response does not indicate that
            the custom key store is connected. To get the connection state of the custom key store,
            use the <a>DescribeCustomKeyStores</a> operation.
            </para>
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            The <c>ConnectCustomKeyStore</c> operation might fail for various reasons. To find
            the reason, use the <a>DescribeCustomKeyStores</a> operation and see the <c>ConnectionErrorCode</c>
            in the response. For help interpreting the <c>ConnectionErrorCode</c>, see <a>CustomKeyStoresListEntry</a>.
            </para>
             
            <para>
            To fix the failure, use the <a>DisconnectCustomKeyStore</a> operation to disconnect
            the custom key store, correct the error, use the <a>UpdateCustomKeyStore</a> operation
            if necessary, and then use <c>ConnectCustomKeyStore</c> again.
            </para>
             
            <para>
             <b>CloudHSM key store</b> 
            </para>
             
            <para>
            During the connection process for an CloudHSM key store, KMS finds the CloudHSM cluster
            that is associated with the custom key store, creates the connection infrastructure,
            connects to the cluster, logs into the CloudHSM client as the <c>kmsuser</c> CU, and
            rotates its password.
            </para>
             
            <para>
            To connect an CloudHSM key store, its associated CloudHSM cluster must have at least
            one active HSM. To get the number of active HSMs in a cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a>
            operation. To add HSMs to the cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm.html">CreateHsm</a>
            operation. Also, the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser">
            <c>kmsuser</c> crypto user</a> (CU) must not be logged into the cluster. This prevents
            KMS from using this account to log in.
            </para>
             
            <para>
            If you are having trouble connecting or disconnecting a CloudHSM key store, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            an CloudHSM key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>External key store</b> 
            </para>
             
            <para>
            When you connect an external key store that uses public endpoint connectivity, KMS
            tests its ability to communicate with your external key manager by sending a request
            via the external key store proxy.
            </para>
             
            <para>
            When you connect to an external key store that uses VPC endpoint service connectivity,
            KMS establishes the networking elements that it needs to communicate with your external
            key manager via the external key store proxy. This includes creating an interface
            endpoint to the VPC endpoint service and a private hosted zone for traffic between
            KMS and the VPC endpoint service.
            </para>
             
            <para>
            To connect an external key store, KMS must be able to connect to the external key
            store proxy, the external key store proxy must be able to communicate with your external
            key manager, and the external key manager must be available for cryptographic operations.
            </para>
             
            <para>
            If you are having trouble connecting or disconnecting an external key store, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/xks-troubleshooting.html">Troubleshooting
            an external key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ConnectCustomKeyStore</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ConnectCustomKeyStoreRequest.CustomKeyStoreId">
            <summary>
            Gets and sets the property CustomKeyStoreId. 
            <para>
            Enter the key store ID of the custom key store that you want to connect. To find the
            ID of a custom key store, use the <a>DescribeCustomKeyStores</a> operation.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ConnectCustomKeyStoreResponse">
            <summary>
            This is the response object from the ConnectCustomKeyStore operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CreateAliasRequest">
            <summary>
            Container for the parameters to the CreateAlias operation.
            Creates a friendly name for a KMS key. 
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            You can use an alias to identify a KMS key in the KMS console, in the <a>DescribeKey</a>
            operation and in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>, such as <a>Encrypt</a> and <a>GenerateDataKey</a>. You can also change
            the KMS key that's associated with the alias (<a>UpdateAlias</a>) or delete the alias
            (<a>DeleteAlias</a>) at any time. These operations don't affect the underlying KMS
            key. 
            </para>
             
            <para>
            You can associate the alias with any customer managed key in the same Amazon Web Services
            Region. Each alias is associated with only one KMS key at a time, but a KMS key can
            have multiple aliases. A valid KMS key is required. You can't create an alias without
            a KMS key.
            </para>
             
            <para>
            The alias must be unique in the account and Region, but you can have aliases with
            the same name in different Regions. For detailed information about aliases, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html">Using
            aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            This operation does not return a response. To get the alias that you created, use
            the <a>ListAliases</a> operation.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on an alias in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateAlias</a>
            on the KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateAliasRequest.AliasName">
            <summary>
            Gets and sets the property AliasName. 
            <para>
            Specifies the alias name. This value must begin with <c>alias/</c> followed by a name,
            such as <c>alias/ExampleAlias</c>. 
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            The <c>AliasName</c> value must be string of 1-256 characters. It can contain only
            alphanumeric characters, forward slashes (/), underscores (_), and dashes (-). The
            alias name cannot begin with <c>alias/aws/</c>. The <c>alias/aws/</c> prefix is reserved
            for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed keys</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateAliasRequest.TargetKeyId">
            <summary>
            Gets and sets the property TargetKeyId. 
            <para>
            Associates the alias with the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a>. The KMS key must be in the same Amazon Web Services Region. 
            </para>
             
            <para>
            A valid key ID is required. If you supply a null or empty string value, this operation
            returns an error.
            </para>
             
            <para>
            For help finding the key ID and ARN, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn">Finding
            the Key ID and ARN</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CreateAliasResponse">
            <summary>
            This is the response object from the CreateAlias operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest">
            <summary>
            Container for the parameters to the CreateCustomKeyStore operation.
            Creates a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> backed by a key store that you own and manage. When you use a KMS key
            in a custom key store for a cryptographic operation, the cryptographic operation is
            actually performed in your key store using your keys. KMS supports <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key stores</a> backed by an <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/clusters.html">CloudHSM
            cluster</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key stores</a> backed by an external key store proxy and external key manager outside
            of Amazon Web Services.
            
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            Before you create the custom key store, the required elements must be in place and
            operational. We recommend that you use the test tools that KMS provides to verify
            the configuration your external key store proxy. For details about the required elements
            and verification tests, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">Assemble
            the prerequisites (for CloudHSM key stores)</a> or <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-xks-keystore.html#xks-requirements">Assemble
            the prerequisites (for external key stores)</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            To create a custom key store, use the following parameters.
            </para>
             <ul> <li> 
            <para>
            To create an CloudHSM key store, specify the <c>CustomKeyStoreName</c>, <c>CloudHsmClusterId</c>,
            <c>KeyStorePassword</c>, and <c>TrustAnchorCertificate</c>. The <c>CustomKeyStoreType</c>
            parameter is optional for CloudHSM key stores. If you include it, set it to the default
            value, <c>AWS_CLOUDHSM</c>. For help with failures, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            an CloudHSM key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
            To create an external key store, specify the <c>CustomKeyStoreName</c> and a <c>CustomKeyStoreType</c>
            of <c>EXTERNAL_KEY_STORE</c>. Also, specify values for <c>XksProxyConnectivity</c>,
            <c>XksProxyAuthenticationCredential</c>, <c>XksProxyUriEndpoint</c>, and <c>XksProxyUriPath</c>.
            If your <c>XksProxyConnectivity</c> value is <c>VPC_ENDPOINT_SERVICE</c>, specify
            the <c>XksProxyVpcEndpointServiceName</c> parameter. For help with failures, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/xks-troubleshooting.html">Troubleshooting
            an external key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> </ul> <note> 
            <para>
            For external key stores:
            </para>
             
            <para>
            Some external key managers provide a simpler method for creating an external key store.
            For details, see your external key manager documentation.
            </para>
             
            <para>
            When creating an external key store in the KMS console, you can upload a JSON-based
            proxy configuration file with the desired values. You cannot use a proxy configuration
            with the <c>CreateCustomKeyStore</c> operation. However, you can use the values in
            the file to help you determine the correct values for the <c>CreateCustomKeyStore</c>
            parameters.
            </para>
             </note> 
            <para>
            When the operation completes successfully, it returns the ID of the new custom key
            store. Before you can use your new custom key store, you need to use the <a>ConnectCustomKeyStore</a>
            operation to connect a new CloudHSM key store to its CloudHSM cluster, or to connect
            a new external key store to the external key store proxy for your external key manager.
            Even if you are not going to use your custom key store immediately, you might want
            to connect it to verify that all settings are correct and then disconnect it until
            you are ready to use it.
            </para>
             
            <para>
            For help with failures, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            a custom key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateCustomKeyStore</a>
            (IAM policy).
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest.CloudHsmClusterId">
            <summary>
            Gets and sets the property CloudHsmClusterId. 
            <para>
            Identifies the CloudHSM cluster for an CloudHSM key store. This parameter is required
            for custom key stores with <c>CustomKeyStoreType</c> of <c>AWS_CLOUDHSM</c>.
            </para>
             
            <para>
            Enter the cluster ID of any active CloudHSM cluster that is not already associated
            with a custom key store. To find the cluster ID, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a>
            operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest.CustomKeyStoreName">
            <summary>
            Gets and sets the property CustomKeyStoreName. 
            <para>
            Specifies a friendly name for the custom key store. The name must be unique in your
            Amazon Web Services account and Region. This parameter is required for all custom
            key stores.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest.CustomKeyStoreType">
            <summary>
            Gets and sets the property CustomKeyStoreType. 
            <para>
            Specifies the type of custom key store. The default value is <c>AWS_CLOUDHSM</c>.
            </para>
             
            <para>
            For a custom key store backed by an CloudHSM cluster, omit the parameter or enter
            <c>AWS_CLOUDHSM</c>. For a custom key store backed by an external key manager outside
            of Amazon Web Services, enter <c>EXTERNAL_KEY_STORE</c>. You cannot change this property
            after the key store is created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest.KeyStorePassword">
            <summary>
            Gets and sets the property KeyStorePassword. 
            <para>
            Specifies the <c>kmsuser</c> password for an CloudHSM key store. This parameter is
            required for custom key stores with a <c>CustomKeyStoreType</c> of <c>AWS_CLOUDHSM</c>.
            </para>
             
            <para>
            Enter the password of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser">
            <c>kmsuser</c> crypto user (CU) account</a> in the specified CloudHSM cluster. KMS
            logs into the cluster as this user to manage key material on your behalf.
            </para>
             
            <para>
            The password must be a string of 7 to 32 characters. Its value is case sensitive.
            </para>
             
            <para>
            This parameter tells KMS the <c>kmsuser</c> account password; it does not change the
            password in the CloudHSM cluster.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest.TrustAnchorCertificate">
            <summary>
            Gets and sets the property TrustAnchorCertificate. 
            <para>
            Specifies the certificate for an CloudHSM key store. This parameter is required for
            custom key stores with a <c>CustomKeyStoreType</c> of <c>AWS_CLOUDHSM</c>.
            </para>
             
            <para>
            Enter the content of the trust anchor certificate for the CloudHSM cluster. This is
            the content of the <c>customerCA.crt</c> file that you created when you <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html">initialized
            the cluster</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest.XksProxyAuthenticationCredential">
            <summary>
            Gets and sets the property XksProxyAuthenticationCredential. 
            <para>
            Specifies an authentication credential for the external key store proxy (XKS proxy).
            This parameter is required for all custom key stores with a <c>CustomKeyStoreType</c>
            of <c>EXTERNAL_KEY_STORE</c>.
            </para>
             
            <para>
            The <c>XksProxyAuthenticationCredential</c> has two required elements: <c>RawSecretAccessKey</c>,
            a secret key, and <c>AccessKeyId</c>, a unique identifier for the <c>RawSecretAccessKey</c>.
            For character requirements, see <a href="kms/latest/APIReference/API_XksProxyAuthenticationCredentialType.html">XksProxyAuthenticationCredentialType</a>.
            </para>
             
            <para>
            KMS uses this authentication credential to sign requests to the external key store
            proxy on your behalf. This credential is unrelated to Identity and Access Management
            (IAM) and Amazon Web Services credentials.
            </para>
             
            <para>
            This parameter doesn't set or change the authentication credentials on the XKS proxy.
            It just tells KMS the credential that you established on your external key store proxy.
            If you rotate your proxy authentication credential, use the <a>UpdateCustomKeyStore</a>
            operation to provide the new credential to KMS.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest.XksProxyConnectivity">
            <summary>
            Gets and sets the property XksProxyConnectivity. 
            <para>
            Indicates how KMS communicates with the external key store proxy. This parameter is
            required for custom key stores with a <c>CustomKeyStoreType</c> of <c>EXTERNAL_KEY_STORE</c>.
            </para>
             
            <para>
            If the external key store proxy uses a public endpoint, specify <c>PUBLIC_ENDPOINT</c>.
            If the external key store proxy uses a Amazon VPC endpoint service for communication
            with KMS, specify <c>VPC_ENDPOINT_SERVICE</c>. For help making this choice, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/plan-xks-keystore.html#choose-xks-connectivity">Choosing
            a connectivity option</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            An Amazon VPC endpoint service keeps your communication with KMS in a private address
            space entirely within Amazon Web Services, but it requires more configuration, including
            establishing a Amazon VPC with multiple subnets, a VPC endpoint service, a network
            load balancer, and a verified private DNS name. A public endpoint is simpler to set
            up, but it might be slower and might not fulfill your security requirements. You might
            consider testing with a public endpoint, and then establishing a VPC endpoint service
            for production tasks. Note that this choice does not determine the location of the
            external key store proxy. Even if you choose a VPC endpoint service, the proxy can
            be hosted within the VPC or outside of Amazon Web Services such as in your corporate
            data center.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest.XksProxyUriEndpoint">
            <summary>
            Gets and sets the property XksProxyUriEndpoint. 
            <para>
            Specifies the endpoint that KMS uses to send requests to the external key store proxy
            (XKS proxy). This parameter is required for custom key stores with a <c>CustomKeyStoreType</c>
            of <c>EXTERNAL_KEY_STORE</c>.
            </para>
             
            <para>
            The protocol must be HTTPS. KMS communicates on port 443. Do not specify the port
            in the <c>XksProxyUriEndpoint</c> value.
            </para>
             
            <para>
            For external key stores with <c>XksProxyConnectivity</c> value of <c>VPC_ENDPOINT_SERVICE</c>,
            specify <c>https://</c> followed by the private DNS name of the VPC endpoint service.
            </para>
             
            <para>
            For external key stores with <c>PUBLIC_ENDPOINT</c> connectivity, this endpoint must
            be reachable before you create the custom key store. KMS connects to the external
            key store proxy while creating the custom key store. For external key stores with
            <c>VPC_ENDPOINT_SERVICE</c> connectivity, KMS connects when you call the <a>ConnectCustomKeyStore</a>
            operation.
            </para>
             
            <para>
            The value of this parameter must begin with <c>https://</c>. The remainder can contain
            upper and lower case letters (A-Z and a-z), numbers (0-9), dots (<c>.</c>), and hyphens
            (<c>-</c>). Additional slashes (<c>/</c> and <c>\</c>) are not permitted.
            </para>
             
            <para>
             <b>Uniqueness requirements: </b> 
            </para>
             <ul> <li> 
            <para>
            The combined <c>XksProxyUriEndpoint</c> and <c>XksProxyUriPath</c> values must be
            unique in the Amazon Web Services account and Region.
            </para>
             </li> <li> 
            <para>
            An external key store with <c>PUBLIC_ENDPOINT</c> connectivity cannot use the same
            <c>XksProxyUriEndpoint</c> value as an external key store with <c>VPC_ENDPOINT_SERVICE</c>
            connectivity in this Amazon Web Services Region.
            </para>
             </li> <li> 
            <para>
            Each external key store with <c>VPC_ENDPOINT_SERVICE</c> connectivity must have its
            own private DNS name. The <c>XksProxyUriEndpoint</c> value for external key stores
            with <c>VPC_ENDPOINT_SERVICE</c> connectivity (private DNS name) must be unique in
            the Amazon Web Services account and Region.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest.XksProxyUriPath">
            <summary>
            Gets and sets the property XksProxyUriPath. 
            <para>
            Specifies the base path to the proxy APIs for this external key store. To find this
            value, see the documentation for your external key store proxy. This parameter is
            required for all custom key stores with a <c>CustomKeyStoreType</c> of <c>EXTERNAL_KEY_STORE</c>.
            </para>
             
            <para>
            The value must start with <c>/</c> and must end with <c>/kms/xks/v1</c> where <c>v1</c>
            represents the version of the KMS external key store proxy API. This path can include
            an optional prefix between the required elements such as <c>/<i>prefix</i>/kms/xks/v1</c>.
            </para>
             
            <para>
             <b>Uniqueness requirements: </b> 
            </para>
             <ul> <li> 
            <para>
            The combined <c>XksProxyUriEndpoint</c> and <c>XksProxyUriPath</c> values must be
            unique in the Amazon Web Services account and Region.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest.XksProxyVpcEndpointServiceName">
            <summary>
            Gets and sets the property XksProxyVpcEndpointServiceName. 
            <para>
            Specifies the name of the Amazon VPC endpoint service for interface endpoints that
            is used to communicate with your external key store proxy (XKS proxy). This parameter
            is required when the value of <c>CustomKeyStoreType</c> is <c>EXTERNAL_KEY_STORE</c>
            and the value of <c>XksProxyConnectivity</c> is <c>VPC_ENDPOINT_SERVICE</c>.
            </para>
             
            <para>
            The Amazon VPC endpoint service must <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-xks-keystore.html#xks-requirements">fulfill
            all requirements</a> for use with an external key store. 
            </para>
             
            <para>
             <b>Uniqueness requirements:</b> 
            </para>
             <ul> <li> 
            <para>
            External key stores with <c>VPC_ENDPOINT_SERVICE</c> connectivity can share an Amazon
            VPC, but each external key store must have its own VPC endpoint service and private
            DNS name.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CreateCustomKeyStoreResponse">
            <summary>
            This is the response object from the CreateCustomKeyStore operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateCustomKeyStoreResponse.CustomKeyStoreId">
            <summary>
            Gets and sets the property CustomKeyStoreId. 
            <para>
            A unique identifier for the new custom key store.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CreateGrantRequest">
            <summary>
            Container for the parameters to the CreateGrant operation.
            Adds a grant to a KMS key. 
            
             
            <para>
            A <i>grant</i> is a policy instrument that allows Amazon Web Services principals to
            use KMS keys in cryptographic operations. It also can allow them to view a KMS key
            (<a>DescribeKey</a>) and create and manage grants. When authorizing access to a KMS
            key, grants are considered along with key policies and IAM policies. Grants are often
            used for temporary permissions because you can create one, use its permissions, and
            delete it without changing your key policies or IAM policies. 
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
            The <c>CreateGrant</c> operation returns a <c>GrantToken</c> and a <c>GrantId</c>.
            </para>
             <ul> <li> 
            <para>
            When you create, retire, or revoke a grant, there might be a brief delay, usually
            less than five minutes, until the grant is available throughout KMS. This state is
            known as <i>eventual consistency</i>. Once the grant has achieved eventual consistency,
            the grantee principal can use the permissions in the grant without identifying the
            grant. 
            </para>
             
            <para>
            However, to use the permissions in the grant immediately, use the <c>GrantToken</c>
            that <c>CreateGrant</c> returns. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            The <c>CreateGrant</c> operation also returns a <c>GrantId</c>. You can use the <c>GrantId</c>
            and a key identifier to identify the grant in the <a>RetireGrant</a> and <a>RevokeGrant</a>
            operations. To find the grant ID, use the <a>ListGrants</a> or <a>ListRetirableGrants</a>
            operations.
            </para>
             </li> </ul> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateGrant</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateGrantRequest.Constraints">
            <summary>
            Gets and sets the property Constraints. 
            <para>
            Specifies a grant constraint.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            KMS supports the <c>EncryptionContextEquals</c> and <c>EncryptionContextSubset</c>
            grant constraints, which allow the permissions in the grant only when the encryption
            context in the request matches (<c>EncryptionContextEquals</c>) or includes (<c>EncryptionContextSubset</c>)
            the encryption context specified in the constraint. 
            </para>
             
            <para>
            The encryption context grant constraints are supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-grant-operations">grant
            operations</a> that include an <c>EncryptionContext</c> parameter, such as cryptographic
            operations on symmetric encryption KMS keys. Grants with grant constraints can include
            the <a>DescribeKey</a> and <a>RetireGrant</a> operations, but the constraint doesn't
            apply to these operations. If a grant with a grant constraint includes the <c>CreateGrant</c>
            operation, the constraint requires that any grants created with the <c>CreateGrant</c>
            permission have an equally strict or stricter encryption context constraint.
            </para>
             
            <para>
            You cannot use an encryption context grant constraint for cryptographic operations
            with asymmetric KMS keys or HMAC KMS keys. Operations with these keys don't support
            an encryption context.
            </para>
             
            <para>
            Each constraint value can include up to 8 encryption context pairs. The encryption
            context value in each constraint cannot exceed 384 characters. For information about
            grant constraints, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-grant-overview.html#grant-constraints">Using
            grant constraints</a> in the <i>Key Management Service Developer Guide</i>. For more
            information about encryption context, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            context</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateGrantRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateGrantRequest.GranteePrincipal">
            <summary>
            Gets and sets the property GranteePrincipal. 
            <para>
            The identity that gets the permissions specified in the grant.
            </para>
             
            <para>
            To specify the grantee principal, use the Amazon Resource Name (ARN) of an Amazon
            Web Services principal. Valid principals include Amazon Web Services accounts, IAM
            users, IAM roles, federated users, and assumed role users. For help with the ARN syntax
            for a principal, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns">IAM
            ARNs</a> in the <i> <i>Identity and Access Management User Guide</i> </i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateGrantRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens. 
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateGrantRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the KMS key for the grant. The grant gives principals permission to use
            this KMS key.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateGrantRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            A friendly name for the grant. Use this value to prevent the unintended creation of
            duplicate grants when retrying this request.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            When this value is absent, all <c>CreateGrant</c> requests result in a new grant with
            a unique <c>GrantId</c> even if all the supplied parameters are identical. This can
            result in unintended duplicates when you retry the <c>CreateGrant</c> request.
            </para>
             
            <para>
            When this value is present, you can retry a <c>CreateGrant</c> request with identical
            parameters; if the grant already exists, the original <c>GrantId</c> is returned without
            creating a new grant. Note that the returned grant token is unique with every <c>CreateGrant</c>
            request, even when a duplicate <c>GrantId</c> is returned. All grant tokens for the
            same grant ID can be used interchangeably.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateGrantRequest.Operations">
            <summary>
            Gets and sets the property Operations. 
            <para>
            A list of operations that the grant permits. 
            </para>
             
            <para>
            This list must include only operations that are permitted in a grant. Also, the operation
            must be supported on the KMS key. For example, you cannot create a grant for a symmetric
            encryption KMS key that allows the <a>Sign</a> operation, or a grant for an asymmetric
            KMS key that allows the <a>GenerateDataKey</a> operation. If you try, KMS returns
            a <c>ValidationError</c> exception. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-grant-operations">Grant
            operations</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateGrantRequest.RetiringPrincipal">
            <summary>
            Gets and sets the property RetiringPrincipal. 
            <para>
            The principal that has permission to use the <a>RetireGrant</a> operation to retire
            the grant. 
            </para>
             
            <para>
            To specify the principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Name (ARN)</a> of an Amazon Web Services principal. Valid principals include
            Amazon Web Services accounts, IAM users, IAM roles, federated users, and assumed role
            users. For help with the ARN syntax for a principal, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns">IAM
            ARNs</a> in the <i> <i>Identity and Access Management User Guide</i> </i>.
            </para>
             
            <para>
            The grant determines the retiring principal. Other principals might have permission
            to retire the grant or revoke the grant. For details, see <a>RevokeGrant</a> and <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i>Key Management Service Developer Guide</i>. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CreateGrantResponse">
            <summary>
            This is the response object from the CreateGrant operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateGrantResponse.GrantId">
            <summary>
            Gets and sets the property GrantId. 
            <para>
            The unique identifier for the grant.
            </para>
             
            <para>
            You can use the <c>GrantId</c> in a <a>ListGrants</a>, <a>RetireGrant</a>, or <a>RevokeGrant</a>
            operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateGrantResponse.GrantToken">
            <summary>
            Gets and sets the property GrantToken. 
            <para>
            The grant token.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CreateKeyRequest">
            <summary>
            Container for the parameters to the CreateKey operation.
            Creates a unique customer managed <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#kms-keys">KMS
            key</a> in your Amazon Web Services account and Region. You can use a KMS key in cryptographic
            operations, such as encryption and signing. Some Amazon Web Services services let
            you use KMS keys that you create and manage to protect your service resources.
            
             
            <para>
            A KMS key is a logical representation of a cryptographic key. In addition to the key
            material used in cryptographic operations, a KMS key includes metadata, such as the
            key ID, key policy, creation date, description, and key state. For details, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/getting-started.html">Managing
            keys</a> in the <i>Key Management Service Developer Guide</i> 
            </para>
             
            <para>
            Use the parameters of <c>CreateKey</c> to specify the type of KMS key, the source
            of its key material, its key policy, description, tags, and other properties.
            </para>
             <note> 
            <para>
            KMS has replaced the term <i>customer master key (CMK)</i> with <i>KMS key</i> and
            <i>KMS key</i>. The concept has not changed. To prevent breaking changes, KMS is keeping
            some variations of this term.
            </para>
             </note> 
            <para>
            To create different types of KMS keys, use the following guidance:
            </para>
             <dl> <dt>Symmetric encryption KMS key</dt> <dd> 
            <para>
            By default, <c>CreateKey</c> creates a symmetric encryption KMS key with key material
            that KMS generates. This is the basic and most widely used type of KMS key, and provides
            the best performance.
            </para>
             
            <para>
            To create a symmetric encryption KMS key, you don't need to specify any parameters.
            The default value for <c>KeySpec</c>, <c>SYMMETRIC_DEFAULT</c>, the default value
            for <c>KeyUsage</c>, <c>ENCRYPT_DECRYPT</c>, and the default value for <c>Origin</c>,
            <c>AWS_KMS</c>, create a symmetric encryption KMS key with KMS key material.
            </para>
             
            <para>
            If you need a key for basic encryption and decryption or you are creating a KMS key
            to protect your resources in an Amazon Web Services service, create a symmetric encryption
            KMS key. The key material in a symmetric encryption key never leaves KMS unencrypted.
            You can use a symmetric encryption KMS key to encrypt and decrypt data up to 4,096
            bytes, but they are typically used to generate data keys and data keys pairs. For
            details, see <a>GenerateDataKey</a> and <a>GenerateDataKeyPair</a>.
            </para>
             
            <para>
             
            </para>
             </dd> <dt>Asymmetric KMS keys</dt> <dd> 
            <para>
            To create an asymmetric KMS key, use the <c>KeySpec</c> parameter to specify the type
            of key material in the KMS key. Then, use the <c>KeyUsage</c> parameter to determine
            whether the KMS key will be used to encrypt and decrypt or sign and verify. You can't
            change these properties after the KMS key is created.
            </para>
             
            <para>
            Asymmetric KMS keys contain an RSA key pair, Elliptic Curve (ECC) key pair, or an
            SM2 key pair (China Regions only). The private key in an asymmetric KMS key never
            leaves KMS unencrypted. However, you can use the <a>GetPublicKey</a> operation to
            download the public key so it can be used outside of KMS. KMS keys with RSA key pairs
            can be used to encrypt or decrypt data or sign and verify messages (but not both).
            KMS keys with NIST-recommended ECC key pairs can be used to sign and verify messages
            or derive key agreement secrets (but not both). KMS keys with <c>ECC_SECG_P256K1</c>
            can be used only to sign and verify messages. KMS keys with SM2 key pairs (China Regions
            only) can be used to either encrypt or decrypt data, sign and verify messages, or
            generate key agreement secrets. For information about asymmetric KMS keys, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             
            </para>
             </dd> <dt>HMAC KMS key</dt> <dd> 
            <para>
            To create an HMAC KMS key, set the <c>KeySpec</c> parameter to a key spec value for
            HMAC KMS keys. Then set the <c>KeyUsage</c> parameter to <c>GENERATE_VERIFY_MAC</c>.
            You must set the key usage even though <c>GENERATE_VERIFY_MAC</c> is the only valid
            key usage value for HMAC KMS keys. You can't change these properties after the KMS
            key is created.
            </para>
             
            <para>
            HMAC KMS keys are symmetric keys that never leave KMS unencrypted. You can use HMAC
            keys to generate (<a>GenerateMac</a>) and verify (<a>VerifyMac</a>) HMAC codes for
            messages up to 4096 bytes.
            </para>
             
            <para>
             
            </para>
             </dd> <dt>Multi-Region primary keys</dt> <dt>Imported key material</dt> <dd> 
            <para>
            To create a multi-Region <i>primary key</i> in the local Amazon Web Services Region,
            use the <c>MultiRegion</c> parameter with a value of <c>True</c>. To create a multi-Region
            <i>replica key</i>, that is, a KMS key with the same key ID and key material as a
            primary key, but in a different Amazon Web Services Region, use the <a>ReplicateKey</a>
            operation. To change a replica key to a primary key, and its primary key to a replica
            key, use the <a>UpdatePrimaryRegion</a> operation.
            </para>
             
            <para>
            You can create multi-Region KMS keys for all supported KMS key types: symmetric encryption
            KMS keys, HMAC KMS keys, asymmetric encryption KMS keys, and asymmetric signing KMS
            keys. You can also create multi-Region keys with imported key material. However, you
            can't create multi-Region keys in a custom key store.
            </para>
             
            <para>
            This operation supports <i>multi-Region keys</i>, an KMS feature that lets you create
            multiple interoperable KMS keys in different Amazon Web Services Regions. Because
            these KMS keys have the same key ID, key material, and other metadata, you can use
            them interchangeably to encrypt data in one Amazon Web Services Region and decrypt
            it in a different Amazon Web Services Region without re-encrypting the data or making
            a cross-Region call. For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             
            </para>
             </dd> <dd> 
            <para>
            To import your own key material into a KMS key, begin by creating a KMS key with no
            key material. To do this, use the <c>Origin</c> parameter of <c>CreateKey</c> with
            a value of <c>EXTERNAL</c>. Next, use <a>GetParametersForImport</a> operation to get
            a public key and import token. Use the wrapping public key to encrypt your key material.
            Then, use <a>ImportKeyMaterial</a> with your import token to import the key material.
            For step-by-step instructions, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            Key Material</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             
            <para>
            You can import key material into KMS keys of all supported KMS key types: symmetric
            encryption KMS keys, HMAC KMS keys, asymmetric encryption KMS keys, and asymmetric
            signing KMS keys. You can also create multi-Region keys with imported key material.
            However, you can't import key material into a KMS key in a custom key store.
            </para>
             
            <para>
            To create a multi-Region primary key with imported key material, use the <c>Origin</c>
            parameter of <c>CreateKey</c> with a value of <c>EXTERNAL</c> and the <c>MultiRegion</c>
            parameter with a value of <c>True</c>. To create replicas of the multi-Region primary
            key, use the <a>ReplicateKey</a> operation. For instructions, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-import.html
            ">Importing key material into multi-Region keys</a>. For more information about multi-Region
            keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             
            </para>
             </dd> <dt>Custom key store</dt> <dd> 
            <para>
            A <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> lets you protect your Amazon Web Services resources using keys in a
            backing key store that you own and manage. When you request a cryptographic operation
            with a KMS key in a custom key store, the operation is performed in the backing key
            store using its cryptographic keys.
            </para>
             
            <para>
            KMS supports <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key stores</a> backed by an CloudHSM cluster and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key stores</a> backed by an external key manager outside of Amazon Web Services. When
            you create a KMS key in an CloudHSM key store, KMS generates an encryption key in
            the CloudHSM cluster and associates it with the KMS key. When you create a KMS key
            in an external key store, you specify an existing encryption key in the external key
            manager.
            </para>
             <note> 
            <para>
            Some external key managers provide a simpler method for creating a KMS key in an external
            key store. For details, see your external key manager documentation.
            </para>
             </note> 
            <para>
            Before you create a KMS key in a custom key store, the <c>ConnectionState</c> of the
            key store must be <c>CONNECTED</c>. To connect the custom key store, use the <a>ConnectCustomKeyStore</a>
            operation. To find the <c>ConnectionState</c>, use the <a>DescribeCustomKeyStores</a>
            operation.
            </para>
             
            <para>
            To create a KMS key in a custom key store, use the <c>CustomKeyStoreId</c>. Use the
            default <c>KeySpec</c> value, <c>SYMMETRIC_DEFAULT</c>, and the default <c>KeyUsage</c>
            value, <c>ENCRYPT_DECRYPT</c> to create a symmetric encryption key. No other key type
            is supported in a custom key store.
            </para>
             
            <para>
            To create a KMS key in an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key store</a>, use the <c>Origin</c> parameter with a value of <c>AWS_CLOUDHSM</c>.
            The CloudHSM cluster that is associated with the custom key store must have at least
            two active HSMs in different Availability Zones in the Amazon Web Services Region.
            </para>
             
            <para>
            To create a KMS key in an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key store</a>, use the <c>Origin</c> parameter with a value of <c>EXTERNAL_KEY_STORE</c>
            and an <c>XksKeyId</c> parameter that identifies an existing external key.
            </para>
             <note> 
            <para>
            Some external key managers provide a simpler method for creating a KMS key in an external
            key store. For details, see your external key manager documentation.
            </para>
             </note> </dd> </dl> 
            <para>
             <b>Cross-account use</b>: No. You cannot use this operation to create a KMS key in
            a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:CreateKey</a>
            (IAM policy). To use the <c>Tags</c> parameter, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a>
            (IAM policy). For examples and information about related permissions, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/iam-policies.html#iam-policy-example-create-key">Allow
            a user to create KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DescribeKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeys</a> 
            </para>
             </li> <li> 
            <para>
             <a>ScheduleKeyDeletion</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateKeyRequest.BypassPolicyLockoutSafetyCheck">
            <summary>
            Gets and sets the property BypassPolicyLockoutSafetyCheck. 
            <para>
            Skips ("bypasses") the key policy lockout safety check. The default value is false.
            </para>
             <important> 
            <para>
            Setting this value to true increases the risk that the KMS key becomes unmanageable.
            Do not set this value to true indiscriminately.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key">Default
            key policy</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </important> 
            <para>
            Use this parameter only when you intend to prevent the principal that is making the
            request from making a subsequent <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html">PutKeyPolicy</a>
            request on the KMS key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateKeyRequest.CustomerMasterKeySpec">
            <summary>
            Gets and sets the property CustomerMasterKeySpec. 
            <para>
            Instead, use the <c>KeySpec</c> parameter.
            </para>
             
            <para>
            The <c>KeySpec</c> and <c>CustomerMasterKeySpec</c> parameters work the same way.
            Only the names differ. We recommend that you use <c>KeySpec</c> parameter in your
            code. However, to avoid breaking changes, KMS supports both parameters.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateKeyRequest.CustomKeyStoreId">
            <summary>
            Gets and sets the property CustomKeyStoreId. 
            <para>
            Creates the KMS key in the specified <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. The <c>ConnectionState</c> of the custom key store must be <c>CONNECTED</c>.
            To find the CustomKeyStoreID and ConnectionState use the <a>DescribeCustomKeyStores</a>
            operation.
            </para>
             
            <para>
            This parameter is valid only for symmetric encryption KMS keys in a single Region.
            You cannot create any other type of KMS key in a custom key store.
            </para>
             
            <para>
            When you create a KMS key in an CloudHSM key store, KMS generates a non-exportable
            256-bit symmetric key in its associated CloudHSM cluster and associates it with the
            KMS key. When you create a KMS key in an external key store, you must use the <c>XksKeyId</c>
            parameter to specify an external key that serves as key material for the KMS key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateKeyRequest.Description">
            <summary>
            Gets and sets the property Description. 
            <para>
            A description of the KMS key. Use a description that helps you decide whether the
            KMS key is appropriate for a task. The default value is an empty string (no description).
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            To set or change the description after the key is created, use <a>UpdateKeyDescription</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateKeyRequest.KeySpec">
            <summary>
            Gets and sets the property KeySpec. 
            <para>
            Specifies the type of KMS key to create. The default value, <c>SYMMETRIC_DEFAULT</c>,
            creates a KMS key with a 256-bit AES-GCM key that is used for encryption and decryption,
            except in China Regions, where it creates a 128-bit symmetric key that uses SM4 encryption.
            For help choosing a key spec for your KMS key, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-types.html#symm-asymm-choose">Choosing
            a KMS key type</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             
            <para>
            The <c>KeySpec</c> determines whether the KMS key contains a symmetric key or an asymmetric
            key pair. It also determines the algorithms that the KMS key supports. You can't change
            the <c>KeySpec</c> after the KMS key is created. To further restrict the algorithms
            that can be used with the KMS key, use a condition key in its key policy or IAM policy.
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-algorithm">kms:EncryptionAlgorithm</a>,
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-mac-algorithm">kms:MacAlgorithm</a>
            or <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-signing-algorithm">kms:Signing
            Algorithm</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             <important> 
            <para>
             <a href="http://aws.amazon.com/kms/features/#AWS_Service_Integration">Amazon Web
            Services services that are integrated with KMS</a> use symmetric encryption KMS keys
            to protect your data. These services do not support asymmetric KMS keys or HMAC KMS
            keys.
            </para>
             </important> 
            <para>
            KMS supports the following key specs for KMS keys:
            </para>
             <ul> <li> 
            <para>
            Symmetric encryption key (default)
            </para>
             <ul> <li> 
            <para>
             <c>SYMMETRIC_DEFAULT</c> 
            </para>
             </li> </ul> </li> <li> 
            <para>
            HMAC keys (symmetric)
            </para>
             <ul> <li> 
            <para>
             <c>HMAC_224</c> 
            </para>
             </li> <li> 
            <para>
             <c>HMAC_256</c> 
            </para>
             </li> <li> 
            <para>
             <c>HMAC_384</c> 
            </para>
             </li> <li> 
            <para>
             <c>HMAC_512</c> 
            </para>
             </li> </ul> </li> <li> 
            <para>
            Asymmetric RSA key pairs
            </para>
             <ul> <li> 
            <para>
             <c>RSA_2048</c> 
            </para>
             </li> <li> 
            <para>
             <c>RSA_3072</c> 
            </para>
             </li> <li> 
            <para>
             <c>RSA_4096</c> 
            </para>
             </li> </ul> </li> <li> 
            <para>
            Asymmetric NIST-recommended elliptic curve key pairs
            </para>
             <ul> <li> 
            <para>
             <c>ECC_NIST_P256</c> (secp256r1)
            </para>
             </li> <li> 
            <para>
             <c>ECC_NIST_P384</c> (secp384r1)
            </para>
             </li> <li> 
            <para>
             <c>ECC_NIST_P521</c> (secp521r1)
            </para>
             </li> </ul> </li> <li> 
            <para>
            Other asymmetric elliptic curve key pairs
            </para>
             <ul> <li> 
            <para>
             <c>ECC_SECG_P256K1</c> (secp256k1), commonly used for cryptocurrencies.
            </para>
             </li> </ul> </li> <li> 
            <para>
            SM2 key pairs (China Regions only)
            </para>
             <ul> <li> 
            <para>
             <c>SM2</c> 
            </para>
             </li> </ul> </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateKeyRequest.KeyUsage">
            <summary>
            Gets and sets the property KeyUsage. 
            <para>
            Determines the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a> for which you can use the KMS key. The default value is <c>ENCRYPT_DECRYPT</c>.
            This parameter is optional when you are creating a symmetric encryption KMS key; otherwise,
            it is required. You can't change the <c>KeyUsage</c> value after the KMS key is created.
            </para>
             
            <para>
            Select only one valid value.
            </para>
             <ul> <li> 
            <para>
            For symmetric encryption KMS keys, omit the parameter or specify <c>ENCRYPT_DECRYPT</c>.
            </para>
             </li> <li> 
            <para>
            For HMAC KMS keys (symmetric), specify <c>GENERATE_VERIFY_MAC</c>.
            </para>
             </li> <li> 
            <para>
            For asymmetric KMS keys with RSA key material, specify <c>ENCRYPT_DECRYPT</c> or <c>SIGN_VERIFY</c>.
            </para>
             </li> <li> 
            <para>
            For asymmetric KMS keys with NIST-recommended elliptic curve key material, specify
            <c>SIGN_VERIFY</c> or <c>KEY_AGREEMENT</c>.
            </para>
             </li> <li> 
            <para>
            For asymmetric KMS keys with <c>ECC_SECG_P256K1</c> key material specify <c>SIGN_VERIFY</c>.
            </para>
             </li> <li> 
            <para>
            For asymmetric KMS keys with SM2 key material (China Regions only), specify <c>ENCRYPT_DECRYPT</c>,
            <c>SIGN_VERIFY</c>, or <c>KEY_AGREEMENT</c>.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateKeyRequest.MultiRegion">
            <summary>
            Gets and sets the property MultiRegion. 
            <para>
            Creates a multi-Region primary key that you can replicate into other Amazon Web Services
            Regions. You cannot change this value after you create the KMS key. 
            </para>
             
            <para>
            For a multi-Region key, set this parameter to <c>True</c>. For a single-Region KMS
            key, omit this parameter or set it to <c>False</c>. The default value is <c>False</c>.
            </para>
             
            <para>
            This operation supports <i>multi-Region keys</i>, an KMS feature that lets you create
            multiple interoperable KMS keys in different Amazon Web Services Regions. Because
            these KMS keys have the same key ID, key material, and other metadata, you can use
            them interchangeably to encrypt data in one Amazon Web Services Region and decrypt
            it in a different Amazon Web Services Region without re-encrypting the data or making
            a cross-Region call. For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            This value creates a <i>primary key</i>, not a replica. To create a <i>replica key</i>,
            use the <a>ReplicateKey</a> operation. 
            </para>
             
            <para>
            You can create a symmetric or asymmetric multi-Region key, and you can create a multi-Region
            key with imported key material. However, you cannot create a multi-Region key in a
            custom key store.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateKeyRequest.Origin">
            <summary>
            Gets and sets the property Origin. 
            <para>
            The source of the key material for the KMS key. You cannot change the origin after
            you create the KMS key. The default is <c>AWS_KMS</c>, which means that KMS creates
            the key material.
            </para>
             
            <para>
            To <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-create-cmk.html">create
            a KMS key with no key material</a> (for imported key material), set this value to
            <c>EXTERNAL</c>. For more information about importing key material into KMS, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            Key Material</a> in the <i>Key Management Service Developer Guide</i>. The <c>EXTERNAL</c>
            origin value is valid only for symmetric KMS keys.
            </para>
             
            <para>
            To <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-cmk-keystore.html">create
            a KMS key in an CloudHSM key store</a> and create its key material in the associated
            CloudHSM cluster, set this value to <c>AWS_CLOUDHSM</c>. You must also use the <c>CustomKeyStoreId</c>
            parameter to identify the CloudHSM key store. The <c>KeySpec</c> value must be <c>SYMMETRIC_DEFAULT</c>.
            </para>
             
            <para>
            To <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-xks-keys.html">create
            a KMS key in an external key store</a>, set this value to <c>EXTERNAL_KEY_STORE</c>.
            You must also use the <c>CustomKeyStoreId</c> parameter to identify the external key
            store and the <c>XksKeyId</c> parameter to identify the associated external key. The
            <c>KeySpec</c> value must be <c>SYMMETRIC_DEFAULT</c>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateKeyRequest.Policy">
            <summary>
            Gets and sets the property Policy. 
            <para>
            The key policy to attach to the KMS key.
            </para>
             
            <para>
            If you provide a key policy, it must meet the following criteria:
            </para>
             <ul> <li> 
            <para>
            The key policy must allow the calling principal to make a subsequent <c>PutKeyPolicy</c>
            request on the KMS key. This reduces the risk that the KMS key becomes unmanageable.
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key">Default
            key policy</a> in the <i>Key Management Service Developer Guide</i>. (To omit this
            condition, set <c>BypassPolicyLockoutSafetyCheck</c> to true.)
            </para>
             </li> <li> 
            <para>
            Each statement in the key policy must contain one or more principals. The principals
            in the key policy must exist and be visible to KMS. When you create a new Amazon Web
            Services principal, you might need to enforce a delay before including the new principal
            in a key policy because the new principal might not be immediately visible to KMS.
            For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes
            that I make are not always immediately visible</a> in the <i>Amazon Web Services Identity
            and Access Management User Guide</i>.
            </para>
             </li> </ul> 
            <para>
            If you do not provide a key policy, KMS attaches a default key policy to the KMS key.
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default">Default
            key policy</a> in the <i>Key Management Service Developer Guide</i>. 
            </para>
             
            <para>
            The key policy size quota is 32 kilobytes (32768 bytes).
            </para>
             
            <para>
            For help writing and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM
            JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i>
            </i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateKeyRequest.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            Assigns one or more tags to the KMS key. Use this parameter to tag the KMS key when
            it is created. To tag an existing KMS key, use the <a>TagResource</a> operation.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> <note> 
            <para>
            Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            To use this parameter, you must have <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a>
            permission in an IAM policy.
            </para>
             
            <para>
            Each tag consists of a tag key and a tag value. Both the tag key and the tag value
            are required, but the tag value can be an empty (null) string. You cannot have more
            than one tag on a KMS key with the same tag key. If you specify an existing tag key
            with a different tag value, KMS replaces the current tag value with the specified
            one.
            </para>
             
            <para>
            When you add tags to an Amazon Web Services resource, Amazon Web Services generates
            a cost allocation report with usage and costs aggregated by tags. Tags can also be
            used to control access to a KMS key. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging
            Keys</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateKeyRequest.XksKeyId">
            <summary>
            Gets and sets the property XksKeyId. 
            <para>
            Identifies the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key">external
            key</a> that serves as key material for the KMS key in an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key store</a>. Specify the ID that the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-xks-proxy">external
            key store proxy</a> uses to refer to the external key. For help, see the documentation
            for your external key store proxy.
            </para>
             
            <para>
            This parameter is required for a KMS key with an <c>Origin</c> value of <c>EXTERNAL_KEY_STORE</c>.
            It is not valid for KMS keys with any other <c>Origin</c> value.
            </para>
             
            <para>
            The external key must be an existing 256-bit AES symmetric encryption key hosted outside
            of Amazon Web Services in an external key manager associated with the external key
            store specified by the <c>CustomKeyStoreId</c> parameter. This key must be enabled
            and configured to perform encryption and decryption. Each KMS key in an external key
            store must use a different external key. For details, see <a href="https://docs.aws.amazon.com/create-xks-keys.html#xks-key-requirements">Requirements
            for a KMS key in an external key store</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            Each KMS key in an external key store is associated two backing keys. One is key material
            that KMS generates. The other is the external key specified by this parameter. When
            you use the KMS key in an external key store to encrypt data, the encryption operation
            is performed first by KMS using the KMS key material, and then by the external key
            manager using the specified external key, a process known as <i>double encryption</i>.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-double-encryption">Double
            encryption</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CreateKeyResponse">
            <summary>
            This is the response object from the CreateKey operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CreateKeyResponse.KeyMetadata">
            <summary>
            Gets and sets the property KeyMetadata. 
            <para>
            Metadata associated with the KMS key.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CustomKeyStoreHasCMKsException">
            <summary>
            The request was rejected because the custom key store contains KMS keys. After verifying
            that you do not need to use the KMS keys, use the <a>ScheduleKeyDeletion</a> operation
            to delete the KMS keys. After they are deleted, you can delete the custom key store.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreHasCMKsException.#ctor(System.String)">
            <summary>
            Constructs a new CustomKeyStoreHasCMKsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreHasCMKsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of CustomKeyStoreHasCMKsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreHasCMKsException.#ctor(System.Exception)">
            <summary>
            Construct instance of CustomKeyStoreHasCMKsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreHasCMKsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CustomKeyStoreHasCMKsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreHasCMKsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CustomKeyStoreHasCMKsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException">
            <summary>
            The request was rejected because of the <c>ConnectionState</c> of the custom key store.
            To get the <c>ConnectionState</c> of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            
             
            <para>
            This exception is thrown under the following conditions:
            </para>
             <ul> <li> 
            <para>
            You requested the <a>ConnectCustomKeyStore</a> operation on a custom key store with
            a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>FAILED</c>. This operation
            is valid for all other <c>ConnectionState</c> values. To reconnect a custom key store
            in a <c>FAILED</c> state, disconnect it (<a>DisconnectCustomKeyStore</a>), then connect
            it (<c>ConnectCustomKeyStore</c>).
            </para>
             </li> <li> 
            <para>
            You requested the <a>CreateKey</a> operation in a custom key store that is not connected.
            This operations is valid only when the custom key store <c>ConnectionState</c> is
            <c>CONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>DisconnectCustomKeyStore</a> operation on a custom key store
            with a <c>ConnectionState</c> of <c>DISCONNECTING</c> or <c>DISCONNECTED</c>. This
            operation is valid for all other <c>ConnectionState</c> values.
            </para>
             </li> <li> 
            <para>
            You requested the <a>UpdateCustomKeyStore</a> or <a>DeleteCustomKeyStore</a> operation
            on a custom key store that is not disconnected. This operation is valid only when
            the custom key store <c>ConnectionState</c> is <c>DISCONNECTED</c>.
            </para>
             </li> <li> 
            <para>
            You requested the <a>GenerateRandom</a> operation in an CloudHSM key store that is
            not connected. This operation is valid only when the CloudHSM key store <c>ConnectionState</c>
            is <c>CONNECTED</c>. 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException.#ctor(System.String)">
            <summary>
            Constructs a new CustomKeyStoreInvalidStateException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of CustomKeyStoreInvalidStateException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException.#ctor(System.Exception)">
            <summary>
            Construct instance of CustomKeyStoreInvalidStateException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CustomKeyStoreInvalidStateException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreInvalidStateException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CustomKeyStoreInvalidStateException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CustomKeyStoreNameInUseException">
            <summary>
            The request was rejected because the specified custom key store name is already assigned
            to another custom key store in the account. Try again with a custom key store name
            that is unique in the account.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreNameInUseException.#ctor(System.String)">
            <summary>
            Constructs a new CustomKeyStoreNameInUseException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreNameInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of CustomKeyStoreNameInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreNameInUseException.#ctor(System.Exception)">
            <summary>
            Construct instance of CustomKeyStoreNameInUseException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreNameInUseException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CustomKeyStoreNameInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreNameInUseException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CustomKeyStoreNameInUseException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException">
            <summary>
            The request was rejected because KMS cannot find a custom key store with the specified
            key store name or ID.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new CustomKeyStoreNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of CustomKeyStoreNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of CustomKeyStoreNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CustomKeyStoreNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.CustomKeyStoreNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CustomKeyStoreNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.CustomKeyStoresListEntry">
            <summary>
            Contains information about each custom key store in the custom key store list.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CustomKeyStoresListEntry.CloudHsmClusterId">
            <summary>
            Gets and sets the property CloudHsmClusterId. 
            <para>
            A unique identifier for the CloudHSM cluster that is associated with an CloudHSM key
            store. This field appears only when the <c>CustomKeyStoreType</c> is <c>AWS_CLOUDHSM</c>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CustomKeyStoresListEntry.ConnectionErrorCode">
            <summary>
            Gets and sets the property ConnectionErrorCode. 
            <para>
            Describes the connection error. This field appears in the response only when the <c>ConnectionState</c>
            is <c>FAILED</c>.
            </para>
             
            <para>
            Many failures can be resolved by updating the properties of the custom key store.
            To update a custom key store, disconnect it (<a>DisconnectCustomKeyStore</a>), correct
            the errors (<a>UpdateCustomKeyStore</a>), and try to connect again (<a>ConnectCustomKeyStore</a>).
            For additional help resolving these errors, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-failed">How
            to Fix a Connection Failure</a> in <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>All custom key stores:</b> 
            </para>
             <ul> <li> 
            <para>
             <c>INTERNAL_ERROR</c> — KMS could not complete the request due to an internal error.
            Retry the request. For <c>ConnectCustomKeyStore</c> requests, disconnect the custom
            key store before trying to connect again.
            </para>
             </li> <li> 
            <para>
             <c>NETWORK_ERRORS</c> — Network errors are preventing KMS from connecting the custom
            key store to its backing key store.
            </para>
             </li> </ul> 
            <para>
             <b>CloudHSM key stores:</b> 
            </para>
             <ul> <li> 
            <para>
             <c>CLUSTER_NOT_FOUND</c> — KMS cannot find the CloudHSM cluster with the specified
            cluster ID.
            </para>
             </li> <li> 
            <para>
             <c>INSUFFICIENT_CLOUDHSM_HSMS</c> — The associated CloudHSM cluster does not contain
            any active HSMs. To connect a custom key store to its CloudHSM cluster, the cluster
            must contain at least one active HSM.
            </para>
             </li> <li> 
            <para>
             <c>INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET</c> — At least one private subnet associated
            with the CloudHSM cluster doesn't have any available IP addresses. A CloudHSM key
            store connection requires one free IP address in each of the associated private subnets,
            although two are preferable. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-failed">How
            to Fix a Connection Failure</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
             <c>INVALID_CREDENTIALS</c> — The <c>KeyStorePassword</c> for the custom key store
            doesn't match the current password of the <c>kmsuser</c> crypto user in the CloudHSM
            cluster. Before you can connect your custom key store to its CloudHSM cluster, you
            must change the <c>kmsuser</c> account password and update the <c>KeyStorePassword</c>
            value for the custom key store.
            </para>
             </li> <li> 
            <para>
             <c>SUBNET_NOT_FOUND</c> — A subnet in the CloudHSM cluster configuration was deleted.
            If KMS cannot find all of the subnets in the cluster configuration, attempts to connect
            the custom key store to the CloudHSM cluster fail. To fix this error, create a cluster
            from a recent backup and associate it with your custom key store. (This process creates
            a new cluster configuration with a VPC and private subnets.) For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-failed">How
            to Fix a Connection Failure</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
             <c>USER_LOCKED_OUT</c> — The <c>kmsuser</c> CU account is locked out of the associated
            CloudHSM cluster due to too many failed password attempts. Before you can connect
            your custom key store to its CloudHSM cluster, you must change the <c>kmsuser</c>
            account password and update the key store password value for the custom key store.
            </para>
             </li> <li> 
            <para>
             <c>USER_LOGGED_IN</c> — The <c>kmsuser</c> CU account is logged into the associated
            CloudHSM cluster. This prevents KMS from rotating the <c>kmsuser</c> account password
            and logging into the cluster. Before you can connect your custom key store to its
            CloudHSM cluster, you must log the <c>kmsuser</c> CU out of the cluster. If you changed
            the <c>kmsuser</c> password to log into the cluster, you must also and update the
            key store password value for the custom key store. For help, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#login-kmsuser-2">How
            to Log Out and Reconnect</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
             <c>USER_NOT_FOUND</c> — KMS cannot find a <c>kmsuser</c> CU account in the associated
            CloudHSM cluster. Before you can connect your custom key store to its CloudHSM cluster,
            you must create a <c>kmsuser</c> CU account in the cluster, and then update the key
            store password value for the custom key store.
            </para>
             </li> </ul> 
            <para>
             <b>External key stores:</b> 
            </para>
             <ul> <li> 
            <para>
             <c>INVALID_CREDENTIALS</c> — One or both of the <c>XksProxyAuthenticationCredential</c>
            values is not valid on the specified external key store proxy.
            </para>
             </li> <li> 
            <para>
             <c>XKS_PROXY_ACCESS_DENIED</c> — KMS requests are denied access to the external key
            store proxy. If the external key store proxy has authorization rules, verify that
            they permit KMS to communicate with the proxy on your behalf.
            </para>
             </li> <li> 
            <para>
             <c>XKS_PROXY_INVALID_CONFIGURATION</c> — A configuration error is preventing the
            external key store from connecting to its proxy. Verify the value of the <c>XksProxyUriPath</c>.
            </para>
             </li> <li> 
            <para>
             <c>XKS_PROXY_INVALID_RESPONSE</c> — KMS cannot interpret the response from the external
            key store proxy. If you see this connection error code repeatedly, notify your external
            key store proxy vendor.
            </para>
             </li> <li> 
            <para>
             <c>XKS_PROXY_INVALID_TLS_CONFIGURATION</c> — KMS cannot connect to the external key
            store proxy because the TLS configuration is invalid. Verify that the XKS proxy supports
            TLS 1.2 or 1.3. Also, verify that the TLS certificate is not expired, and that it
            matches the hostname in the <c>XksProxyUriEndpoint</c> value, and that it is signed
            by a certificate authority included in the <a href="https://github.com/aws/aws-kms-xksproxy-api-spec/blob/main/TrustedCertificateAuthorities">Trusted
            Certificate Authorities</a> list.
            </para>
             </li> <li> 
            <para>
             <c>XKS_PROXY_NOT_REACHABLE</c> — KMS can't communicate with your external key store
            proxy. Verify that the <c>XksProxyUriEndpoint</c> and <c>XksProxyUriPath</c> are correct.
            Use the tools for your external key store proxy to verify that the proxy is active
            and available on its network. Also, verify that your external key manager instances
            are operating properly. Connection attempts fail with this connection error code if
            the proxy reports that all external key manager instances are unavailable.
            </para>
             </li> <li> 
            <para>
             <c>XKS_PROXY_TIMED_OUT</c> — KMS can connect to the external key store proxy, but
            the proxy does not respond to KMS in the time allotted. If you see this connection
            error code repeatedly, notify your external key store proxy vendor.
            </para>
             </li> <li> 
            <para>
             <c>XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION</c> — The Amazon VPC endpoint service
            configuration doesn't conform to the requirements for an KMS external key store.
            </para>
             <ul> <li> 
            <para>
            The VPC endpoint service must be an endpoint service for interface endpoints in the
            caller's Amazon Web Services account.
            </para>
             </li> <li> 
            <para>
            It must have a network load balancer (NLB) connected to at least two subnets, each
            in a different Availability Zone.
            </para>
             </li> <li> 
            <para>
            The <c>Allow principals</c> list must include the KMS service principal for the Region,
            <c>cks.kms.&lt;region&gt;.amazonaws.com</c>, such as <c>cks.kms.us-east-1.amazonaws.com</c>.
            </para>
             </li> <li> 
            <para>
            It must <i>not</i> require <a href="https://docs.aws.amazon.com/vpc/latest/privatelink/create-endpoint-service.html">acceptance</a>
            of connection requests.
            </para>
             </li> <li> 
            <para>
            It must have a private DNS name. The private DNS name for an external key store with
            <c>VPC_ENDPOINT_SERVICE</c> connectivity must be unique in its Amazon Web Services
            Region.
            </para>
             </li> <li> 
            <para>
            The domain of the private DNS name must have a <a href="https://docs.aws.amazon.com/vpc/latest/privatelink/verify-domains.html">verification
            status</a> of <c>verified</c>.
            </para>
             </li> <li> 
            <para>
            The <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html">TLS
            certificate</a> specifies the private DNS hostname at which the endpoint is reachable.
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND</c> — KMS can't find the VPC endpoint service
            that it uses to communicate with the external key store proxy. Verify that the <c>XksProxyVpcEndpointServiceName</c>
            is correct and the KMS service principal has service consumer permissions on the Amazon
            VPC endpoint service.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CustomKeyStoresListEntry.ConnectionState">
            <summary>
            Gets and sets the property ConnectionState. 
            <para>
            Indicates whether the custom key store is connected to its backing key store. For
            an CloudHSM key store, the <c>ConnectionState</c> indicates whether it is connected
            to its CloudHSM cluster. For an external key store, the <c>ConnectionState</c> indicates
            whether it is connected to the external key store proxy that communicates with your
            external key manager.
            </para>
             
            <para>
            You can create and use KMS keys in your custom key stores only when its <c>ConnectionState</c>
            is <c>CONNECTED</c>.
            </para>
             
            <para>
            The <c>ConnectionState</c> value is <c>DISCONNECTED</c> only if the key store has
            never been connected or you use the <a>DisconnectCustomKeyStore</a> operation to disconnect
            it. If the value is <c>CONNECTED</c> but you are having trouble using the custom key
            store, make sure that the backing key store is reachable and active. For an CloudHSM
            key store, verify that its associated CloudHSM cluster is active and contains at least
            one active HSM. For an external key store, verify that the external key store proxy
            and external key manager are connected and enabled.
            </para>
             
            <para>
            A value of <c>FAILED</c> indicates that an attempt to connect was unsuccessful. The
            <c>ConnectionErrorCode</c> field in the response indicates the cause of the failure.
            For help resolving a connection failure, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            a custom key store</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CustomKeyStoresListEntry.CreationDate">
            <summary>
            Gets and sets the property CreationDate. 
            <para>
            The date and time when the custom key store was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CustomKeyStoresListEntry.CustomKeyStoreId">
            <summary>
            Gets and sets the property CustomKeyStoreId. 
            <para>
            A unique identifier for the custom key store.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CustomKeyStoresListEntry.CustomKeyStoreName">
            <summary>
            Gets and sets the property CustomKeyStoreName. 
            <para>
            The user-specified friendly name for the custom key store.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CustomKeyStoresListEntry.CustomKeyStoreType">
            <summary>
            Gets and sets the property CustomKeyStoreType. 
            <para>
            Indicates the type of the custom key store. <c>AWS_CLOUDHSM</c> indicates a custom
            key store backed by an CloudHSM cluster. <c>EXTERNAL_KEY_STORE</c> indicates a custom
            key store backed by an external key store proxy and external key manager outside of
            Amazon Web Services.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CustomKeyStoresListEntry.TrustAnchorCertificate">
            <summary>
            Gets and sets the property TrustAnchorCertificate. 
            <para>
            The trust anchor certificate of the CloudHSM cluster associated with an CloudHSM key
            store. When you <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html#sign-csr">initialize
            the cluster</a>, you create this certificate and save it in the <c>customerCA.crt</c>
            file.
            </para>
             
            <para>
            This field appears only when the <c>CustomKeyStoreType</c> is <c>AWS_CLOUDHSM</c>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.CustomKeyStoresListEntry.XksProxyConfiguration">
            <summary>
            Gets and sets the property XksProxyConfiguration. 
            <para>
            Configuration settings for the external key store proxy (XKS proxy). The external
            key store proxy translates KMS requests into a format that your external key manager
            can understand. The proxy configuration includes connection information that KMS requires.
            </para>
             
            <para>
            This field appears only when the <c>CustomKeyStoreType</c> is <c>EXTERNAL_KEY_STORE</c>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DecryptRequest">
            <summary>
            Container for the parameters to the Decrypt operation.
            Decrypts ciphertext that was encrypted by a KMS key using any of the following operations:
            
             <ul> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyWithoutPlaintext</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPairWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
            You can use this operation to decrypt ciphertext that was encrypted under a symmetric
            encryption KMS key or an asymmetric encryption KMS key. When the KMS key is asymmetric,
            you must specify the KMS key and the encryption algorithm that was used to encrypt
            the ciphertext. For information about asymmetric KMS keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The <c>Decrypt</c> operation also decrypts ciphertext that was encrypted outside of
            KMS by the public key in an KMS asymmetric KMS key. However, it cannot decrypt symmetric
            ciphertext produced by other libraries, such as the <a href="https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/">Amazon
            Web Services Encryption SDK</a> or <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html">Amazon
            S3 client-side encryption</a>. These libraries return a ciphertext format that is
            incompatible with KMS.
            </para>
             
            <para>
            If the ciphertext was encrypted under a symmetric encryption KMS key, the <c>KeyId</c>
            parameter is optional. KMS can get this information from metadata that it adds to
            the symmetric ciphertext blob. This feature adds durability to your implementation
            by ensuring that authorized users can decrypt ciphertext decades after it was encrypted,
            even if they've lost track of the key ID. However, specifying the KMS key is always
            recommended as a best practice. When you use the <c>KeyId</c> parameter to specify
            a KMS key, KMS only uses the KMS key you specify. If the ciphertext was encrypted
            under a different KMS key, the <c>Decrypt</c> operation fails. This practice ensures
            that you use the KMS key that you intend.
            </para>
             
            <para>
            Whenever possible, use key policies to give users permission to call the <c>Decrypt</c>
            operation on a particular KMS key, instead of using &amp;IAM; policies. Otherwise,
            you might create an &amp;IAM; policy that gives the user <c>Decrypt</c> permission
            on all KMS keys. This user could decrypt ciphertext that was encrypted by KMS keys
            in other accounts if the key policy for the cross-account KMS key permits it. If you
            must use an IAM policy for <c>Decrypt</c> permissions, limit the user to particular
            KMS keys or particular trusted accounts. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/iam-policies.html#iam-policies-best-practices">Best
            practices for IAM policies</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <c>Decrypt</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>Decrypt</c> for a Nitro enclave, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. Instead of the plaintext
            data, the response includes the plaintext data encrypted with the public key from
            the attestation document (<c>CiphertextForRecipient</c>). For information about the
            interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. If you use the <c>KeyId</c> parameter to identify
            a KMS key in a different Amazon Web Services account, specify the key ARN or the alias
            ARN of the KMS key.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:Decrypt</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReEncrypt</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DecryptRequest.CiphertextBlob">
            <summary>
            Gets and sets the property CiphertextBlob. 
            <para>
            Ciphertext to be decrypted. The blob includes metadata.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DecryptRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DecryptRequest.EncryptionAlgorithm">
            <summary>
            Gets and sets the property EncryptionAlgorithm. 
            <para>
            Specifies the encryption algorithm that will be used to decrypt the ciphertext. Specify
            the same algorithm that was used to encrypt the data. If you specify a different algorithm,
            the <c>Decrypt</c> operation fails.
            </para>
             
            <para>
            This parameter is required only when the ciphertext was encrypted under an asymmetric
            KMS key. The default value, <c>SYMMETRIC_DEFAULT</c>, represents the only supported
            algorithm that is valid for symmetric encryption KMS keys.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DecryptRequest.EncryptionContext">
            <summary>
            Gets and sets the property EncryptionContext. 
            <para>
            Specifies the encryption context to use when decrypting the data. An encryption context
            is valid only for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a> with a symmetric encryption KMS key. The standard asymmetric encryption
            algorithms and HMAC algorithms that KMS uses do not support an encryption context.
            </para>
             
            <para>
            An <i>encryption context</i> is a collection of non-secret key-value pairs that represent
            additional authenticated data. When you use an encryption context to encrypt data,
            you must specify the same (an exact case-sensitive match) encryption context to decrypt
            the data. An encryption context is supported only on operations with symmetric encryption
            KMS keys. On operations with symmetric encryption KMS keys, an encryption context
            is optional, but it is strongly recommended.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DecryptRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens. 
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DecryptRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Specifies the KMS key that KMS uses to decrypt the ciphertext.
            </para>
             
            <para>
            Enter a key ID of the KMS key that was used to encrypt the ciphertext. If you identify
            a different KMS key, the <c>Decrypt</c> operation throws an <c>IncorrectKeyException</c>.
            </para>
             
            <para>
            This parameter is required only when the ciphertext was encrypted under an asymmetric
            KMS key. If you used a symmetric encryption KMS key, KMS can get the KMS key from
            metadata that it adds to the symmetric ciphertext blob. However, it is always recommended
            as a best practice. This practice ensures that you use the KMS key that you intend.
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DecryptRequest.Recipient">
            <summary>
            Gets and sets the property Recipient. 
            <para>
            A signed <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-concepts.html#term-attestdoc">attestation
            document</a> from an Amazon Web Services Nitro enclave and the encryption algorithm
            to use with the enclave's public key. The only valid encryption algorithm is <c>RSAES_OAEP_SHA_256</c>.
            
            </para>
             
            <para>
            This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves.
            To include this parameter, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK.
            </para>
             
            <para>
            When you use this parameter, instead of returning the plaintext data, KMS encrypts
            the plaintext data with the public key in the attestation document, and returns the
            resulting ciphertext in the <c>CiphertextForRecipient</c> field in the response. This
            ciphertext can be decrypted only with the private key in the enclave. The <c>Plaintext</c>
            field in the response is null or empty.
            </para>
             
            <para>
            For information about the interaction between KMS and Amazon Web Services Nitro Enclaves,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DecryptResponse">
            <summary>
            This is the response object from the Decrypt operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DecryptResponse.CiphertextForRecipient">
            <summary>
            Gets and sets the property CiphertextForRecipient. 
            <para>
            The plaintext data encrypted with the public key in the attestation document. 
            </para>
             
            <para>
            This field is included in the response only when the <c>Recipient</c> parameter in
            the request includes a valid attestation document from an Amazon Web Services Nitro
            enclave. For information about the interaction between KMS and Amazon Web Services
            Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DecryptResponse.EncryptionAlgorithm">
            <summary>
            Gets and sets the property EncryptionAlgorithm. 
            <para>
            The encryption algorithm that was used to decrypt the ciphertext.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DecryptResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the KMS key that was used to decrypt the ciphertext.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DecryptResponse.Plaintext">
            <summary>
            Gets and sets the property Plaintext. 
            <para>
            Decrypted plaintext data. When you use the HTTP API or the Amazon Web Services CLI,
            the value is Base64-encoded. Otherwise, it is not Base64-encoded.
            </para>
             
            <para>
            If the response includes the <c>CiphertextForRecipient</c> field, the <c>Plaintext</c>
            field is null or empty.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DeleteAliasRequest">
            <summary>
            Container for the parameters to the DeleteAlias operation.
            Deletes the specified alias. 
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            Because an alias is not a property of a KMS key, you can delete and change the aliases
            of a KMS key without affecting the KMS key. Also, aliases do not appear in the response
            from the <a>DescribeKey</a> operation. To get the aliases of all KMS keys, use the
            <a>ListAliases</a> operation. 
            </para>
             
            <para>
            Each KMS key can have multiple aliases. To change the alias of a KMS key, use <a>DeleteAlias</a>
            to delete the current alias and <a>CreateAlias</a> to create a new alias. To associate
            an existing alias with a different KMS key, call <a>UpdateAlias</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on an alias in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteAlias</a>
            on the KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeleteAliasRequest.AliasName">
            <summary>
            Gets and sets the property AliasName. 
            <para>
            The alias to be deleted. The alias name must begin with <c>alias/</c> followed by
            the alias name, such as <c>alias/ExampleAlias</c>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DeleteAliasResponse">
            <summary>
            This is the response object from the DeleteAlias operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DeleteCustomKeyStoreRequest">
            <summary>
            Container for the parameters to the DeleteCustomKeyStore operation.
            Deletes a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. This operation does not affect any backing elements of the custom key
            store. It does not delete the CloudHSM cluster that is associated with an CloudHSM
            key store, or affect any users or keys in the cluster. For an external key store,
            it does not affect the external key store proxy, external key manager, or any external
            keys.
            
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            The custom key store that you delete cannot contain any <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#kms_keys">KMS
            keys</a>. Before deleting the key store, verify that you will never need to use any
            of the KMS keys in the key store for any <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. Then, use <a>ScheduleKeyDeletion</a> to delete the KMS keys from the
            key store. After the required waiting period expires and all KMS keys are deleted
            from the custom key store, use <a>DisconnectCustomKeyStore</a> to disconnect the key
            store from KMS. Then, you can delete the custom key store.
            </para>
             
            <para>
            For keys in an CloudHSM key store, the <c>ScheduleKeyDeletion</c> operation makes
            a best effort to delete the key material from the associated cluster. However, you
            might need to manually <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key">delete
            the orphaned key material</a> from the cluster and its backups. KMS never creates,
            manages, or deletes cryptographic keys in the external key manager associated with
            an external key store. You must manage them using your external key manager tools.
            </para>
             
            <para>
            Instead of deleting the custom key store, consider using the <a>DisconnectCustomKeyStore</a>
            operation to disconnect the custom key store from its backing key store. While the
            key store is disconnected, you cannot create or use the KMS keys in the key store.
            But, you do not need to delete KMS keys and you can reconnect a disconnected custom
            key store at any time.
            </para>
             
            <para>
            If the operation succeeds, it returns a JSON object with no properties.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteCustomKeyStore</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeleteCustomKeyStoreRequest.CustomKeyStoreId">
            <summary>
            Gets and sets the property CustomKeyStoreId. 
            <para>
            Enter the ID of the custom key store you want to delete. To find the ID of a custom
            key store, use the <a>DescribeCustomKeyStores</a> operation.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DeleteCustomKeyStoreResponse">
            <summary>
            This is the response object from the DeleteCustomKeyStore operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DeleteImportedKeyMaterialRequest">
            <summary>
            Container for the parameters to the DeleteImportedKeyMaterial operation.
            Deletes key material that was previously imported. This operation makes the specified
            KMS key temporarily unusable. To restore the usability of the KMS key, reimport the
            same key material. For more information about importing key material into KMS, see
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            Key Material</a> in the <i>Key Management Service Developer Guide</i>.
            
             
            <para>
            When the specified KMS key is in the <c>PendingDeletion</c> state, this operation
            does not change the KMS key's state. Otherwise, it changes the KMS key's state to
            <c>PendingImport</c>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DeleteImportedKeyMaterial</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>GetParametersForImport</a> 
            </para>
             </li> <li> 
            <para>
             <a>ImportKeyMaterial</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeleteImportedKeyMaterialRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the KMS key from which you are deleting imported key material. The <c>Origin</c>
            of the KMS key must be <c>EXTERNAL</c>.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DeleteImportedKeyMaterialResponse">
            <summary>
            This is the response object from the DeleteImportedKeyMaterial operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DependencyTimeoutException">
            <summary>
            The system timed out while trying to fulfill the request. You can retry the request.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DependencyTimeoutException.#ctor(System.String)">
            <summary>
            Constructs a new DependencyTimeoutException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DependencyTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of DependencyTimeoutException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DependencyTimeoutException.#ctor(System.Exception)">
            <summary>
            Construct instance of DependencyTimeoutException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DependencyTimeoutException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DependencyTimeoutException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DependencyTimeoutException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DependencyTimeoutException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DeriveSharedSecretRequest">
            <summary>
            Container for the parameters to the DeriveSharedSecret operation.
            
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeriveSharedSecretRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeriveSharedSecretRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeriveSharedSecretRequest.KeyAgreementAlgorithm">
            <summary>
            Gets and sets the property KeyAgreementAlgorithm. 
            <para>
            Specifies the key agreement algorithm used to derive the shared secret. The only valid
            value is <c>ECDH</c>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeriveSharedSecretRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies an asymmetric ECC or SM2 (China Regions only) KMS key. KMS uses the asymmetric
            KMS key to generate the key agreement. The key usage of the KMS key must be <c>KEY_AGREEMENT</c>.
            To find the <c>KeyUsage</c> of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeriveSharedSecretRequest.PublicKey">
            <summary>
            Gets and sets the property PublicKey. 
            <para>
            Specifies the public key of the recipient's ECC or SM2 (China Regions only) key pair.
            </para>
             
            <para>
            The public key must be DER-encoded in Public-Key Cryptography Standards (PKCS) #8
            format that complies with <a href="https://datatracker.ietf.org/doc/html/rfc5208">RFC
            5208</a>. [BUGBUG verify]
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeriveSharedSecretRequest.Recipient">
            <summary>
            Gets and sets the property Recipient. 
            <para>
            A signed <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave-how.html#term-attestdoc">attestation
            document</a> from an Amazon Web Services Nitro enclave and the encryption algorithm
            to use with the enclave's public key. The only valid encryption algorithm is <c>RSAES_OAEP_SHA_256</c>.
            
            </para>
             
            <para>
            This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves.
            To include this parameter, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK.
            </para>
             
            <para>
            When you use this parameter, instead of returning a plaintext copy of the shared secret,
            KMS encrypts the plaintext private data key under the public key in the attestation
            document, and returns the resulting ciphertext in the <c>CiphertextForRecipient</c>
            field in the response. This ciphertext can be decrypted only with the private key
            in the enclave. The <c>CiphertextBlob</c> field in the response contains a copy of
            the shared secret derived from the KMS key specified by the <c>KeyId</c> parameter.
            The <c>SharedSecret</c> field in the response is null or empty.
            </para>
             
            <para>
            For information about the interaction between KMS and Amazon Web Services Nitro Enclaves,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DeriveSharedSecretResponse">
            <summary>
            This is the response object from the DeriveSharedSecret operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeriveSharedSecretResponse.CiphertextForRecipient">
            <summary>
            Gets and sets the property CiphertextForRecipient. 
            <para>
            The plaintext shared secret encrypted with the public key in the attestation document.
            </para>
             
            <para>
            This field is included in the response only when the <c>Recipient</c> parameter in
            the request includes a valid attestation document from an Amazon Web Services Nitro
            enclave. For information about the interaction between KMS and Amazon Web Services
            Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeriveSharedSecretResponse.KeyAgreementAlgorithm">
            <summary>
            Gets and sets the property KeyAgreementAlgorithm. 
            <para>
            Identifies the key agreement algorithm used to derive the shared secret.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeriveSharedSecretResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the KMS key used to generate the key agreement.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeriveSharedSecretResponse.KeyOrigin">
            <summary>
            Gets and sets the property KeyOrigin.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DeriveSharedSecretResponse.SharedSecret">
            <summary>
            Gets and sets the property SharedSecret. 
            <para>
             
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DescribeCustomKeyStoresRequest">
            <summary>
            Container for the parameters to the DescribeCustomKeyStores operation.
            Gets information about <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> in the account and Region.
            
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            By default, this operation returns information about all custom key stores in the
            account and Region. To get only information about a particular custom key store, use
            either the <c>CustomKeyStoreName</c> or <c>CustomKeyStoreId</c> parameter (but not
            both).
            </para>
             
            <para>
            To determine whether the custom key store is connected to its CloudHSM cluster or
            external key store proxy, use the <c>ConnectionState</c> element in the response.
            If an attempt to connect the custom key store failed, the <c>ConnectionState</c> value
            is <c>FAILED</c> and the <c>ConnectionErrorCode</c> element in the response indicates
            the cause of the failure. For help interpreting the <c>ConnectionErrorCode</c>, see
            <a>CustomKeyStoresListEntry</a>.
            </para>
             
            <para>
            Custom key stores have a <c>DISCONNECTED</c> connection state if the key store has
            never been connected or you used the <a>DisconnectCustomKeyStore</a> operation to
            disconnect it. Otherwise, the connection state is CONNECTED. If your custom key store
            connection state is <c>CONNECTED</c> but you are having trouble using it, verify that
            the backing store is active and available. For an CloudHSM key store, verify that
            the associated CloudHSM cluster is active and contains the minimum number of HSMs
            required for the operation, if any. For an external key store, verify that the external
            key store proxy and its associated external key manager are reachable and enabled.
            </para>
             
            <para>
             For help repairing your CloudHSM key store, see the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html">Troubleshooting
            CloudHSM key stores</a>. For help repairing your external key store, see the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/xks-troubleshooting.html">Troubleshooting
            external key stores</a>. Both topics are in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DescribeCustomKeyStores</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DescribeCustomKeyStoresRequest.CustomKeyStoreId">
            <summary>
            Gets and sets the property CustomKeyStoreId. 
            <para>
            Gets only information about the specified custom key store. Enter the key store ID.
            </para>
             
            <para>
            By default, this operation gets information about all custom key stores in the account
            and Region. To limit the output to a particular custom key store, provide either the
            <c>CustomKeyStoreId</c> or <c>CustomKeyStoreName</c> parameter, but not both.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DescribeCustomKeyStoresRequest.CustomKeyStoreName">
            <summary>
            Gets and sets the property CustomKeyStoreName. 
            <para>
            Gets only information about the specified custom key store. Enter the friendly name
            of the custom key store.
            </para>
             
            <para>
            By default, this operation gets information about all custom key stores in the account
            and Region. To limit the output to a particular custom key store, provide either the
            <c>CustomKeyStoreId</c> or <c>CustomKeyStoreName</c> parameter, but not both.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DescribeCustomKeyStoresRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            Use this parameter to specify the maximum number of items to return. When this value
            is present, KMS does not return more than the specified number of items, but it might
            return fewer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DescribeCustomKeyStoresRequest.Marker">
            <summary>
            Gets and sets the property Marker. 
            <para>
            Use this parameter in a subsequent request after you receive a response with truncated
            results. Set it to the value of <c>NextMarker</c> from the truncated response you
            just received.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DescribeCustomKeyStoresResponse">
            <summary>
            This is the response object from the DescribeCustomKeyStores operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DescribeCustomKeyStoresResponse.CustomKeyStores">
            <summary>
            Gets and sets the property CustomKeyStores. 
            <para>
            Contains metadata about each custom key store.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DescribeCustomKeyStoresResponse.NextMarker">
            <summary>
            Gets and sets the property NextMarker. 
            <para>
            When <c>Truncated</c> is true, this element is present and contains the value to use
            for the <c>Marker</c> parameter in a subsequent request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DescribeCustomKeyStoresResponse.Truncated">
            <summary>
            Gets and sets the property Truncated. 
            <para>
            A flag that indicates whether there are more items in the list. When this value is
            true, the list in this response is truncated. To get more items, pass the value of
            the <c>NextMarker</c> element in this response to the <c>Marker</c> parameter in a
            subsequent request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DescribeKeyRequest">
            <summary>
            Container for the parameters to the DescribeKey operation.
            Provides detailed information about a KMS key. You can run <c>DescribeKey</c> on a
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a> or an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed key</a>.
            
             
            <para>
            This detailed information includes the key ARN, creation date (and deletion date,
            if applicable), the key state, and the origin and expiration date (if any) of the
            key material. It includes fields, like <c>KeySpec</c>, that help you distinguish different
            types of KMS keys. It also displays the key usage (encryption, signing, or generating
            and verifying MACs) and the algorithms that the KMS key supports. 
            </para>
             
            <para>
            For <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">multi-Region
            keys</a>, <c>DescribeKey</c> displays the primary key and all related replica keys.
            For KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-cloudhsm.html">CloudHSM
            key stores</a>, it includes information about the key store, such as the key store
            ID and the CloudHSM cluster ID. For KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html">external
            key stores</a>, it includes the custom key store ID and the ID of the external key.
            </para>
             
            <para>
             <c>DescribeKey</c> does not return the following information:
            </para>
             <ul> <li> 
            <para>
            Aliases associated with the KMS key. To get this information, use <a>ListAliases</a>.
            </para>
             </li> <li> 
            <para>
            Whether automatic key rotation is enabled on the KMS key. To get this information,
            use <a>GetKeyRotationStatus</a>. Also, some key states prevent a KMS key from being
            automatically rotated. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotate-keys-how-it-works">How
            Automatic Key Rotation Works</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </li> <li> 
            <para>
            Tags on the KMS key. To get this information, use <a>ListResourceTags</a>.
            </para>
             </li> <li> 
            <para>
            Key policies and grants on the KMS key. To get this information, use <a>GetKeyPolicy</a>
            and <a>ListGrants</a>.
            </para>
             </li> </ul> 
            <para>
            In general, <c>DescribeKey</c> is a non-mutating operation. It returns data about
            KMS keys, but doesn't change them. However, Amazon Web Services services use <c>DescribeKey</c>
            to create <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed keys</a> from a <i>predefined Amazon Web Services alias</i> with
            no key ID.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DescribeKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>GetKeyPolicy</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeys</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DescribeKeyRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DescribeKeyRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Describes the specified KMS key. 
            </para>
             
            <para>
            If you specify a predefined Amazon Web Services alias (an Amazon Web Services alias
            with no key ID), KMS associates the alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html##aws-managed-cmk">Amazon
            Web Services managed key</a> and returns its <c>KeyId</c> and <c>Arn</c> in the response.
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DescribeKeyResponse">
            <summary>
            This is the response object from the DescribeKey operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DescribeKeyResponse.KeyMetadata">
            <summary>
            Gets and sets the property KeyMetadata. 
            <para>
            Metadata associated with the key.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DisabledException">
            <summary>
            The request was rejected because the specified KMS key is not enabled.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DisabledException.#ctor(System.String)">
            <summary>
            Constructs a new DisabledException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DisabledException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of DisabledException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DisabledException.#ctor(System.Exception)">
            <summary>
            Construct instance of DisabledException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DisabledException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DisabledException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DisabledException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DisabledException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DisableKeyRequest">
            <summary>
            Container for the parameters to the DisableKey operation.
            Sets the state of a KMS key to disabled. This change temporarily prevents use of the
            KMS key for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. 
            
             
            <para>
            For more information about how key state affects the use of a KMS key, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisableKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>EnableKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DisableKeyRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the KMS key to disable.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DisableKeyResponse">
            <summary>
            This is the response object from the DisableKey operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DisableKeyRotationRequest">
            <summary>
            Container for the parameters to the DisableKeyRotation operation.
            Disables <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            rotation of the key material</a> of the specified symmetric encryption KMS key.
            
             
            <para>
            Automatic key rotation is supported only on symmetric encryption KMS keys. You cannot
            enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key.
            </para>
             
            <para>
            You can enable (<a>EnableKeyRotation</a>) and disable automatic rotation of the key
            material in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed KMS keys</a>. Key material rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a> is not configurable. KMS always rotates the key
            material for every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> varies.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years to every year. For details, see <a>EnableKeyRotation</a>.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisableKeyRotation</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DisableKeyRotationRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies a symmetric encryption KMS key. You cannot enable or disable automatic
            rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html#asymmetric-cmks">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DisableKeyRotationResponse">
            <summary>
            This is the response object from the DisableKeyRotation operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DisconnectCustomKeyStoreRequest">
            <summary>
            Container for the parameters to the DisconnectCustomKeyStore operation.
            Disconnects the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> from its backing key store. This operation disconnects an CloudHSM key
            store from its associated CloudHSM cluster or disconnects an external key store from
            the external key store proxy that communicates with your external key manager.
            
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             
            <para>
            While a custom key store is disconnected, you can manage the custom key store and
            its KMS keys, but you cannot create or use its KMS keys. You can reconnect the custom
            key store at any time.
            </para>
             <note> 
            <para>
            While a custom key store is disconnected, all attempts to create KMS keys in the custom
            key store or to use existing KMS keys in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a> will fail. This action can prevent users from storing and accessing
            sensitive data.
            </para>
             </note> 
            <para>
            When you disconnect a custom key store, its <c>ConnectionState</c> changes to <c>Disconnected</c>.
            To find the connection state of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation. To reconnect a custom key store, use the <a>ConnectCustomKeyStore</a> operation.
            </para>
             
            <para>
            If the operation succeeds, it returns a JSON object with no properties.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:DisconnectCustomKeyStore</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DisconnectCustomKeyStoreRequest.CustomKeyStoreId">
            <summary>
            Gets and sets the property CustomKeyStoreId. 
            <para>
            Enter the ID of the custom key store you want to disconnect. To find the ID of a custom
            key store, use the <a>DescribeCustomKeyStores</a> operation.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DisconnectCustomKeyStoreResponse">
            <summary>
            This is the response object from the DisconnectCustomKeyStore operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DryRunOperationException">
            <summary>
            The request was rejected because the DryRun parameter was specified.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DryRunOperationException.#ctor(System.String)">
            <summary>
            Constructs a new DryRunOperationException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DryRunOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of DryRunOperationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DryRunOperationException.#ctor(System.Exception)">
            <summary>
            Construct instance of DryRunOperationException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DryRunOperationException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DryRunOperationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.DryRunOperationException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DryRunOperationException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.EnableKeyRequest">
            <summary>
            Container for the parameters to the EnableKey operation.
            Sets the key state of a KMS key to enabled. This allows you to use the KMS key for
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a>. 
            
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:EnableKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>DisableKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.EnableKeyRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the KMS key to enable.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.EnableKeyResponse">
            <summary>
            This is the response object from the EnableKey operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.EnableKeyRotationRequest">
            <summary>
            Container for the parameters to the EnableKeyRotation operation.
            Enables <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-enable-disable">automatic
            rotation of the key material</a> of the specified symmetric encryption KMS key. 
            
             
            <para>
            By default, when you enable automatic rotation of a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed KMS key</a>, KMS rotates the key material of the KMS key one year (approximately
            365 days) from the enable date and every year thereafter. You can use the optional
            <c>RotationPeriodInDays</c> parameter to specify a custom rotation period when you
            enable key rotation, or you can use <c>RotationPeriodInDays</c> to modify the rotation
            period of a key that you previously enabled automatic key rotation on.
            </para>
             
            <para>
            You can monitor rotation of the key material for your KMS keys in CloudTrail and Amazon
            CloudWatch. To disable rotation of the key material in a customer managed KMS key,
            use the <a>DisableKeyRotation</a> operation. You can use the <a>GetKeyRotationStatus</a>
            operation to identify any in progress rotations. You can use the <a>ListKeyRotations</a>
            operation to view the details of completed rotations.
            </para>
             
            <para>
            Automatic key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key. 
            </para>
             
            <para>
            You cannot enable or disable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a>. KMS always rotates the key material of Amazon Web
            Services managed keys every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> is managed by the Amazon Web Services service that
            owns the key.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years (approximately 1,095 days) to every year (approximately 365
            days).
            </para>
             
            <para>
            New Amazon Web Services managed keys are automatically rotated one year after they
            are created, and approximately every year thereafter. 
            </para>
             
            <para>
            Existing Amazon Web Services managed keys are automatically rotated one year after
            their most recent rotation, and every year thereafter.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:EnableKeyRotation</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             <note> 
            <para>
            You can perform on-demand (<a>RotateKeyOnDemand</a>) rotation of the key material
            in customer managed KMS keys, regardless of whether or not automatic key rotation
            is enabled.
            </para>
             </note> </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.EnableKeyRotationRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies a symmetric encryption KMS key. You cannot enable automatic rotation of
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.EnableKeyRotationRequest.RotationPeriodInDays">
            <summary>
            Gets and sets the property RotationPeriodInDays. 
            <para>
            Use this parameter to specify a custom period of time between each rotation date.
            If no value is specified, the default value is 365 days.
            </para>
             
            <para>
            The rotation period defines the number of days after you enable automatic key rotation
            that KMS will rotate your key material, and the number of days between each automatic
            rotation thereafter.
            </para>
             
            <para>
            You can use the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/conditions-kms.html#conditions-kms-rotation-period-in-days">
            <c>kms:RotationPeriodInDays</c> </a> condition key to further constrain the values
            that principals can specify in the <c>RotationPeriodInDays</c> parameter.
            </para>
             
            <para>
             
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.EnableKeyRotationResponse">
            <summary>
            This is the response object from the EnableKeyRotation operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.EncryptRequest">
            <summary>
            Container for the parameters to the Encrypt operation.
            Encrypts plaintext of up to 4,096 bytes using a KMS key. You can use a symmetric or
            asymmetric KMS key with a <c>KeyUsage</c> of <c>ENCRYPT_DECRYPT</c>.
            
             
            <para>
            You can use this operation to encrypt small amounts of arbitrary data, such as a personal
            identifier or database password, or other sensitive information. You don't need to
            use the <c>Encrypt</c> operation to encrypt a data key. The <a>GenerateDataKey</a>
            and <a>GenerateDataKeyPair</a> operations return a plaintext data key and an encrypted
            copy of that data key.
            </para>
             
            <para>
            If you use a symmetric encryption KMS key, you can use an encryption context to add
            additional security to your encryption operation. If you specify an <c>EncryptionContext</c>
            when encrypting data, you must specify the same encryption context (a case-sensitive
            exact match) when decrypting the data. Otherwise, the request to decrypt fails with
            an <c>InvalidCiphertextException</c>. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            If you specify an asymmetric KMS key, you must also specify the encryption algorithm.
            The algorithm must be compatible with the KMS key spec.
            </para>
             <important> 
            <para>
            When you use an asymmetric KMS key to encrypt or reencrypt data, be sure to record
            the KMS key and encryption algorithm that you choose. You will be required to provide
            the same KMS key and encryption algorithm when you decrypt the data. If the KMS key
            and algorithm do not match the values used to encrypt the data, the decrypt operation
            fails.
            </para>
             
            <para>
            You are not required to supply the key ID and encryption algorithm when you decrypt
            with symmetric encryption KMS keys because KMS stores this information in the ciphertext
            blob. KMS cannot store metadata in ciphertext generated with asymmetric keys. The
            standard format for asymmetric key ciphertext does not include configurable fields.
            </para>
             </important> 
            <para>
            The maximum size of the data that you can encrypt varies with the type of KMS key
            and the encryption algorithm that you choose.
            </para>
             <ul> <li> 
            <para>
            Symmetric encryption KMS keys
            </para>
             <ul> <li> 
            <para>
             <c>SYMMETRIC_DEFAULT</c>: 4096 bytes
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>RSA_2048</c> 
            </para>
             <ul> <li> 
            <para>
             <c>RSAES_OAEP_SHA_1</c>: 214 bytes
            </para>
             </li> <li> 
            <para>
             <c>RSAES_OAEP_SHA_256</c>: 190 bytes
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>RSA_3072</c> 
            </para>
             <ul> <li> 
            <para>
             <c>RSAES_OAEP_SHA_1</c>: 342 bytes
            </para>
             </li> <li> 
            <para>
             <c>RSAES_OAEP_SHA_256</c>: 318 bytes
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>RSA_4096</c> 
            </para>
             <ul> <li> 
            <para>
             <c>RSAES_OAEP_SHA_1</c>: 470 bytes
            </para>
             </li> <li> 
            <para>
             <c>RSAES_OAEP_SHA_256</c>: 446 bytes
            </para>
             </li> </ul> </li> <li> 
            <para>
             <c>SM2PKE</c>: 1024 bytes (China Regions only)
            </para>
             </li> </ul> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:Encrypt</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.EncryptRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.EncryptRequest.EncryptionAlgorithm">
            <summary>
            Gets and sets the property EncryptionAlgorithm. 
            <para>
            Specifies the encryption algorithm that KMS will use to encrypt the plaintext message.
            The algorithm must be compatible with the KMS key that you specify.
            </para>
             
            <para>
            This parameter is required only for asymmetric KMS keys. The default value, <c>SYMMETRIC_DEFAULT</c>,
            is the algorithm used for symmetric encryption KMS keys. If you are using an asymmetric
            KMS key, we recommend RSAES_OAEP_SHA_256.
            </para>
             
            <para>
            The SM2PKE algorithm is only available in China Regions.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.EncryptRequest.EncryptionContext">
            <summary>
            Gets and sets the property EncryptionContext. 
            <para>
            Specifies the encryption context that will be used to encrypt the data. An encryption
            context is valid only for <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a> with a symmetric encryption KMS key. The standard asymmetric encryption
            algorithms and HMAC algorithms that KMS uses do not support an encryption context.
            
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            An <i>encryption context</i> is a collection of non-secret key-value pairs that represent
            additional authenticated data. When you use an encryption context to encrypt data,
            you must specify the same (an exact case-sensitive match) encryption context to decrypt
            the data. An encryption context is supported only on operations with symmetric encryption
            KMS keys. On operations with symmetric encryption KMS keys, an encryption context
            is optional, but it is strongly recommended.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.EncryptRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.EncryptRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the KMS key to use in the encryption operation. The KMS key must have a
            <c>KeyUsage</c> of <c>ENCRYPT_DECRYPT</c>. To find the <c>KeyUsage</c> of a KMS key,
            use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.EncryptRequest.Plaintext">
            <summary>
            Gets and sets the property Plaintext. 
            <para>
            Data to be encrypted.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.EncryptResponse">
            <summary>
            This is the response object from the Encrypt operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.EncryptResponse.CiphertextBlob">
            <summary>
            Gets and sets the property CiphertextBlob. 
            <para>
            The encrypted plaintext. When you use the HTTP API or the Amazon Web Services CLI,
            the value is Base64-encoded. Otherwise, it is not Base64-encoded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.EncryptResponse.EncryptionAlgorithm">
            <summary>
            Gets and sets the property EncryptionAlgorithm. 
            <para>
            The encryption algorithm that was used to encrypt the plaintext.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.EncryptResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the KMS key that was used to encrypt the plaintext.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ExpiredImportTokenException">
            <summary>
            The request was rejected because the specified import token is expired. Use <a>GetParametersForImport</a>
            to get a new import token and public key, use the new public key to encrypt the key
            material, and then try the request again.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.ExpiredImportTokenException.#ctor(System.String)">
            <summary>
            Constructs a new ExpiredImportTokenException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.ExpiredImportTokenException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ExpiredImportTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.ExpiredImportTokenException.#ctor(System.Exception)">
            <summary>
            Construct instance of ExpiredImportTokenException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.ExpiredImportTokenException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ExpiredImportTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.ExpiredImportTokenException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ExpiredImportTokenException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GenerateDataKeyPairRequest">
            <summary>
            Container for the parameters to the GenerateDataKeyPair operation.
            Returns a unique asymmetric data key pair for use outside of KMS. This operation returns
            a plaintext public key, a plaintext private key, and a copy of the private key that
            is encrypted under the symmetric encryption KMS key you specify. You can use the data
            key pair to perform asymmetric cryptography and implement digital signatures outside
            of KMS. The bytes in the keys are random; they are not related to the caller or to
            the KMS key that is used to encrypt the private key. 
            
             
            <para>
            You can use the public key that <c>GenerateDataKeyPair</c> returns to encrypt data
            or verify a signature outside of KMS. Then, store the encrypted private key with the
            data. When you are ready to decrypt data or sign a message, you can use the <a>Decrypt</a>
            operation to decrypt the encrypted private key.
            </para>
             
            <para>
            To generate a data key pair, you must specify a symmetric encryption KMS key to encrypt
            the private key in a data key pair. You cannot use an asymmetric KMS key or a KMS
            key in a custom key store. To get the type and origin of your KMS key, use the <a>DescribeKey</a>
            operation. 
            </para>
             
            <para>
            Use the <c>KeyPairSpec</c> parameter to choose an RSA or Elliptic Curve (ECC) data
            key pair. In China Regions, you can also choose an SM2 data key pair. KMS recommends
            that you use ECC key pairs for signing, and use RSA and SM2 key pairs for either encryption
            or signing, but not both. However, KMS cannot enforce any restrictions on the use
            of data key pairs outside of KMS.
            </para>
             
            <para>
            If you are using the data key pair to encrypt data, or for any operation where you
            don't immediately need a private key, consider using the <a>GenerateDataKeyPairWithoutPlaintext</a>
            operation. <c>GenerateDataKeyPairWithoutPlaintext</c> returns a plaintext public key
            and an encrypted private key, but omits the plaintext private key that you need only
            to decrypt ciphertext or sign a message. Later, when you need to decrypt the data
            or sign a message, use the <a>Decrypt</a> operation to decrypt the encrypted private
            key in the data key pair.
            </para>
             
            <para>
             <c>GenerateDataKeyPair</c> returns a unique data key pair for each request. The bytes
            in the keys are random; they are not related to the caller or the KMS key that is
            used to encrypt the private key. The public key is a DER-encoded X.509 SubjectPublicKeyInfo,
            as specified in <a href="https://tools.ietf.org/html/rfc5280">RFC 5280</a>. The private
            key is a DER-encoded PKCS8 PrivateKeyInfo, as specified in <a href="https://tools.ietf.org/html/rfc5958">RFC
            5958</a>.
            </para>
             
            <para>
             <c>GenerateDataKeyPair</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>GenerateDataKeyPair</c> for an Amazon Web Services Nitro enclave,
            use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. <c>GenerateDataKeyPair</c>
            returns the public data key and a copy of the private data key encrypted under the
            specified KMS key, as usual. But instead of a plaintext copy of the private data key
            (<c>PrivateKeyPlaintext</c>), the response includes a copy of the private data key
            encrypted under the public key from the attestation document (<c>CiphertextForRecipient</c>).
            For information about the interaction between KMS and Amazon Web Services Nitro Enclaves,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>..
            </para>
             
            <para>
            You can use an optional encryption context to add additional security to the encryption
            operation. If you specify an <c>EncryptionContext</c>, you must specify the same encryption
            context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise,
            the request to decrypt fails with an <c>InvalidCiphertextException</c>. For more information,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateDataKeyPair</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPairWithoutPlaintext</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairRequest.EncryptionContext">
            <summary>
            Gets and sets the property EncryptionContext. 
            <para>
            Specifies the encryption context that will be used when encrypting the private key
            in the data key pair.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            An <i>encryption context</i> is a collection of non-secret key-value pairs that represent
            additional authenticated data. When you use an encryption context to encrypt data,
            you must specify the same (an exact case-sensitive match) encryption context to decrypt
            the data. An encryption context is supported only on operations with symmetric encryption
            KMS keys. On operations with symmetric encryption KMS keys, an encryption context
            is optional, but it is strongly recommended.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Specifies the symmetric encryption KMS key that encrypts the private key in the data
            key pair. You cannot specify an asymmetric KMS key or a KMS key in a custom key store.
            To get the type and origin of your KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairRequest.KeyPairSpec">
            <summary>
            Gets and sets the property KeyPairSpec. 
            <para>
            Determines the type of data key pair that is generated. 
            </para>
             
            <para>
            The KMS rule that restricts the use of asymmetric RSA and SM2 KMS keys to encrypt
            and decrypt or to sign and verify (but not both), and the rule that permits you to
            use ECC KMS keys only to sign and verify, are not effective on data key pairs, which
            are used outside of KMS. The SM2 key spec is only available in China Regions.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairRequest.Recipient">
            <summary>
            Gets and sets the property Recipient. 
            <para>
            A signed <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave-how.html#term-attestdoc">attestation
            document</a> from an Amazon Web Services Nitro enclave and the encryption algorithm
            to use with the enclave's public key. The only valid encryption algorithm is <c>RSAES_OAEP_SHA_256</c>.
            
            </para>
             
            <para>
            This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves.
            To include this parameter, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK.
            </para>
             
            <para>
            When you use this parameter, instead of returning a plaintext copy of the private
            data key, KMS encrypts the plaintext private data key under the public key in the
            attestation document, and returns the resulting ciphertext in the <c>CiphertextForRecipient</c>
            field in the response. This ciphertext can be decrypted only with the private key
            in the enclave. The <c>CiphertextBlob</c> field in the response contains a copy of
            the private data key encrypted under the KMS key specified by the <c>KeyId</c> parameter.
            The <c>PrivateKeyPlaintext</c> field in the response is null or empty.
            </para>
             
            <para>
            For information about the interaction between KMS and Amazon Web Services Nitro Enclaves,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GenerateDataKeyPairResponse">
            <summary>
            This is the response object from the GenerateDataKeyPair operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairResponse.CiphertextForRecipient">
            <summary>
            Gets and sets the property CiphertextForRecipient. 
            <para>
            The plaintext private data key encrypted with the public key from the Nitro enclave.
            This ciphertext can be decrypted only by using a private key in the Nitro enclave.
            
            </para>
             
            <para>
            This field is included in the response only when the <c>Recipient</c> parameter in
            the request includes a valid attestation document from an Amazon Web Services Nitro
            enclave. For information about the interaction between KMS and Amazon Web Services
            Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the KMS key that encrypted the private key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairResponse.KeyPairSpec">
            <summary>
            Gets and sets the property KeyPairSpec. 
            <para>
            The type of data key pair that was generated.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairResponse.PrivateKeyCiphertextBlob">
            <summary>
            Gets and sets the property PrivateKeyCiphertextBlob. 
            <para>
            The encrypted copy of the private key. When you use the HTTP API or the Amazon Web
            Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairResponse.PrivateKeyPlaintext">
            <summary>
            Gets and sets the property PrivateKeyPlaintext. 
            <para>
            The plaintext copy of the private key. When you use the HTTP API or the Amazon Web
            Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
            </para>
             
            <para>
            If the response includes the <c>CiphertextForRecipient</c> field, the <c>PrivateKeyPlaintext</c>
            field is null or empty.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairResponse.PublicKey">
            <summary>
            Gets and sets the property PublicKey. 
            <para>
            The public key (in plaintext). When you use the HTTP API or the Amazon Web Services
            CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextRequest">
            <summary>
            Container for the parameters to the GenerateDataKeyPairWithoutPlaintext operation.
            Returns a unique asymmetric data key pair for use outside of KMS. This operation returns
            a plaintext public key and a copy of the private key that is encrypted under the symmetric
            encryption KMS key you specify. Unlike <a>GenerateDataKeyPair</a>, this operation
            does not return a plaintext private key. The bytes in the keys are random; they are
            not related to the caller or to the KMS key that is used to encrypt the private key.
            
            
             
            <para>
            You can use the public key that <c>GenerateDataKeyPairWithoutPlaintext</c> returns
            to encrypt data or verify a signature outside of KMS. Then, store the encrypted private
            key with the data. When you are ready to decrypt data or sign a message, you can use
            the <a>Decrypt</a> operation to decrypt the encrypted private key.
            </para>
             
            <para>
            To generate a data key pair, you must specify a symmetric encryption KMS key to encrypt
            the private key in a data key pair. You cannot use an asymmetric KMS key or a KMS
            key in a custom key store. To get the type and origin of your KMS key, use the <a>DescribeKey</a>
            operation. 
            </para>
             
            <para>
            Use the <c>KeyPairSpec</c> parameter to choose an RSA or Elliptic Curve (ECC) data
            key pair. In China Regions, you can also choose an SM2 data key pair. KMS recommends
            that you use ECC key pairs for signing, and use RSA and SM2 key pairs for either encryption
            or signing, but not both. However, KMS cannot enforce any restrictions on the use
            of data key pairs outside of KMS.
            </para>
             
            <para>
             <c>GenerateDataKeyPairWithoutPlaintext</c> returns a unique data key pair for each
            request. The bytes in the key are not related to the caller or KMS key that is used
            to encrypt the private key. The public key is a DER-encoded X.509 SubjectPublicKeyInfo,
            as specified in <a href="https://tools.ietf.org/html/rfc5280">RFC 5280</a>.
            </para>
             
            <para>
            You can use an optional encryption context to add additional security to the encryption
            operation. If you specify an <c>EncryptionContext</c>, you must specify the same encryption
            context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise,
            the request to decrypt fails with an <c>InvalidCiphertextException</c>. For more information,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateDataKeyPairWithoutPlaintext</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextRequest.EncryptionContext">
            <summary>
            Gets and sets the property EncryptionContext. 
            <para>
            Specifies the encryption context that will be used when encrypting the private key
            in the data key pair.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            An <i>encryption context</i> is a collection of non-secret key-value pairs that represent
            additional authenticated data. When you use an encryption context to encrypt data,
            you must specify the same (an exact case-sensitive match) encryption context to decrypt
            the data. An encryption context is supported only on operations with symmetric encryption
            KMS keys. On operations with symmetric encryption KMS keys, an encryption context
            is optional, but it is strongly recommended.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Specifies the symmetric encryption KMS key that encrypts the private key in the data
            key pair. You cannot specify an asymmetric KMS key or a KMS key in a custom key store.
            To get the type and origin of your KMS key, use the <a>DescribeKey</a> operation.
            
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextRequest.KeyPairSpec">
            <summary>
            Gets and sets the property KeyPairSpec. 
            <para>
            Determines the type of data key pair that is generated.
            </para>
             
            <para>
            The KMS rule that restricts the use of asymmetric RSA and SM2 KMS keys to encrypt
            and decrypt or to sign and verify (but not both), and the rule that permits you to
            use ECC KMS keys only to sign and verify, are not effective on data key pairs, which
            are used outside of KMS. The SM2 key spec is only available in China Regions.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextResponse">
            <summary>
            This is the response object from the GenerateDataKeyPairWithoutPlaintext operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the KMS key that encrypted the private key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextResponse.KeyPairSpec">
            <summary>
            Gets and sets the property KeyPairSpec. 
            <para>
            The type of data key pair that was generated.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextResponse.PrivateKeyCiphertextBlob">
            <summary>
            Gets and sets the property PrivateKeyCiphertextBlob. 
            <para>
            The encrypted copy of the private key. When you use the HTTP API or the Amazon Web
            Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextResponse.PublicKey">
            <summary>
            Gets and sets the property PublicKey. 
            <para>
            The public key (in plaintext). When you use the HTTP API or the Amazon Web Services
            CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GenerateDataKeyRequest">
            <summary>
            Container for the parameters to the GenerateDataKey operation.
            Returns a unique symmetric data key for use outside of KMS. This operation returns
            a plaintext copy of the data key and a copy that is encrypted under a symmetric encryption
            KMS key that you specify. The bytes in the plaintext key are random; they are not
            related to the caller or the KMS key. You can use the plaintext key to encrypt your
            data outside of KMS and store the encrypted data key with the encrypted data.
            
             
            <para>
            To generate a data key, specify the symmetric encryption KMS key that will be used
            to encrypt the data key. You cannot use an asymmetric KMS key to encrypt data keys.
            To get the type of your KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            You must also specify the length of the data key. Use either the <c>KeySpec</c> or
            <c>NumberOfBytes</c> parameters (but not both). For 128-bit and 256-bit data keys,
            use the <c>KeySpec</c> parameter.
            </para>
             
            <para>
            To generate a 128-bit SM4 data key (China Regions only), specify a <c>KeySpec</c>
            value of <c>AES_128</c> or a <c>NumberOfBytes</c> value of <c>16</c>. The symmetric
            encryption key used in China Regions to encrypt your data key is an SM4 encryption
            key.
            </para>
             
            <para>
            To get only an encrypted copy of the data key, use <a>GenerateDataKeyWithoutPlaintext</a>.
            To generate an asymmetric data key pair, use the <a>GenerateDataKeyPair</a> or <a>GenerateDataKeyPairWithoutPlaintext</a>
            operation. To get a cryptographically secure random byte string, use <a>GenerateRandom</a>.
            </para>
             
            <para>
            You can use an optional encryption context to add additional security to the encryption
            operation. If you specify an <c>EncryptionContext</c>, you must specify the same encryption
            context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise,
            the request to decrypt fails with an <c>InvalidCiphertextException</c>. For more information,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <c>GenerateDataKey</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>GenerateDataKey</c> for an Amazon Web Services Nitro enclave,
            use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. <c>GenerateDataKey</c>
            returns a copy of the data key encrypted under the specified KMS key, as usual. But
            instead of a plaintext copy of the data key, the response includes a copy of the data
            key encrypted under the public key from the attestation document (<c>CiphertextForRecipient</c>).
            For information about the interaction between KMS and Amazon Web Services Nitro Enclaves,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>..
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>How to use your data key</b> 
            </para>
             
            <para>
            We recommend that you use the following pattern to encrypt data locally in your application.
            You can write your own code or use a client-side encryption library, such as the <a
            href="https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/">Amazon Web
            Services Encryption SDK</a>, the <a href="https://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/">Amazon
            DynamoDB Encryption Client</a>, or <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html">Amazon
            S3 client-side encryption</a> to do these tasks for you.
            </para>
             
            <para>
            To encrypt data outside of KMS:
            </para>
             <ol> <li> 
            <para>
            Use the <c>GenerateDataKey</c> operation to get a data key.
            </para>
             </li> <li> 
            <para>
            Use the plaintext data key (in the <c>Plaintext</c> field of the response) to encrypt
            your data outside of KMS. Then erase the plaintext data key from memory.
            </para>
             </li> <li> 
            <para>
            Store the encrypted data key (in the <c>CiphertextBlob</c> field of the response)
            with the encrypted data.
            </para>
             </li> </ol> 
            <para>
            To decrypt data outside of KMS:
            </para>
             <ol> <li> 
            <para>
            Use the <a>Decrypt</a> operation to decrypt the encrypted data key. The operation
            returns a plaintext copy of the data key.
            </para>
             </li> <li> 
            <para>
            Use the plaintext data key to decrypt data outside of KMS, then erase the plaintext
            data key from memory.
            </para>
             </li> </ol> 
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateDataKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPairWithoutPlaintext</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyRequest.EncryptionContext">
            <summary>
            Gets and sets the property EncryptionContext. 
            <para>
            Specifies the encryption context that will be used when encrypting the data key.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            An <i>encryption context</i> is a collection of non-secret key-value pairs that represent
            additional authenticated data. When you use an encryption context to encrypt data,
            you must specify the same (an exact case-sensitive match) encryption context to decrypt
            the data. An encryption context is supported only on operations with symmetric encryption
            KMS keys. On operations with symmetric encryption KMS keys, an encryption context
            is optional, but it is strongly recommended.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Specifies the symmetric encryption KMS key that encrypts the data key. You cannot
            specify an asymmetric KMS key or a KMS key in a custom key store. To get the type
            and origin of your KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyRequest.KeySpec">
            <summary>
            Gets and sets the property KeySpec. 
            <para>
            Specifies the length of the data key. Use <c>AES_128</c> to generate a 128-bit symmetric
            key, or <c>AES_256</c> to generate a 256-bit symmetric key.
            </para>
             
            <para>
            You must specify either the <c>KeySpec</c> or the <c>NumberOfBytes</c> parameter (but
            not both) in every <c>GenerateDataKey</c> request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyRequest.NumberOfBytes">
            <summary>
            Gets and sets the property NumberOfBytes. 
            <para>
            Specifies the length of the data key in bytes. For example, use the value 64 to generate
            a 512-bit data key (64 bytes is 512 bits). For 128-bit (16-byte) and 256-bit (32-byte)
            data keys, use the <c>KeySpec</c> parameter.
            </para>
             
            <para>
            You must specify either the <c>KeySpec</c> or the <c>NumberOfBytes</c> parameter (but
            not both) in every <c>GenerateDataKey</c> request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyRequest.Recipient">
            <summary>
            Gets and sets the property Recipient. 
            <para>
            A signed <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave-how.html#term-attestdoc">attestation
            document</a> from an Amazon Web Services Nitro enclave and the encryption algorithm
            to use with the enclave's public key. The only valid encryption algorithm is <c>RSAES_OAEP_SHA_256</c>.
            
            </para>
             
            <para>
            This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves.
            To include this parameter, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK.
            </para>
             
            <para>
            When you use this parameter, instead of returning the plaintext data key, KMS encrypts
            the plaintext data key under the public key in the attestation document, and returns
            the resulting ciphertext in the <c>CiphertextForRecipient</c> field in the response.
            This ciphertext can be decrypted only with the private key in the enclave. The <c>CiphertextBlob</c>
            field in the response contains a copy of the data key encrypted under the KMS key
            specified by the <c>KeyId</c> parameter. The <c>Plaintext</c> field in the response
            is null or empty.
            </para>
             
            <para>
            For information about the interaction between KMS and Amazon Web Services Nitro Enclaves,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GenerateDataKeyResponse">
            <summary>
            This is the response object from the GenerateDataKey operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyResponse.CiphertextBlob">
            <summary>
            Gets and sets the property CiphertextBlob. 
            <para>
            The encrypted copy of the data key. When you use the HTTP API or the Amazon Web Services
            CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyResponse.CiphertextForRecipient">
            <summary>
            Gets and sets the property CiphertextForRecipient. 
            <para>
            The plaintext data key encrypted with the public key from the Nitro enclave. This
            ciphertext can be decrypted only by using a private key in the Nitro enclave. 
            </para>
             
            <para>
            This field is included in the response only when the <c>Recipient</c> parameter in
            the request includes a valid attestation document from an Amazon Web Services Nitro
            enclave. For information about the interaction between KMS and Amazon Web Services
            Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the KMS key that encrypted the data key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyResponse.Plaintext">
            <summary>
            Gets and sets the property Plaintext. 
            <para>
            The plaintext data key. When you use the HTTP API or the Amazon Web Services CLI,
            the value is Base64-encoded. Otherwise, it is not Base64-encoded. Use this data key
            to encrypt your data outside of KMS. Then, remove it from memory as soon as possible.
            </para>
             
            <para>
            If the response includes the <c>CiphertextForRecipient</c> field, the <c>Plaintext</c>
            field is null or empty.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextRequest">
            <summary>
            Container for the parameters to the GenerateDataKeyWithoutPlaintext operation.
            Returns a unique symmetric data key for use outside of KMS. This operation returns
            a data key that is encrypted under a symmetric encryption KMS key that you specify.
            The bytes in the key are random; they are not related to the caller or to the KMS
            key.
            
             
            <para>
             <c>GenerateDataKeyWithoutPlaintext</c> is identical to the <a>GenerateDataKey</a>
            operation except that it does not return a plaintext copy of the data key. 
            </para>
             
            <para>
            This operation is useful for systems that need to encrypt data at some point, but
            not immediately. When you need to encrypt the data, you call the <a>Decrypt</a> operation
            on the encrypted copy of the key.
            </para>
             
            <para>
            It's also useful in distributed systems with different levels of trust. For example,
            you might store encrypted data in containers. One component of your system creates
            new containers and stores an encrypted data key with each container. Then, a different
            component puts the data into the containers. That component first decrypts the data
            key, uses the plaintext data key to encrypt data, puts the encrypted data into the
            container, and then destroys the plaintext data key. In this system, the component
            that creates the containers never sees the plaintext data key.
            </para>
             
            <para>
            To request an asymmetric data key pair, use the <a>GenerateDataKeyPair</a> or <a>GenerateDataKeyPairWithoutPlaintext</a>
            operations.
            </para>
             
            <para>
            To generate a data key, you must specify the symmetric encryption KMS key that is
            used to encrypt the data key. You cannot use an asymmetric KMS key or a key in a custom
            key store to generate a data key. To get the type of your KMS key, use the <a>DescribeKey</a>
            operation.
            </para>
             
            <para>
            You must also specify the length of the data key. Use either the <c>KeySpec</c> or
            <c>NumberOfBytes</c> parameters (but not both). For 128-bit and 256-bit data keys,
            use the <c>KeySpec</c> parameter.
            </para>
             
            <para>
            To generate an SM4 data key (China Regions only), specify a <c>KeySpec</c> value of
            <c>AES_128</c> or <c>NumberOfBytes</c> value of <c>16</c>. The symmetric encryption
            key used in China Regions to encrypt your data key is an SM4 encryption key.
            </para>
             
            <para>
            If the operation succeeds, you will find the encrypted copy of the data key in the
            <c>CiphertextBlob</c> field.
            </para>
             
            <para>
            You can use an optional encryption context to add additional security to the encryption
            operation. If you specify an <c>EncryptionContext</c>, you must specify the same encryption
            context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise,
            the request to decrypt fails with an <c>InvalidCiphertextException</c>. For more information,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            Context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateDataKeyWithoutPlaintext</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPairWithoutPlaintext</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextRequest.EncryptionContext">
            <summary>
            Gets and sets the property EncryptionContext. 
            <para>
            Specifies the encryption context that will be used when encrypting the data key.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            An <i>encryption context</i> is a collection of non-secret key-value pairs that represent
            additional authenticated data. When you use an encryption context to encrypt data,
            you must specify the same (an exact case-sensitive match) encryption context to decrypt
            the data. An encryption context is supported only on operations with symmetric encryption
            KMS keys. On operations with symmetric encryption KMS keys, an encryption context
            is optional, but it is strongly recommended.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Specifies the symmetric encryption KMS key that encrypts the data key. You cannot
            specify an asymmetric KMS key or a KMS key in a custom key store. To get the type
            and origin of your KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextRequest.KeySpec">
            <summary>
            Gets and sets the property KeySpec. 
            <para>
            The length of the data key. Use <c>AES_128</c> to generate a 128-bit symmetric key,
            or <c>AES_256</c> to generate a 256-bit symmetric key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextRequest.NumberOfBytes">
            <summary>
            Gets and sets the property NumberOfBytes. 
            <para>
            The length of the data key in bytes. For example, use the value 64 to generate a 512-bit
            data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric
            keys), we recommend that you use the <c>KeySpec</c> field instead of this one.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextResponse">
            <summary>
            This is the response object from the GenerateDataKeyWithoutPlaintext operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextResponse.CiphertextBlob">
            <summary>
            Gets and sets the property CiphertextBlob. 
            <para>
            The encrypted data key. When you use the HTTP API or the Amazon Web Services CLI,
            the value is Base64-encoded. Otherwise, it is not Base64-encoded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the KMS key that encrypted the data key.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GenerateMacRequest">
            <summary>
            Container for the parameters to the GenerateMac operation.
            Generates a hash-based message authentication code (HMAC) for a message using an HMAC
            KMS key and a MAC algorithm that the key supports. HMAC KMS keys and the HMAC algorithms
            that KMS uses conform to industry standards defined in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC
            2104</a>.
            
             
            <para>
            You can use value that GenerateMac returns in the <a>VerifyMac</a> operation to demonstrate
            that the original message has not changed. Also, because a secret key is used to create
            the hash, you can verify that the party that generated the hash has the required secret
            key. You can also use the raw result to implement HMAC-based algorithms such as key
            derivation functions. This operation is part of KMS support for HMAC KMS keys. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            keys in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             <note> 
            <para>
            Best practices recommend that you limit the time during which any signing mechanism,
            including an HMAC, is effective. This deters an attack where the actor uses a signed
            message to establish validity repeatedly or long after the message is superseded.
            HMAC tags do not include a timestamp, but you can include a timestamp in the token
            or message to help you detect when its time to refresh the HMAC. 
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateMac</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>VerifyMac</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateMacRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateMacRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateMacRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The HMAC KMS key to use in the operation. The MAC algorithm computes the HMAC for
            the message and the key as described in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC
            2104</a>.
            </para>
             
            <para>
            To identify an HMAC KMS key, use the <a>DescribeKey</a> operation and see the <c>KeySpec</c>
            field in the response.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateMacRequest.MacAlgorithm">
            <summary>
            Gets and sets the property MacAlgorithm. 
            <para>
            The MAC algorithm used in the operation.
            </para>
             
            <para>
             The algorithm must be compatible with the HMAC KMS key that you specify. To find
            the MAC algorithms that your HMAC KMS key supports, use the <a>DescribeKey</a> operation
            and see the <c>MacAlgorithms</c> field in the <c>DescribeKey</c> response.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateMacRequest.Message">
            <summary>
            Gets and sets the property Message. 
            <para>
            The message to be hashed. Specify a message of up to 4,096 bytes. 
            </para>
             
            <para>
             <c>GenerateMac</c> and <a>VerifyMac</a> do not provide special handling for message
            digests. If you generate an HMAC for a hash digest of a message, you must verify the
            HMAC of the same hash digest.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GenerateMacResponse">
            <summary>
            This is the response object from the GenerateMac operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateMacResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The HMAC KMS key used in the operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateMacResponse.Mac">
            <summary>
            Gets and sets the property Mac. 
            <para>
            The hash-based message authentication code (HMAC) that was generated for the specified
            message, HMAC KMS key, and MAC algorithm.
            </para>
             
            <para>
            This is the standard, raw HMAC defined in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC
            2104</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateMacResponse.MacAlgorithm">
            <summary>
            Gets and sets the property MacAlgorithm. 
            <para>
            The MAC algorithm that was used to generate the HMAC.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GenerateRandomRequest">
            <summary>
            Container for the parameters to the GenerateRandom operation.
            Returns a random byte string that is cryptographically secure.
            
             
            <para>
            You must use the <c>NumberOfBytes</c> parameter to specify the length of the random
            byte string. There is no default value for string length.
            </para>
             
            <para>
            By default, the random byte string is generated in KMS. To generate the byte string
            in the CloudHSM cluster associated with an CloudHSM key store, use the <c>CustomKeyStoreId</c>
            parameter.
            </para>
             
            <para>
             <c>GenerateRandom</c> also supports <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave.html">Amazon
            Web Services Nitro Enclaves</a>, which provide an isolated compute environment in
            Amazon EC2. To call <c>GenerateRandom</c> for a Nitro enclave, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK. Use the <c>Recipient</c>
            parameter to provide the attestation document for the enclave. Instead of plaintext
            bytes, the response includes the plaintext bytes encrypted under the public key from
            the attestation document (<c>CiphertextForRecipient</c>).For information about the
            interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            For more information about entropy and random number generation, see <a href="https://docs.aws.amazon.com/kms/latest/cryptographic-details/">Key
            Management Service Cryptographic Details</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Not applicable. <c>GenerateRandom</c> does not use any
            account-specific resources, such as KMS keys.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GenerateRandom</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateRandomRequest.CustomKeyStoreId">
            <summary>
            Gets and sets the property CustomKeyStoreId. 
            <para>
            Generates the random byte string in the CloudHSM cluster that is associated with the
            specified CloudHSM key store. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            </para>
             
            <para>
            External key store IDs are not valid for this parameter. If you specify the ID of
            an external key store, <c>GenerateRandom</c> throws an <c>UnsupportedOperationException</c>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateRandomRequest.NumberOfBytes">
            <summary>
            Gets and sets the property NumberOfBytes. 
            <para>
            The length of the random byte string. This parameter is required.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateRandomRequest.Recipient">
            <summary>
            Gets and sets the property Recipient. 
            <para>
            A signed <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitro-enclave-how.html#term-attestdoc">attestation
            document</a> from an Amazon Web Services Nitro enclave and the encryption algorithm
            to use with the enclave's public key. The only valid encryption algorithm is <c>RSAES_OAEP_SHA_256</c>.
            
            </para>
             
            <para>
            This parameter only supports attestation documents for Amazon Web Services Nitro Enclaves.
            To include this parameter, use the <a href="https://docs.aws.amazon.com/enclaves/latest/user/developing-applications.html#sdk">Amazon
            Web Services Nitro Enclaves SDK</a> or any Amazon Web Services SDK.
            </para>
             
            <para>
            When you use this parameter, instead of returning plaintext bytes, KMS encrypts the
            plaintext bytes under the public key in the attestation document, and returns the
            resulting ciphertext in the <c>CiphertextForRecipient</c> field in the response. This
            ciphertext can be decrypted only with the private key in the enclave. The <c>Plaintext</c>
            field in the response is null or empty.
            </para>
             
            <para>
            For information about the interaction between KMS and Amazon Web Services Nitro Enclaves,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GenerateRandomResponse">
            <summary>
            This is the response object from the GenerateRandom operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateRandomResponse.CiphertextForRecipient">
            <summary>
            Gets and sets the property CiphertextForRecipient. 
            <para>
            The plaintext random bytes encrypted with the public key from the Nitro enclave. This
            ciphertext can be decrypted only by using a private key in the Nitro enclave. 
            </para>
             
            <para>
            This field is included in the response only when the <c>Recipient</c> parameter in
            the request includes a valid attestation document from an Amazon Web Services Nitro
            enclave. For information about the interaction between KMS and Amazon Web Services
            Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GenerateRandomResponse.Plaintext">
            <summary>
            Gets and sets the property Plaintext. 
            <para>
            The random byte string. When you use the HTTP API or the Amazon Web Services CLI,
            the value is Base64-encoded. Otherwise, it is not Base64-encoded.
            </para>
             
            <para>
            If the response includes the <c>CiphertextForRecipient</c> field, the <c>Plaintext</c>
            field is null or empty.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GetKeyPolicyRequest">
            <summary>
            Container for the parameters to the GetKeyPolicy operation.
            Gets a key policy attached to the specified KMS key.
            
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetKeyPolicy</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html">PutKeyPolicy</a>
            
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetKeyPolicyRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Gets the key policy for the specified KMS key.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetKeyPolicyRequest.PolicyName">
            <summary>
            Gets and sets the property PolicyName. 
            <para>
            Specifies the name of the key policy. If no policy name is specified, the default
            value is <c>default</c>. The only valid name is <c>default</c>. To get the names of
            key policies, use <a>ListKeyPolicies</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GetKeyPolicyResponse">
            <summary>
            This is the response object from the GetKeyPolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetKeyPolicyResponse.Policy">
            <summary>
            Gets and sets the property Policy. 
            <para>
            A key policy document in JSON format.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetKeyPolicyResponse.PolicyName">
            <summary>
            Gets and sets the property PolicyName. 
            <para>
            The name of the key policy. The only valid value is <c>default</c>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GetKeyRotationStatusRequest">
            <summary>
            Container for the parameters to the GetKeyRotationStatus operation.
            Provides detailed information about the rotation status for a KMS key, including whether
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            rotation of the key material</a> is enabled for the specified KMS key, the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotation-period">rotation
            period</a>, and the next scheduled rotation date.
            
             
            <para>
            Automatic key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot enable automatic rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To enable or disable automatic rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, set the property on the primary key..
            </para>
             
            <para>
            You can enable (<a>EnableKeyRotation</a>) and disable automatic rotation (<a>DisableKeyRotation</a>)
            of the key material in customer managed KMS keys. Key material rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a> is not configurable. KMS always rotates the key
            material in Amazon Web Services managed KMS keys every year. The key rotation status
            for Amazon Web Services managed KMS keys is always <c>true</c>.
            </para>
             
            <para>
            You can perform on-demand (<a>RotateKeyOnDemand</a>) rotation of the key material
            in customer managed KMS keys, regardless of whether or not automatic key rotation
            is enabled. You can use GetKeyRotationStatus to identify the date and time that an
            in progress on-demand rotation was initiated. You can use <a>ListKeyRotations</a>
            to view the details of completed rotations.
            </para>
             <note> 
            <para>
            In May 2022, KMS changed the rotation schedule for Amazon Web Services managed keys
            from every three years to every year. For details, see <a>EnableKeyRotation</a>.
            </para>
             </note> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             <ul> <li> 
            <para>
            Disabled: The key rotation status does not change when you disable a KMS key. However,
            while the KMS key is disabled, KMS does not rotate the key material. When you re-enable
            the KMS key, rotation resumes. If the key material in the re-enabled KMS key hasn't
            been rotated in one year, KMS rotates it immediately, and every year thereafter. If
            it's been less than a year since the key material in the re-enabled KMS key was rotated,
            the KMS key resumes its prior rotation schedule.
            </para>
             </li> <li> 
            <para>
            Pending deletion: While a KMS key is pending deletion, its key rotation status is
            <c>false</c> and KMS does not rotate the key material. If you cancel the deletion,
            the original key rotation status returns to <c>true</c>.
            </para>
             </li> </ul> 
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetKeyRotationStatus</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetKeyRotationStatusRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Gets the rotation status for the specified KMS key.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GetKeyRotationStatusResponse">
            <summary>
            This is the response object from the GetKeyRotationStatus operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetKeyRotationStatusResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the specified symmetric encryption KMS key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetKeyRotationStatusResponse.KeyRotationEnabled">
            <summary>
            Gets and sets the property KeyRotationEnabled. 
            <para>
            A Boolean value that specifies whether key rotation is enabled.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetKeyRotationStatusResponse.NextRotationDate">
            <summary>
            Gets and sets the property NextRotationDate. 
            <para>
            The next date that KMS will automatically rotate the key material.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetKeyRotationStatusResponse.OnDemandRotationStartDate">
            <summary>
            Gets and sets the property OnDemandRotationStartDate. 
            <para>
            Identifies the date and time that an in progress on-demand rotation was initiated.
            </para>
             
            <para>
            The KMS API follows an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">eventual
            consistency</a> model due to the distributed nature of the system. As a result, there
            might be a slight delay between initiating on-demand key rotation and the rotation's
            completion. Once the on-demand rotation is complete, use <a>ListKeyRotations</a> to
            view the details of the on-demand rotation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetKeyRotationStatusResponse.RotationPeriodInDays">
            <summary>
            Gets and sets the property RotationPeriodInDays. 
            <para>
            The number of days between each automatic rotation. The default value is 365 days.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GetParametersForImportRequest">
            <summary>
            Container for the parameters to the GetParametersForImport operation.
            Returns the public key and an import token you need to import or reimport key material
            for a KMS key. 
            
             
            <para>
            By default, KMS keys are created with key material that KMS generates. This operation
            supports <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            key material</a>, an advanced feature that lets you generate and import the cryptographic
            key material for a KMS key. For more information about importing key material into
            KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            key material</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            Before calling <c>GetParametersForImport</c>, use the <a>CreateKey</a> operation with
            an <c>Origin</c> value of <c>EXTERNAL</c> to create a KMS key with no key material.
            You can import key material for a symmetric encryption KMS key, HMAC KMS key, asymmetric
            encryption KMS key, or asymmetric signing KMS key. You can also import key material
            into a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">multi-Region
            key</a> of any supported type. However, you can't import key material into a KMS key
            in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. You can also use <c>GetParametersForImport</c> to get a public key
            and import token to <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html#reimport-key-material">reimport
            the original key material</a> into a KMS key whose key material expired or was deleted.
            </para>
             
            <para>
             <c>GetParametersForImport</c> returns the items that you need to import your key
            material.
            </para>
             <ul> <li> 
            <para>
            The public key (or "wrapping key") of an RSA key pair that KMS generates.
            </para>
             
            <para>
            You will use this public key to encrypt ("wrap") your key material while it's in transit
            to KMS. 
            </para>
             </li> <li> 
            <para>
            A import token that ensures that KMS can decrypt your key material and associate it
            with the correct KMS key.
            </para>
             </li> </ul> 
            <para>
            The public key and its import token are permanently linked and must be used together.
            Each public key and import token set is valid for 24 hours. The expiration date and
            time appear in the <c>ParametersValidTo</c> field in the <c>GetParametersForImport</c>
            response. You cannot use an expired public key or import token in an <a>ImportKeyMaterial</a>
            request. If your key and token expire, send another <c>GetParametersForImport</c>
            request.
            </para>
             
            <para>
             <c>GetParametersForImport</c> requires the following information:
            </para>
             <ul> <li> 
            <para>
            The key ID of the KMS key for which you are importing the key material.
            </para>
             </li> <li> 
            <para>
            The key spec of the public key ("wrapping key") that you will use to encrypt your
            key material during import.
            </para>
             </li> <li> 
            <para>
            The wrapping algorithm that you will use with the public key to encrypt your key material.
            </para>
             </li> </ul> 
            <para>
            You can use the same or a different public key spec and wrapping algorithm each time
            you import or reimport the same key material. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetParametersForImport</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ImportKeyMaterial</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteImportedKeyMaterial</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetParametersForImportRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The identifier of the KMS key that will be associated with the imported key material.
            The <c>Origin</c> of the KMS key must be <c>EXTERNAL</c>.
            </para>
             
            <para>
            All KMS key types are supported, including multi-Region keys. However, you cannot
            import key material into a KMS key in a custom key store.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetParametersForImportRequest.WrappingAlgorithm">
            <summary>
            Gets and sets the property WrappingAlgorithm. 
            <para>
            The algorithm you will use with the RSA public key (<c>PublicKey</c>) in the response
            to protect your key material during import. For more information, see <a href="kms/latest/developerguide/importing-keys-get-public-key-and-token.html#select-wrapping-algorithm">Select
            a wrapping algorithm</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            For RSA_AES wrapping algorithms, you encrypt your key material with an AES key that
            you generate, then encrypt your AES key with the RSA public key from KMS. For RSAES
            wrapping algorithms, you encrypt your key material directly with the RSA public key
            from KMS.
            </para>
             
            <para>
            The wrapping algorithms that you can use depend on the type of key material that you
            are importing. To import an RSA private key, you must use an RSA_AES wrapping algorithm.
            </para>
             <ul> <li> 
            <para>
             <b>RSA_AES_KEY_WRAP_SHA_256</b> — Supported for wrapping RSA and ECC key material.
            </para>
             </li> <li> 
            <para>
             <b>RSA_AES_KEY_WRAP_SHA_1</b> — Supported for wrapping RSA and ECC key material.
            </para>
             </li> <li> 
            <para>
             <b>RSAES_OAEP_SHA_256</b> — Supported for all types of key material, except RSA key
            material (private key).
            </para>
             
            <para>
            You cannot use the RSAES_OAEP_SHA_256 wrapping algorithm with the RSA_2048 wrapping
            key spec to wrap ECC_NIST_P521 key material.
            </para>
             </li> <li> 
            <para>
             <b>RSAES_OAEP_SHA_1</b> — Supported for all types of key material, except RSA key
            material (private key).
            </para>
             
            <para>
            You cannot use the RSAES_OAEP_SHA_1 wrapping algorithm with the RSA_2048 wrapping
            key spec to wrap ECC_NIST_P521 key material.
            </para>
             </li> <li> 
            <para>
             <b>RSAES_PKCS1_V1_5</b> (Deprecated) — As of October 10, 2023, KMS does not support
            the RSAES_PKCS1_V1_5 wrapping algorithm.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetParametersForImportRequest.WrappingKeySpec">
            <summary>
            Gets and sets the property WrappingKeySpec. 
            <para>
            The type of RSA public key to return in the response. You will use this wrapping key
            with the specified wrapping algorithm to protect your key material during import.
            
            </para>
             
            <para>
            Use the longest RSA wrapping key that is practical. 
            </para>
             
            <para>
            You cannot use an RSA_2048 public key to directly wrap an ECC_NIST_P521 private key.
            Instead, use an RSA_AES wrapping algorithm or choose a longer RSA public key.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GetParametersForImportResponse">
            <summary>
            This is the response object from the GetParametersForImport operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetParametersForImportResponse.ImportToken">
            <summary>
            Gets and sets the property ImportToken. 
            <para>
            The import token to send in a subsequent <a>ImportKeyMaterial</a> request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetParametersForImportResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the KMS key to use in a subsequent <a>ImportKeyMaterial</a> request. This
            is the same KMS key specified in the <c>GetParametersForImport</c> request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetParametersForImportResponse.ParametersValidTo">
            <summary>
            Gets and sets the property ParametersValidTo. 
            <para>
            The time at which the import token and public key are no longer valid. After this
            time, you cannot use them to make an <a>ImportKeyMaterial</a> request and you must
            send another <c>GetParametersForImport</c> request to get new ones.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetParametersForImportResponse.PublicKey">
            <summary>
            Gets and sets the property PublicKey. 
            <para>
            The public key to use to encrypt the key material before importing it with <a>ImportKeyMaterial</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GetPublicKeyRequest">
            <summary>
            Container for the parameters to the GetPublicKey operation.
            Returns the public key of an asymmetric KMS key. Unlike the private key of a asymmetric
            KMS key, which never leaves KMS unencrypted, callers with <c>kms:GetPublicKey</c>
            permission can download the public key of an asymmetric KMS key. You can share the
            public key to allow others to encrypt messages and verify signatures outside of KMS.
            For information about asymmetric KMS keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            
             
            <para>
            You do not need to download the public key. Instead, you can use the public key within
            KMS by calling the <a>Encrypt</a>, <a>ReEncrypt</a>, or <a>Verify</a> operations with
            the identifier of an asymmetric KMS key. When you use the public key within KMS, you
            benefit from the authentication, authorization, and logging that are part of every
            KMS operation. You also reduce of risk of encrypting data that cannot be decrypted.
            These features are not effective outside of KMS.
            </para>
             
            <para>
            To help you use the public key safely outside of KMS, <c>GetPublicKey</c> returns
            important information about the public key in the response, including:
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_GetPublicKey.html#KMS-GetPublicKey-response-KeySpec">KeySpec</a>:
            The type of key material in the public key, such as <c>RSA_4096</c> or <c>ECC_NIST_P521</c>.
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_GetPublicKey.html#KMS-GetPublicKey-response-KeyUsage">KeyUsage</a>:
            Whether the key is used for encryption, signing, or generating a shared secret.
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_GetPublicKey.html#KMS-GetPublicKey-response-EncryptionAlgorithms">EncryptionAlgorithms</a>
            or <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_GetPublicKey.html#KMS-GetPublicKey-response-SigningAlgorithms">SigningAlgorithms</a>:
            A list of the encryption algorithms or the signing algorithms for the key.
            </para>
             </li> </ul> 
            <para>
            Although KMS cannot enforce these restrictions on external operations, it is crucial
            that you use this information to prevent the public key from being used improperly.
            For example, you can prevent a public signing key from being used encrypt data, or
            prevent a public key from being used with an encryption algorithm that is not supported
            by KMS. You can also avoid errors, such as using the wrong signing algorithm in a
            verification operation.
            </para>
             
            <para>
            To verify a signature outside of KMS with an SM2 public key (China Regions only),
            you must specify the distinguishing ID. By default, KMS uses <c>1234567812345678</c>
            as the distinguishing ID. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-sm-offline-verification">Offline
            verification with SM2 key pairs</a>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:GetPublicKey</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>CreateKey</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetPublicKeyRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetPublicKeyRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the asymmetric KMS key that includes the public key.
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GetPublicKeyResponse">
            <summary>
            This is the response object from the GetPublicKey operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetPublicKeyResponse.CustomerMasterKeySpec">
            <summary>
            Gets and sets the property CustomerMasterKeySpec. 
            <para>
            Instead, use the <c>KeySpec</c> field in the <c>GetPublicKey</c> response.
            </para>
             
            <para>
            The <c>KeySpec</c> and <c>CustomerMasterKeySpec</c> fields have the same value. We
            recommend that you use the <c>KeySpec</c> field in your code. However, to avoid breaking
            changes, KMS supports both fields.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetPublicKeyResponse.EncryptionAlgorithms">
            <summary>
            Gets and sets the property EncryptionAlgorithms. 
            <para>
            The encryption algorithms that KMS supports for this key. 
            </para>
             
            <para>
            This information is critical. If a public key encrypts data outside of KMS by using
            an unsupported encryption algorithm, the ciphertext cannot be decrypted. 
            </para>
             
            <para>
            This field appears in the response only when the <c>KeyUsage</c> of the public key
            is <c>ENCRYPT_DECRYPT</c>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetPublicKeyResponse.KeyAgreementAlgorithms">
            <summary>
            Gets and sets the property KeyAgreementAlgorithms. 
            <para>
            The key agreement algorithm used to derive a shared secret.[BUGBUG]
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetPublicKeyResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the asymmetric KMS key from which the public key was downloaded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetPublicKeyResponse.KeySpec">
            <summary>
            Gets and sets the property KeySpec. 
            <para>
            The type of the of the public key that was downloaded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetPublicKeyResponse.KeyUsage">
            <summary>
            Gets and sets the property KeyUsage. 
            <para>
            The permitted use of the public key. Valid values for asymmetric key pairs are <c>ENCRYPT_DECRYPT</c>,
            <c>SIGN_VERIFY</c>, and <c>KEY_AGREEMENT</c>. 
            </para>
             
            <para>
            This information is critical. For example, if a public key with <c>SIGN_VERIFY</c>
            key usage encrypts data outside of KMS, the ciphertext cannot be decrypted. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetPublicKeyResponse.PublicKey">
            <summary>
            Gets and sets the property PublicKey. 
            <para>
            The exported public key. 
            </para>
             
            <para>
            The value is a DER-encoded X.509 public key, also known as <c>SubjectPublicKeyInfo</c>
            (SPKI), as defined in <a href="https://tools.ietf.org/html/rfc5280">RFC 5280</a>.
            When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded.
            Otherwise, it is not Base64-encoded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GetPublicKeyResponse.SigningAlgorithms">
            <summary>
            Gets and sets the property SigningAlgorithms. 
            <para>
            The signing algorithms that KMS supports for this key.
            </para>
             
            <para>
            This field appears in the response only when the <c>KeyUsage</c> of the public key
            is <c>SIGN_VERIFY</c>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GrantConstraints">
            <summary>
            Use this structure to allow <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a> in the grant only when the operation request includes the specified
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">encryption
            context</a>. 
            
             
            <para>
            KMS applies the grant constraints only to cryptographic operations that support an
            encryption context, that is, all cryptographic operations with a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-concepts.html#symmetric-cmks">symmetric
            KMS key</a>. Grant constraints are not applied to operations that do not support an
            encryption context, such as cryptographic operations with asymmetric KMS keys and
            management operations, such as <a>DescribeKey</a> or <a>RetireGrant</a>.
            </para>
             <important> 
            <para>
            In a cryptographic operation, the encryption context in the decryption operation must
            be an exact, case-sensitive match for the keys and values in the encryption context
            of the encryption operation. Only the order of the pairs can vary.
            </para>
             
            <para>
            However, in a grant constraint, the key in each key-value pair is not case sensitive,
            but the value is case sensitive.
            </para>
             
            <para>
            To avoid confusion, do not use multiple encryption context pairs that differ only
            by case. To require a fully case-sensitive encryption context, use the <c>kms:EncryptionContext:</c>
            and <c>kms:EncryptionContextKeys</c> conditions in an IAM or key policy. For details,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-context">kms:EncryptionContext:</a>
            in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </important>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GrantConstraints.EncryptionContextEquals">
            <summary>
            Gets and sets the property EncryptionContextEquals. 
            <para>
            A list of key-value pairs that must match the encryption context in the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operation</a> request. The grant allows the operation only when the encryption context
            in the request is the same as the encryption context specified in this constraint.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GrantConstraints.EncryptionContextSubset">
            <summary>
            Gets and sets the property EncryptionContextSubset. 
            <para>
            A list of key-value pairs that must be included in the encryption context of the <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operation</a> request. The grant allows the cryptographic operation only when the
            encryption context in the request includes the key-value pairs specified in this constraint,
            although it can include additional key-value pairs.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.GrantListEntry">
            <summary>
            Contains information about a grant.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GrantListEntry.Constraints">
            <summary>
            Gets and sets the property Constraints. 
            <para>
            A list of key-value pairs that must be present in the encryption context of certain
            subsequent operations that the grant allows.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GrantListEntry.CreationDate">
            <summary>
            Gets and sets the property CreationDate. 
            <para>
            The date and time when the grant was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GrantListEntry.GranteePrincipal">
            <summary>
            Gets and sets the property GranteePrincipal. 
            <para>
            The identity that gets the permissions in the grant.
            </para>
             
            <para>
            The <c>GranteePrincipal</c> field in the <c>ListGrants</c> response usually contains
            the user or role designated as the grantee principal in the grant. However, when the
            grantee principal in the grant is an Amazon Web Services service, the <c>GranteePrincipal</c>
            field contains the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services">service
            principal</a>, which might represent several different grantee principals.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GrantListEntry.GrantId">
            <summary>
            Gets and sets the property GrantId. 
            <para>
            The unique identifier for the grant.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GrantListEntry.IssuingAccount">
            <summary>
            Gets and sets the property IssuingAccount. 
            <para>
            The Amazon Web Services account under which the grant was issued.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GrantListEntry.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The unique identifier for the KMS key to which the grant applies.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GrantListEntry.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The friendly name that identifies the grant. If a name was provided in the <a>CreateGrant</a>
            request, that name is returned. Otherwise this value is null.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GrantListEntry.Operations">
            <summary>
            Gets and sets the property Operations. 
            <para>
            The list of operations permitted by the grant.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.GrantListEntry.RetiringPrincipal">
            <summary>
            Gets and sets the property RetiringPrincipal. 
            <para>
            The principal that can retire the grant.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ImportKeyMaterialRequest">
            <summary>
            Container for the parameters to the ImportKeyMaterial operation.
            Imports or reimports key material into an existing KMS key that was created without
            key material. <c>ImportKeyMaterial</c> also sets the expiration model and expiration
            date of the imported key material.
            
             
            <para>
            By default, KMS keys are created with key material that KMS generates. This operation
            supports <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            key material</a>, an advanced feature that lets you generate and import the cryptographic
            key material for a KMS key. For more information about importing key material into
            KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">Importing
            key material</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            After you successfully import key material into a KMS key, you can <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html#reimport-key-material">reimport
            the same key material</a> into that KMS key, but you cannot import different key material.
            You might reimport key material to replace key material that expired or key material
            that you deleted. You might also reimport key material to change the expiration model
            or expiration date of the key material. 
            </para>
             
            <para>
            Each time you import key material into KMS, you can determine whether (<c>ExpirationModel</c>)
            and when (<c>ValidTo</c>) the key material expires. To change the expiration of your
            key material, you must import it again, either by calling <c>ImportKeyMaterial</c>
            or using the <a href="kms/latest/developerguide/importing-keys-import-key-material.html#importing-keys-import-key-material-console">import
            features</a> of the KMS console.
            </para>
             
            <para>
            Before calling <c>ImportKeyMaterial</c>:
            </para>
             <ul> <li> 
            <para>
            Create or identify a KMS key with no key material. The KMS key must have an <c>Origin</c>
            value of <c>EXTERNAL</c>, which indicates that the KMS key is designed for imported
            key material. 
            </para>
             
            <para>
            To create an new KMS key for imported key material, call the <a>CreateKey</a> operation
            with an <c>Origin</c> value of <c>EXTERNAL</c>. You can create a symmetric encryption
            KMS key, HMAC KMS key, asymmetric encryption KMS key, or asymmetric signing KMS key.
            You can also import key material into a <a href="kms/latest/developerguide/multi-region-keys-overview.html">multi-Region
            key</a> of any supported type. However, you can't import key material into a KMS key
            in a <a href="kms/latest/developerguide/custom-key-store-overview.html">custom key
            store</a>.
            </para>
             </li> <li> 
            <para>
            Use the <a>DescribeKey</a> operation to verify that the <c>KeyState</c> of the KMS
            key is <c>PendingImport</c>, which indicates that the KMS key has no key material.
            
            </para>
             
            <para>
            If you are reimporting the same key material into an existing KMS key, you might need
            to call the <a>DeleteImportedKeyMaterial</a> to delete its existing key material.
            </para>
             </li> <li> 
            <para>
            Call the <a>GetParametersForImport</a> operation to get a public key and import token
            set for importing key material. 
            </para>
             </li> <li> 
            <para>
            Use the public key in the <a>GetParametersForImport</a> response to encrypt your key
            material.
            </para>
             </li> </ul> 
            <para>
             Then, in an <c>ImportKeyMaterial</c> request, you submit your encrypted key material
            and import token. When calling this operation, you must specify the following values:
            </para>
             <ul> <li> 
            <para>
            The key ID or key ARN of the KMS key to associate with the imported key material.
            Its <c>Origin</c> must be <c>EXTERNAL</c> and its <c>KeyState</c> must be <c>PendingImport</c>.
            You cannot perform this operation on a KMS key in a <a href="kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>, or on a KMS key in a different Amazon Web Services account. To get
            the <c>Origin</c> and <c>KeyState</c> of a KMS key, call <a>DescribeKey</a>.
            </para>
             </li> <li> 
            <para>
            The encrypted key material. 
            </para>
             </li> <li> 
            <para>
            The import token that <a>GetParametersForImport</a> returned. You must use a public
            key and token from the same <c>GetParametersForImport</c> response.
            </para>
             </li> <li> 
            <para>
            Whether the key material expires (<c>ExpirationModel</c>) and, if so, when (<c>ValidTo</c>).
            For help with this choice, see <a href="https://docs.aws.amazon.com/en_us/kms/latest/developerguide/importing-keys.html#importing-keys-expiration">Setting
            an expiration time</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            If you set an expiration date, KMS deletes the key material from the KMS key on the
            specified date, making the KMS key unusable. To use the KMS key in cryptographic operations
            again, you must reimport the same key material. However, you can delete and reimport
            the key material at any time, including before the key material expires. Each time
            you reimport, you can eliminate or reset the expiration time.
            </para>
             </li> </ul> 
            <para>
            When this operation is successful, the key state of the KMS key changes from <c>PendingImport</c>
            to <c>Enabled</c>, and you can use the KMS key in cryptographic operations.
            </para>
             
            <para>
            If this operation fails, use the exception to help determine the problem. If the error
            is related to the key material, the import token, or wrapping key, use <a>GetParametersForImport</a>
            to get a new public key and import token for the KMS key and repeat the import procedure.
            For help, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html#importing-keys-overview">How
            To Import Key Material</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ImportKeyMaterial</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>DeleteImportedKeyMaterial</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetParametersForImport</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ImportKeyMaterialRequest.EncryptedKeyMaterial">
            <summary>
            Gets and sets the property EncryptedKeyMaterial. 
            <para>
            The encrypted key material to import. The key material must be encrypted under the
            public wrapping key that <a>GetParametersForImport</a> returned, using the wrapping
            algorithm that you specified in the same <c>GetParametersForImport</c> request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ImportKeyMaterialRequest.ExpirationModel">
            <summary>
            Gets and sets the property ExpirationModel. 
            <para>
            Specifies whether the key material expires. The default is <c>KEY_MATERIAL_EXPIRES</c>.
            For help with this choice, see <a href="https://docs.aws.amazon.com/en_us/kms/latest/developerguide/importing-keys.html#importing-keys-expiration">Setting
            an expiration time</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            When the value of <c>ExpirationModel</c> is <c>KEY_MATERIAL_EXPIRES</c>, you must
            specify a value for the <c>ValidTo</c> parameter. When value is <c>KEY_MATERIAL_DOES_NOT_EXPIRE</c>,
            you must omit the <c>ValidTo</c> parameter.
            </para>
             
            <para>
            You cannot change the <c>ExpirationModel</c> or <c>ValidTo</c> values for the current
            import after the request completes. To change either value, you must reimport the
            key material.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ImportKeyMaterialRequest.ImportToken">
            <summary>
            Gets and sets the property ImportToken. 
            <para>
            The import token that you received in the response to a previous <a>GetParametersForImport</a>
            request. It must be from the same response that contained the public key that you
            used to encrypt the key material.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ImportKeyMaterialRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The identifier of the KMS key that will be associated with the imported key material.
            This must be the same KMS key specified in the <c>KeyID</c> parameter of the corresponding
            <a>GetParametersForImport</a> request. The <c>Origin</c> of the KMS key must be <c>EXTERNAL</c>
            and its <c>KeyState</c> must be <c>PendingImport</c>. 
            </para>
             
            <para>
            The KMS key can be a symmetric encryption KMS key, HMAC KMS key, asymmetric encryption
            KMS key, or asymmetric signing KMS key, including a <a href="kms/latest/developerguide/multi-region-keys-overview.html">multi-Region
            key</a> of any supported type. You cannot perform this operation on a KMS key in a
            custom key store, or on a KMS key in a different Amazon Web Services account.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ImportKeyMaterialRequest.ValidTo">
            <summary>
            Gets and sets the property ValidTo. 
            <para>
            The date and time when the imported key material expires. This parameter is required
            when the value of the <c>ExpirationModel</c> parameter is <c>KEY_MATERIAL_EXPIRES</c>.
            Otherwise it is not valid.
            </para>
             
            <para>
            The value of this parameter must be a future date and time. The maximum value is 365
            days from the request date.
            </para>
             
            <para>
            When the key material expires, KMS deletes the key material from the KMS key. Without
            its key material, the KMS key is unusable. To use the KMS key in cryptographic operations,
            you must reimport the same key material.
            </para>
             
            <para>
            You cannot change the <c>ExpirationModel</c> or <c>ValidTo</c> values for the current
            import after the request completes. To change either value, you must delete (<a>DeleteImportedKeyMaterial</a>)
            and reimport the key material.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ImportKeyMaterialResponse">
            <summary>
            This is the response object from the ImportKeyMaterial operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.IncorrectKeyException">
            <summary>
            The request was rejected because the specified KMS key cannot decrypt the data. The
            <c>KeyId</c> in a <a>Decrypt</a> request and the <c>SourceKeyId</c> in a <a>ReEncrypt</a>
            request must identify the same KMS key that was used to encrypt the ciphertext.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectKeyException.#ctor(System.String)">
            <summary>
            Constructs a new IncorrectKeyException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of IncorrectKeyException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectKeyException.#ctor(System.Exception)">
            <summary>
            Construct instance of IncorrectKeyException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectKeyException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of IncorrectKeyException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectKeyException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of IncorrectKeyException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.IncorrectKeyMaterialException">
            <summary>
            The request was rejected because the key material in the request is, expired, invalid,
            or is not the same key material that was previously imported into this KMS key.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectKeyMaterialException.#ctor(System.String)">
            <summary>
            Constructs a new IncorrectKeyMaterialException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectKeyMaterialException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of IncorrectKeyMaterialException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectKeyMaterialException.#ctor(System.Exception)">
            <summary>
            Construct instance of IncorrectKeyMaterialException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectKeyMaterialException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of IncorrectKeyMaterialException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectKeyMaterialException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of IncorrectKeyMaterialException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.IncorrectTrustAnchorException">
            <summary>
            The request was rejected because the trust anchor certificate in the request to create
            an CloudHSM key store is not the trust anchor certificate for the specified CloudHSM
            cluster.
            
             
            <para>
            When you <a href="https://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html#sign-csr">initialize
            the CloudHSM cluster</a>, you create the trust anchor certificate and save it in the
            <c>customerCA.crt</c> file.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectTrustAnchorException.#ctor(System.String)">
            <summary>
            Constructs a new IncorrectTrustAnchorException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectTrustAnchorException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of IncorrectTrustAnchorException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectTrustAnchorException.#ctor(System.Exception)">
            <summary>
            Construct instance of IncorrectTrustAnchorException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectTrustAnchorException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of IncorrectTrustAnchorException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IncorrectTrustAnchorException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of IncorrectTrustAnchorException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.AliasListEntryUnmarshaller">
            <summary>
            Response Unmarshaller for AliasListEntry Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.AliasListEntryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KeyManagementService#Model#AliasListEntry,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.AliasListEntryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns>The unmarshalled object</returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.AliasListEntryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.AlreadyExistsExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for AlreadyExistsException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.AlreadyExistsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.AlreadyExistsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.AlreadyExistsExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CancelKeyDeletionRequestMarshaller">
            <summary>
            CancelKeyDeletion Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CancelKeyDeletionRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CancelKeyDeletionRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.CancelKeyDeletionRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CancelKeyDeletionRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CancelKeyDeletionResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CancelKeyDeletion operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CancelKeyDeletionResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CancelKeyDeletionResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CancelKeyDeletionResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterInUseExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for CloudHsmClusterInUseException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterInUseExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterInvalidConfigurationExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for CloudHsmClusterInvalidConfigurationException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterInvalidConfigurationExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterInvalidConfigurationExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterInvalidConfigurationExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotActiveExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for CloudHsmClusterNotActiveException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotActiveExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotActiveExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotActiveExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for CloudHsmClusterNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotRelatedExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for CloudHsmClusterNotRelatedException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotRelatedExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotRelatedExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CloudHsmClusterNotRelatedExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConflictExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ConflictException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConflictExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConflictExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConflictExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConnectCustomKeyStoreRequestMarshaller">
            <summary>
            ConnectCustomKeyStore Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConnectCustomKeyStoreRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConnectCustomKeyStoreRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.ConnectCustomKeyStoreRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConnectCustomKeyStoreRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConnectCustomKeyStoreResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ConnectCustomKeyStore operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConnectCustomKeyStoreResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConnectCustomKeyStoreResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ConnectCustomKeyStoreResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateAliasRequestMarshaller">
            <summary>
            CreateAlias Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateAliasRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateAliasRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.CreateAliasRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateAliasRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateAliasResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateAlias operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateAliasResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateAliasResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateAliasResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateCustomKeyStoreRequestMarshaller">
            <summary>
            CreateCustomKeyStore Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateCustomKeyStoreRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateCustomKeyStoreRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.CreateCustomKeyStoreRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateCustomKeyStoreRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateCustomKeyStoreResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateCustomKeyStore operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateCustomKeyStoreResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateCustomKeyStoreResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateCustomKeyStoreResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateGrantRequestMarshaller">
            <summary>
            CreateGrant Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateGrantRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateGrantRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.CreateGrantRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateGrantRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateGrantResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateGrant operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateGrantResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateGrantResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateGrantResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateKeyRequestMarshaller">
            <summary>
            CreateKey Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateKeyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateKeyRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.CreateKeyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateKeyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateKeyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateKey operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateKeyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateKeyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CreateKeyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreHasCMKsExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for CustomKeyStoreHasCMKsException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreHasCMKsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreHasCMKsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreHasCMKsExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreInvalidStateExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for CustomKeyStoreInvalidStateException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreInvalidStateExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreInvalidStateExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreInvalidStateExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreNameInUseExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for CustomKeyStoreNameInUseException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreNameInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreNameInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreNameInUseExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for CustomKeyStoreNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoreNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoresListEntryUnmarshaller">
            <summary>
            Response Unmarshaller for CustomKeyStoresListEntry Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoresListEntryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KeyManagementService#Model#CustomKeyStoresListEntry,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoresListEntryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns>The unmarshalled object</returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.CustomKeyStoresListEntryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DecryptRequestMarshaller">
            <summary>
            Decrypt Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DecryptRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DecryptRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.DecryptRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DecryptRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DecryptResponseUnmarshaller">
            <summary>
            Response Unmarshaller for Decrypt operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DecryptResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DecryptResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DecryptResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteAliasRequestMarshaller">
            <summary>
            DeleteAlias Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteAliasRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteAliasRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.DeleteAliasRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteAliasRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteAliasResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteAlias operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteAliasResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteAliasResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteAliasResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteCustomKeyStoreRequestMarshaller">
            <summary>
            DeleteCustomKeyStore Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteCustomKeyStoreRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteCustomKeyStoreRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.DeleteCustomKeyStoreRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteCustomKeyStoreRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteCustomKeyStoreResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteCustomKeyStore operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteCustomKeyStoreResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteCustomKeyStoreResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteCustomKeyStoreResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteImportedKeyMaterialRequestMarshaller">
            <summary>
            DeleteImportedKeyMaterial Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteImportedKeyMaterialRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteImportedKeyMaterialRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.DeleteImportedKeyMaterialRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteImportedKeyMaterialRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteImportedKeyMaterialResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteImportedKeyMaterial operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteImportedKeyMaterialResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteImportedKeyMaterialResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeleteImportedKeyMaterialResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DependencyTimeoutExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for DependencyTimeoutException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DependencyTimeoutExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DependencyTimeoutExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DependencyTimeoutExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeriveSharedSecretRequestMarshaller">
            <summary>
            DeriveSharedSecret Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeriveSharedSecretRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeriveSharedSecretRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.DeriveSharedSecretRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeriveSharedSecretRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeriveSharedSecretResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeriveSharedSecret operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeriveSharedSecretResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeriveSharedSecretResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DeriveSharedSecretResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeCustomKeyStoresRequestMarshaller">
            <summary>
            DescribeCustomKeyStores Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeCustomKeyStoresRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeCustomKeyStoresRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.DescribeCustomKeyStoresRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeCustomKeyStoresRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeCustomKeyStoresResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeCustomKeyStores operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeCustomKeyStoresResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeCustomKeyStoresResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeCustomKeyStoresResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeKeyRequestMarshaller">
            <summary>
            DescribeKey Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeKeyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeKeyRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.DescribeKeyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeKeyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeKeyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeKey operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeKeyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeKeyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DescribeKeyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisabledExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for DisabledException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisabledExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisabledExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisabledExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRequestMarshaller">
            <summary>
            DisableKey Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.DisableKeyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DisableKey operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRotationRequestMarshaller">
            <summary>
            DisableKeyRotation Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRotationRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRotationRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.DisableKeyRotationRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRotationRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRotationResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DisableKeyRotation operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRotationResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRotationResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisableKeyRotationResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisconnectCustomKeyStoreRequestMarshaller">
            <summary>
            DisconnectCustomKeyStore Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisconnectCustomKeyStoreRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisconnectCustomKeyStoreRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.DisconnectCustomKeyStoreRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisconnectCustomKeyStoreRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisconnectCustomKeyStoreResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DisconnectCustomKeyStore operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisconnectCustomKeyStoreResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisconnectCustomKeyStoreResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DisconnectCustomKeyStoreResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DryRunOperationExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for DryRunOperationException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DryRunOperationExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DryRunOperationExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.DryRunOperationExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRequestMarshaller">
            <summary>
            EnableKey Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.EnableKeyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for EnableKey operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRotationRequestMarshaller">
            <summary>
            EnableKeyRotation Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRotationRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRotationRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.EnableKeyRotationRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRotationRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRotationResponseUnmarshaller">
            <summary>
            Response Unmarshaller for EnableKeyRotation operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRotationResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRotationResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EnableKeyRotationResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EncryptRequestMarshaller">
            <summary>
            Encrypt Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EncryptRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EncryptRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.EncryptRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EncryptRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EncryptResponseUnmarshaller">
            <summary>
            Response Unmarshaller for Encrypt operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EncryptResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EncryptResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.EncryptResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ExpiredImportTokenExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ExpiredImportTokenException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ExpiredImportTokenExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ExpiredImportTokenExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ExpiredImportTokenExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairRequestMarshaller">
            <summary>
            GenerateDataKeyPair Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.GenerateDataKeyPairRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GenerateDataKeyPair operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairWithoutPlaintextRequestMarshaller">
            <summary>
            GenerateDataKeyPairWithoutPlaintext Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairWithoutPlaintextRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairWithoutPlaintextRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.GenerateDataKeyPairWithoutPlaintextRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairWithoutPlaintextRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairWithoutPlaintextResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GenerateDataKeyPairWithoutPlaintext operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairWithoutPlaintextResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairWithoutPlaintextResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyPairWithoutPlaintextResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyRequestMarshaller">
            <summary>
            GenerateDataKey Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.GenerateDataKeyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GenerateDataKey operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyWithoutPlaintextRequestMarshaller">
            <summary>
            GenerateDataKeyWithoutPlaintext Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyWithoutPlaintextRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyWithoutPlaintextRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.GenerateDataKeyWithoutPlaintextRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyWithoutPlaintextRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyWithoutPlaintextResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GenerateDataKeyWithoutPlaintext operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyWithoutPlaintextResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyWithoutPlaintextResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateDataKeyWithoutPlaintextResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateMacRequestMarshaller">
            <summary>
            GenerateMac Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateMacRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateMacRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.GenerateMacRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateMacRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateMacResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GenerateMac operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateMacResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateMacResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateMacResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateRandomRequestMarshaller">
            <summary>
            GenerateRandom Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateRandomRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateRandomRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.GenerateRandomRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateRandomRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateRandomResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GenerateRandom operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateRandomResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateRandomResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GenerateRandomResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyPolicyRequestMarshaller">
            <summary>
            GetKeyPolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyPolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyPolicyRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.GetKeyPolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyPolicyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyPolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetKeyPolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyPolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyPolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyPolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyRotationStatusRequestMarshaller">
            <summary>
            GetKeyRotationStatus Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyRotationStatusRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyRotationStatusRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.GetKeyRotationStatusRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyRotationStatusRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyRotationStatusResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetKeyRotationStatus operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyRotationStatusResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyRotationStatusResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetKeyRotationStatusResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetParametersForImportRequestMarshaller">
            <summary>
            GetParametersForImport Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetParametersForImportRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetParametersForImportRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.GetParametersForImportRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetParametersForImportRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetParametersForImportResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetParametersForImport operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetParametersForImportResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetParametersForImportResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetParametersForImportResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetPublicKeyRequestMarshaller">
            <summary>
            GetPublicKey Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetPublicKeyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetPublicKeyRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.GetPublicKeyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetPublicKeyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetPublicKeyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetPublicKey operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetPublicKeyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetPublicKeyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GetPublicKeyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantConstraintsMarshaller">
            <summary>
            GrantConstraints Marshaller
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantConstraintsMarshaller.Marshall(Amazon.KeyManagementService.Model.GrantConstraints,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantConstraintsMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantConstraintsUnmarshaller">
            <summary>
            Response Unmarshaller for GrantConstraints Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantConstraintsUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KeyManagementService#Model#GrantConstraints,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantConstraintsUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns>The unmarshalled object</returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantConstraintsUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantListEntryUnmarshaller">
            <summary>
            Response Unmarshaller for GrantListEntry Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantListEntryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KeyManagementService#Model#GrantListEntry,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantListEntryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns>The unmarshalled object</returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.GrantListEntryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ImportKeyMaterialRequestMarshaller">
            <summary>
            ImportKeyMaterial Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ImportKeyMaterialRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ImportKeyMaterialRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.ImportKeyMaterialRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ImportKeyMaterialRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ImportKeyMaterialResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ImportKeyMaterial operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ImportKeyMaterialResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ImportKeyMaterialResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ImportKeyMaterialResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectKeyExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for IncorrectKeyException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectKeyExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectKeyExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectKeyExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectKeyMaterialExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for IncorrectKeyMaterialException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectKeyMaterialExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectKeyMaterialExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectKeyMaterialExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectTrustAnchorExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for IncorrectTrustAnchorException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectTrustAnchorExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectTrustAnchorExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.IncorrectTrustAnchorExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidAliasNameExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidAliasNameException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidAliasNameExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidAliasNameExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidAliasNameExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidArnExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidArnException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidArnExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidArnExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidArnExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidCiphertextExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidCiphertextException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidCiphertextExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidCiphertextExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidCiphertextExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidGrantIdExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidGrantIdException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidGrantIdExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidGrantIdExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidGrantIdExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidGrantTokenExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidGrantTokenException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidGrantTokenExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidGrantTokenExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidGrantTokenExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidImportTokenExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidImportTokenException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidImportTokenExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidImportTokenExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidImportTokenExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidKeyUsageExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidKeyUsageException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidKeyUsageExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidKeyUsageExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidKeyUsageExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidMarkerExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidMarkerException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidMarkerExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidMarkerExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.InvalidMarkerExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyListEntryUnmarshaller">
            <summary>
            Response Unmarshaller for KeyListEntry Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyListEntryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KeyManagementService#Model#KeyListEntry,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyListEntryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns>The unmarshalled object</returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyListEntryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyMetadataUnmarshaller">
            <summary>
            Response Unmarshaller for KeyMetadata Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyMetadataUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KeyManagementService#Model#KeyMetadata,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyMetadataUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns>The unmarshalled object</returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyMetadataUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyUnavailableExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for KeyUnavailableException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyUnavailableExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyUnavailableExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KeyUnavailableExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInternalExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for KMSInternalException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInternalExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInternalExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInternalExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidMacExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for KMSInvalidMacException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidMacExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidMacExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidMacExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidSignatureExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for KMSInvalidSignatureException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidSignatureExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidSignatureExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidSignatureExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidStateExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for KMSInvalidStateException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidStateExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidStateExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.KMSInvalidStateExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for LimitExceededException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListAliasesRequestMarshaller">
            <summary>
            ListAliases Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListAliasesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListAliasesRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.ListAliasesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListAliasesRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListAliasesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListAliases operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListAliasesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListAliasesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListAliasesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListGrantsRequestMarshaller">
            <summary>
            ListGrants Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListGrantsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListGrantsRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.ListGrantsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListGrantsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListGrantsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListGrants operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListGrantsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListGrantsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListGrantsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyPoliciesRequestMarshaller">
            <summary>
            ListKeyPolicies Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyPoliciesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyPoliciesRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.ListKeyPoliciesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyPoliciesRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyPoliciesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListKeyPolicies operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyPoliciesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyPoliciesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyPoliciesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyRotationsRequestMarshaller">
            <summary>
            ListKeyRotations Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyRotationsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyRotationsRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.ListKeyRotationsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyRotationsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyRotationsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListKeyRotations operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyRotationsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyRotationsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeyRotationsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeysRequestMarshaller">
            <summary>
            ListKeys Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeysRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeysRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.ListKeysRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeysRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeysResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListKeys operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeysResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeysResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListKeysResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListResourceTagsRequestMarshaller">
            <summary>
            ListResourceTags Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListResourceTagsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListResourceTagsRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.ListResourceTagsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListResourceTagsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListResourceTagsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListResourceTags operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListResourceTagsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListResourceTagsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListResourceTagsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListRetirableGrantsRequestMarshaller">
            <summary>
            ListRetirableGrants Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListRetirableGrantsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListRetirableGrantsRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.ListRetirableGrantsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListRetirableGrantsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListRetirableGrantsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListRetirableGrants operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListRetirableGrantsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListRetirableGrantsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ListRetirableGrantsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MalformedPolicyDocumentExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for MalformedPolicyDocumentException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MalformedPolicyDocumentExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MalformedPolicyDocumentExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MalformedPolicyDocumentExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MultiRegionConfigurationUnmarshaller">
            <summary>
            Response Unmarshaller for MultiRegionConfiguration Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MultiRegionConfigurationUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KeyManagementService#Model#MultiRegionConfiguration,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MultiRegionConfigurationUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns>The unmarshalled object</returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MultiRegionConfigurationUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MultiRegionKeyUnmarshaller">
            <summary>
            Response Unmarshaller for MultiRegionKey Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MultiRegionKeyUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KeyManagementService#Model#MultiRegionKey,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MultiRegionKeyUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns>The unmarshalled object</returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.MultiRegionKeyUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.NotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for NotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.NotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.NotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.NotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.PutKeyPolicyRequestMarshaller">
            <summary>
            PutKeyPolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.PutKeyPolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.PutKeyPolicyRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.PutKeyPolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.PutKeyPolicyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.PutKeyPolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutKeyPolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.PutKeyPolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.PutKeyPolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.PutKeyPolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RecipientInfoMarshaller">
            <summary>
            RecipientInfo Marshaller
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RecipientInfoMarshaller.Marshall(Amazon.KeyManagementService.Model.RecipientInfo,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RecipientInfoMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReEncryptRequestMarshaller">
            <summary>
            ReEncrypt Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReEncryptRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReEncryptRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.ReEncryptRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReEncryptRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReEncryptResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ReEncrypt operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReEncryptResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReEncryptResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReEncryptResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReplicateKeyRequestMarshaller">
            <summary>
            ReplicateKey Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReplicateKeyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReplicateKeyRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.ReplicateKeyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReplicateKeyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReplicateKeyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ReplicateKey operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReplicateKeyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReplicateKeyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ReplicateKeyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RetireGrantRequestMarshaller">
            <summary>
            RetireGrant Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RetireGrantRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RetireGrantRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.RetireGrantRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RetireGrantRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RetireGrantResponseUnmarshaller">
            <summary>
            Response Unmarshaller for RetireGrant operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RetireGrantResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RetireGrantResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RetireGrantResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RevokeGrantRequestMarshaller">
            <summary>
            RevokeGrant Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RevokeGrantRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RevokeGrantRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.RevokeGrantRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RevokeGrantRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RevokeGrantResponseUnmarshaller">
            <summary>
            Response Unmarshaller for RevokeGrant operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RevokeGrantResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RevokeGrantResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RevokeGrantResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotateKeyOnDemandRequestMarshaller">
            <summary>
            RotateKeyOnDemand Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotateKeyOnDemandRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotateKeyOnDemandRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.RotateKeyOnDemandRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotateKeyOnDemandRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotateKeyOnDemandResponseUnmarshaller">
            <summary>
            Response Unmarshaller for RotateKeyOnDemand operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotateKeyOnDemandResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotateKeyOnDemandResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotateKeyOnDemandResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotationsListEntryUnmarshaller">
            <summary>
            Response Unmarshaller for RotationsListEntry Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotationsListEntryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KeyManagementService#Model#RotationsListEntry,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotationsListEntryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns>The unmarshalled object</returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.RotationsListEntryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ScheduleKeyDeletionRequestMarshaller">
            <summary>
            ScheduleKeyDeletion Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ScheduleKeyDeletionRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ScheduleKeyDeletionRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.ScheduleKeyDeletionRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ScheduleKeyDeletionRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ScheduleKeyDeletionResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ScheduleKeyDeletion operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ScheduleKeyDeletionResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ScheduleKeyDeletionResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.ScheduleKeyDeletionResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.SignRequestMarshaller">
            <summary>
            Sign Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.SignRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.SignRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.SignRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.SignRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.SignResponseUnmarshaller">
            <summary>
            Response Unmarshaller for Sign operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.SignResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.SignResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.SignResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for TagException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagMarshaller">
            <summary>
            Tag Marshaller
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagMarshaller.Marshall(Amazon.KeyManagementService.Model.Tag,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller">
            <summary>
            TagResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.TagResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for TagResource operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagUnmarshaller">
            <summary>
            Response Unmarshaller for Tag Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KeyManagementService#Model#Tag,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns>The unmarshalled object</returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.TagUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UnsupportedOperationExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for UnsupportedOperationException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UnsupportedOperationExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UnsupportedOperationExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UnsupportedOperationExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller">
            <summary>
            UntagResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.UntagResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UntagResource operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateAliasRequestMarshaller">
            <summary>
            UpdateAlias Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateAliasRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateAliasRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.UpdateAliasRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateAliasRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateAliasResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UpdateAlias operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateAliasResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateAliasResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateAliasResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateCustomKeyStoreRequestMarshaller">
            <summary>
            UpdateCustomKeyStore Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateCustomKeyStoreRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateCustomKeyStoreRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateCustomKeyStoreRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateCustomKeyStoreResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UpdateCustomKeyStore operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateCustomKeyStoreResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateCustomKeyStoreResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateCustomKeyStoreResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateKeyDescriptionRequestMarshaller">
            <summary>
            UpdateKeyDescription Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateKeyDescriptionRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateKeyDescriptionRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.UpdateKeyDescriptionRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateKeyDescriptionRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateKeyDescriptionResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UpdateKeyDescription operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateKeyDescriptionResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateKeyDescriptionResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdateKeyDescriptionResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdatePrimaryRegionRequestMarshaller">
            <summary>
            UpdatePrimaryRegion Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdatePrimaryRegionRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdatePrimaryRegionRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.UpdatePrimaryRegionRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdatePrimaryRegionRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdatePrimaryRegionResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UpdatePrimaryRegion operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdatePrimaryRegionResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdatePrimaryRegionResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.UpdatePrimaryRegionResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyMacRequestMarshaller">
            <summary>
            VerifyMac Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyMacRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyMacRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.VerifyMacRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyMacRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyMacResponseUnmarshaller">
            <summary>
            Response Unmarshaller for VerifyMac operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyMacResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyMacResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyMacResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyRequestMarshaller">
            <summary>
            Verify Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyRequestMarshaller.Marshall(Amazon.KeyManagementService.Model.VerifyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for Verify operation
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.VerifyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyAlreadyInUseExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for XksKeyAlreadyInUseException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyAlreadyInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyAlreadyInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyAlreadyInUseExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyConfigurationTypeUnmarshaller">
            <summary>
            Response Unmarshaller for XksKeyConfigurationType Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyConfigurationTypeUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KeyManagementService#Model#XksKeyConfigurationType,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyConfigurationTypeUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns>The unmarshalled object</returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyConfigurationTypeUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyInvalidConfigurationExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for XksKeyInvalidConfigurationException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyInvalidConfigurationExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyInvalidConfigurationExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyInvalidConfigurationExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for XksKeyNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksKeyNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyAuthenticationCredentialTypeMarshaller">
            <summary>
            XksProxyAuthenticationCredentialType Marshaller
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyAuthenticationCredentialTypeMarshaller.Marshall(Amazon.KeyManagementService.Model.XksProxyAuthenticationCredentialType,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyAuthenticationCredentialTypeMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyConfigurationTypeUnmarshaller">
            <summary>
            Response Unmarshaller for XksProxyConfigurationType Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyConfigurationTypeUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KeyManagementService#Model#XksProxyConfigurationType,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyConfigurationTypeUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns>The unmarshalled object</returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyConfigurationTypeUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyIncorrectAuthenticationCredentialExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for XksProxyIncorrectAuthenticationCredentialException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyIncorrectAuthenticationCredentialExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyIncorrectAuthenticationCredentialExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyIncorrectAuthenticationCredentialExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyInvalidConfigurationExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for XksProxyInvalidConfigurationException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyInvalidConfigurationExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyInvalidConfigurationExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyInvalidConfigurationExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyInvalidResponseExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for XksProxyInvalidResponseException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyInvalidResponseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyInvalidResponseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyInvalidResponseExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriEndpointInUseExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for XksProxyUriEndpointInUseException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriEndpointInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriEndpointInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriEndpointInUseExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriInUseExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for XksProxyUriInUseException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriInUseExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriUnreachableExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for XksProxyUriUnreachableException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriUnreachableExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriUnreachableExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyUriUnreachableExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceInUseExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for XksProxyVpcEndpointServiceInUseException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceInUseExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceInvalidConfigurationExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for XksProxyVpcEndpointServiceInvalidConfigurationException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceInvalidConfigurationExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceInvalidConfigurationExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceInvalidConfigurationExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for XksProxyVpcEndpointServiceNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Internal.MarshallTransformations.XksProxyVpcEndpointServiceNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KeyManagementService.Model.InvalidAliasNameException">
            <summary>
            The request was rejected because the specified alias name is not valid.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidAliasNameException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidAliasNameException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidAliasNameException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidAliasNameException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidAliasNameException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidAliasNameException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidAliasNameException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidAliasNameException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidAliasNameException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidAliasNameException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.InvalidArnException">
            <summary>
            The request was rejected because a specified ARN, or an ARN in a key policy, is not
            valid.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidArnException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidArnException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidArnException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidArnException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidArnException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidArnException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidArnException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidArnException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidArnException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidArnException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.InvalidCiphertextException">
            <summary>
            From the <a>Decrypt</a> or <a>ReEncrypt</a> operation, the request was rejected because
            the specified ciphertext, or additional authenticated data incorporated into the ciphertext,
            such as the encryption context, is corrupted, missing, or otherwise invalid.
            
             
            <para>
            From the <a>ImportKeyMaterial</a> operation, the request was rejected because KMS
            could not decrypt the encrypted (wrapped) key material. 
            </para>
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidCiphertextException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidCiphertextException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidCiphertextException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidCiphertextException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidCiphertextException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidCiphertextException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidCiphertextException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidCiphertextException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidCiphertextException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidCiphertextException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.InvalidGrantIdException">
            <summary>
            The request was rejected because the specified <c>GrantId</c> is not valid.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidGrantIdException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidGrantIdException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidGrantIdException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidGrantIdException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidGrantIdException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidGrantIdException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidGrantIdException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidGrantIdException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidGrantIdException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidGrantIdException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.InvalidGrantTokenException">
            <summary>
            The request was rejected because the specified grant token is not valid.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidGrantTokenException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidGrantTokenException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidGrantTokenException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidGrantTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidGrantTokenException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidGrantTokenException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidGrantTokenException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidGrantTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidGrantTokenException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidGrantTokenException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.InvalidImportTokenException">
            <summary>
            The request was rejected because the provided import token is invalid or is associated
            with a different KMS key.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidImportTokenException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidImportTokenException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidImportTokenException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidImportTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidImportTokenException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidImportTokenException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidImportTokenException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidImportTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidImportTokenException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidImportTokenException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.InvalidKeyUsageException">
            <summary>
            The request was rejected for one of the following reasons: 
            
             <ul> <li> 
            <para>
            The <c>KeyUsage</c> value of the KMS key is incompatible with the API operation.
            </para>
             </li> <li> 
            <para>
            The encryption algorithm or signing algorithm specified for the operation is incompatible
            with the type of key material in the KMS key <c>(KeySpec</c>).
            </para>
             </li> </ul> 
            <para>
            For encrypting, decrypting, re-encrypting, and generating data keys, the <c>KeyUsage</c>
            must be <c>ENCRYPT_DECRYPT</c>. For signing and verifying messages, the <c>KeyUsage</c>
            must be <c>SIGN_VERIFY</c>. For generating and verifying message authentication codes
            (MACs), the <c>KeyUsage</c> must be <c>GENERATE_VERIFY_MAC</c>. For deriving key agreement
            secrets, the <c>KeyUsage</c> must be <c>KEY_AGREEMENT</c>. To find the <c>KeyUsage</c>
            of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To find the encryption or signing algorithms supported for a particular KMS key, use
            the <a>DescribeKey</a> operation.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidKeyUsageException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidKeyUsageException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidKeyUsageException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidKeyUsageException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidKeyUsageException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidKeyUsageException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidKeyUsageException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidKeyUsageException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidKeyUsageException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidKeyUsageException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.InvalidMarkerException">
            <summary>
            The request was rejected because the marker that specifies where pagination should
            next begin is not valid.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidMarkerException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidMarkerException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidMarkerException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidMarkerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidMarkerException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidMarkerException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidMarkerException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidMarkerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.InvalidMarkerException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidMarkerException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.KeyListEntry">
            <summary>
            Contains information about each entry in the key list.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyListEntry.KeyArn">
            <summary>
            Gets and sets the property KeyArn. 
            <para>
            ARN of the key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyListEntry.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Unique identifier of the key.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.KeyMetadata">
            <summary>
            Contains metadata about a KMS key.
            
             
            <para>
            This data type is used as a response element for the <a>CreateKey</a>, <a>DescribeKey</a>,
            and <a>ReplicateKey</a> operations.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.Arn">
            <summary>
            Gets and sets the property Arn. 
            <para>
            The Amazon Resource Name (ARN) of the KMS key. For examples, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms">Key
            Management Service (KMS)</a> in the Example ARNs section of the <i>Amazon Web Services
            General Reference</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.AWSAccountId">
            <summary>
            Gets and sets the property AWSAccountId. 
            <para>
            The twelve-digit account ID of the Amazon Web Services account that owns the KMS key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.CloudHsmClusterId">
            <summary>
            Gets and sets the property CloudHsmClusterId. 
            <para>
            The cluster ID of the CloudHSM cluster that contains the key material for the KMS
            key. When you create a KMS key in an CloudHSM <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>, KMS creates the key material for the KMS key in the associated CloudHSM
            cluster. This field is present only when the KMS key is created in an CloudHSM key
            store.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.CreationDate">
            <summary>
            Gets and sets the property CreationDate. 
            <para>
            The date and time when the KMS key was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.CustomerMasterKeySpec">
            <summary>
            Gets and sets the property CustomerMasterKeySpec. 
            <para>
            Instead, use the <c>KeySpec</c> field.
            </para>
             
            <para>
            The <c>KeySpec</c> and <c>CustomerMasterKeySpec</c> fields have the same value. We
            recommend that you use the <c>KeySpec</c> field in your code. However, to avoid breaking
            changes, KMS supports both fields.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.CustomKeyStoreId">
            <summary>
            Gets and sets the property CustomKeyStoreId. 
            <para>
            A unique identifier for the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a> that contains the KMS key. This field is present only when the KMS key
            is created in a custom key store.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.DeletionDate">
            <summary>
            Gets and sets the property DeletionDate. 
            <para>
            The date and time after which KMS deletes this KMS key. This value is present only
            when the KMS key is scheduled for deletion, that is, when its <c>KeyState</c> is <c>PendingDeletion</c>.
            </para>
             
            <para>
            When the primary key in a multi-Region key is scheduled for deletion but still has
            replica keys, its key state is <c>PendingReplicaDeletion</c> and the length of its
            waiting period is displayed in the <c>PendingDeletionWindowInDays</c> field.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.Description">
            <summary>
            Gets and sets the property Description. 
            <para>
            The description of the KMS key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.Enabled">
            <summary>
            Gets and sets the property Enabled. 
            <para>
            Specifies whether the KMS key is enabled. When <c>KeyState</c> is <c>Enabled</c> this
            value is true, otherwise it is false.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.EncryptionAlgorithms">
            <summary>
            Gets and sets the property EncryptionAlgorithms. 
            <para>
            The encryption algorithms that the KMS key supports. You cannot use the KMS key with
            other encryption algorithms within KMS.
            </para>
             
            <para>
            This value is present only when the <c>KeyUsage</c> of the KMS key is <c>ENCRYPT_DECRYPT</c>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.ExpirationModel">
            <summary>
            Gets and sets the property ExpirationModel. 
            <para>
            Specifies whether the KMS key's key material expires. This value is present only when
            <c>Origin</c> is <c>EXTERNAL</c>, otherwise this value is omitted.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.KeyAgreementAlgorithms">
            <summary>
            Gets and sets the property KeyAgreementAlgorithms. 
            <para>
            The key agreement algorithm used to derive a shared secret. [BUGBUG]
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The globally unique identifier for the KMS key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.KeyManager">
            <summary>
            Gets and sets the property KeyManager. 
            <para>
            The manager of the KMS key. KMS keys in your Amazon Web Services account are either
            customer managed or Amazon Web Services managed. For more information about the difference,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#kms_keys">KMS
            keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.KeySpec">
            <summary>
            Gets and sets the property KeySpec. 
            <para>
            Describes the type of key material in the KMS key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.KeyState">
            <summary>
            Gets and sets the property KeyState. 
            <para>
            The current status of the KMS key.
            </para>
             
            <para>
            For more information about how key state affects the use of a KMS key, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.KeyUsage">
            <summary>
            Gets and sets the property KeyUsage. 
            <para>
            The <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations">cryptographic
            operations</a> for which you can use the KMS key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.MacAlgorithms">
            <summary>
            Gets and sets the property MacAlgorithms. 
            <para>
            The message authentication code (MAC) algorithm that the HMAC KMS key supports.
            </para>
             
            <para>
            This value is present only when the <c>KeyUsage</c> of the KMS key is <c>GENERATE_VERIFY_MAC</c>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.MultiRegion">
            <summary>
            Gets and sets the property MultiRegion. 
            <para>
            Indicates whether the KMS key is a multi-Region (<c>True</c>) or regional (<c>False</c>)
            key. This value is <c>True</c> for multi-Region primary and replica keys and <c>False</c>
            for regional KMS keys.
            </para>
             
            <para>
            For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.MultiRegionConfiguration">
            <summary>
            Gets and sets the property MultiRegionConfiguration. 
            <para>
            Lists the primary and replica keys in same multi-Region key. This field is present
            only when the value of the <c>MultiRegion</c> field is <c>True</c>.
            </para>
             
            <para>
            For more information about any listed KMS key, use the <a>DescribeKey</a> operation.
            </para>
             <ul> <li> 
            <para>
             <c>MultiRegionKeyType</c> indicates whether the KMS key is a <c>PRIMARY</c> or <c>REPLICA</c>
            key.
            </para>
             </li> <li> 
            <para>
             <c>PrimaryKey</c> displays the key ARN and Region of the primary key. This field
            displays the current KMS key if it is the primary key.
            </para>
             </li> <li> 
            <para>
             <c>ReplicaKeys</c> displays the key ARNs and Regions of all replica keys. This field
            includes the current KMS key if it is a replica key.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.Origin">
            <summary>
            Gets and sets the property Origin. 
            <para>
            The source of the key material for the KMS key. When this value is <c>AWS_KMS</c>,
            KMS created the key material. When this value is <c>EXTERNAL</c>, the key material
            was imported or the KMS key doesn't have any key material. When this value is <c>AWS_CLOUDHSM</c>,
            the key material was created in the CloudHSM cluster associated with a custom key
            store.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.PendingDeletionWindowInDays">
            <summary>
            Gets and sets the property PendingDeletionWindowInDays. 
            <para>
            The waiting period before the primary key in a multi-Region key is deleted. This waiting
            period begins when the last of its replica keys is deleted. This value is present
            only when the <c>KeyState</c> of the KMS key is <c>PendingReplicaDeletion</c>. That
            indicates that the KMS key is the primary key in a multi-Region key, it is scheduled
            for deletion, and it still has existing replica keys.
            </para>
             
            <para>
            When a single-Region KMS key or a multi-Region replica key is scheduled for deletion,
            its deletion date is displayed in the <c>DeletionDate</c> field. However, when the
            primary key in a multi-Region key is scheduled for deletion, its waiting period doesn't
            begin until all of its replica keys are deleted. This value displays that waiting
            period. When the last replica key in the multi-Region key is deleted, the <c>KeyState</c>
            of the scheduled primary key changes from <c>PendingReplicaDeletion</c> to <c>PendingDeletion</c>
            and the deletion date appears in the <c>DeletionDate</c> field.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.SigningAlgorithms">
            <summary>
            Gets and sets the property SigningAlgorithms. 
            <para>
            The signing algorithms that the KMS key supports. You cannot use the KMS key with
            other signing algorithms within KMS.
            </para>
             
            <para>
            This field appears only when the <c>KeyUsage</c> of the KMS key is <c>SIGN_VERIFY</c>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.ValidTo">
            <summary>
            Gets and sets the property ValidTo. 
            <para>
            The time at which the imported key material expires. When the key material expires,
            KMS deletes the key material and the KMS key becomes unusable. This value is present
            only for KMS keys whose <c>Origin</c> is <c>EXTERNAL</c> and whose <c>ExpirationModel</c>
            is <c>KEY_MATERIAL_EXPIRES</c>, otherwise this value is omitted.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.KeyMetadata.XksKeyConfiguration">
            <summary>
            Gets and sets the property XksKeyConfiguration. 
            <para>
            Information about the external key that is associated with a KMS key in an external
            key store.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key">External
            key</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.KeyUnavailableException">
            <summary>
            The request was rejected because the specified KMS key was not available. You can
            retry the request.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyUnavailableException.#ctor(System.String)">
            <summary>
            Constructs a new KeyUnavailableException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of KeyUnavailableException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyUnavailableException.#ctor(System.Exception)">
            <summary>
            Construct instance of KeyUnavailableException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyUnavailableException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KeyUnavailableException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyUnavailableException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KeyUnavailableException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.KMSInternalException">
            <summary>
            The request was rejected because an internal exception occurred. The request can be
            retried.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInternalException.#ctor(System.String)">
            <summary>
            Constructs a new KMSInternalException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInternalException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of KMSInternalException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInternalException.#ctor(System.Exception)">
            <summary>
            Construct instance of KMSInternalException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInternalException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSInternalException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInternalException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSInternalException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.KMSInvalidMacException">
            <summary>
            The request was rejected because the HMAC verification failed. HMAC verification fails
            when the HMAC computed by using the specified message, HMAC KMS key, and MAC algorithm
            does not match the HMAC specified in the request.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidMacException.#ctor(System.String)">
            <summary>
            Constructs a new KMSInvalidMacException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidMacException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of KMSInvalidMacException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidMacException.#ctor(System.Exception)">
            <summary>
            Construct instance of KMSInvalidMacException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidMacException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSInvalidMacException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidMacException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSInvalidMacException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.KMSInvalidSignatureException">
            <summary>
            The request was rejected because the signature verification failed. Signature verification
            fails when it cannot confirm that signature was produced by signing the specified
            message with the specified KMS key and signing algorithm.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidSignatureException.#ctor(System.String)">
            <summary>
            Constructs a new KMSInvalidSignatureException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidSignatureException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of KMSInvalidSignatureException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidSignatureException.#ctor(System.Exception)">
            <summary>
            Construct instance of KMSInvalidSignatureException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidSignatureException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSInvalidSignatureException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidSignatureException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSInvalidSignatureException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.KMSInvalidStateException">
            <summary>
            The request was rejected because the state of the specified resource is not valid
            for this request.
            
             
            <para>
            This exceptions means one of the following:
            </para>
             <ul> <li> 
            <para>
            The key state of the KMS key is not compatible with the operation. 
            </para>
             
            <para>
            To find the key state, use the <a>DescribeKey</a> operation. For more information
            about which key states are compatible with each KMS operation, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            </para>
             </li> <li> 
            <para>
            For cryptographic operations on KMS keys in custom key stores, this exception represents
            a general failure with many possible causes. To identify the cause, see the error
            message that accompanies the exception.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidStateException.#ctor(System.String)">
            <summary>
            Constructs a new KMSInvalidStateException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidStateException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of KMSInvalidStateException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidStateException.#ctor(System.Exception)">
            <summary>
            Construct instance of KMSInvalidStateException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidStateException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSInvalidStateException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KMSInvalidStateException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSInvalidStateException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.LimitExceededException">
            <summary>
            The request was rejected because a quota was exceeded. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html">Quotas</a>
            in the <i>Key Management Service Developer Guide</i>.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.LimitExceededException.#ctor(System.String)">
            <summary>
            Constructs a new LimitExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.LimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.LimitExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.LimitExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.LimitExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListAliasesRequest">
            <summary>
            Container for the parameters to the ListAliases operation.
            Gets a list of aliases in the caller's Amazon Web Services account and region. For
            more information about aliases, see <a>CreateAlias</a>.
            
             
            <para>
            By default, the <c>ListAliases</c> operation returns all aliases in the account and
            region. To get only the aliases associated with a particular KMS key, use the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
            The <c>ListAliases</c> response can include aliases that you created and associated
            with your customer managed keys, and aliases that Amazon Web Services created and
            associated with Amazon Web Services managed keys in your account. You can recognize
            Amazon Web Services aliases because their names have the format <c>aws/&lt;service-name&gt;</c>,
            such as <c>aws/dynamodb</c>.
            </para>
             
            <para>
            The response might also include aliases that have no <c>TargetKeyId</c> field. These
            are predefined aliases that Amazon Web Services has created but has not yet associated
            with a KMS key. Aliases that Amazon Web Services creates in your account, including
            predefined aliases, do not count against your <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#aliases-limit">KMS
            aliases quota</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. <c>ListAliases</c> does not return aliases in other
            Amazon Web Services accounts.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListAliases</a>
            (IAM policy)
            </para>
             
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdateAlias</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListAliasesRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Lists only aliases that are associated with the specified KMS key. Enter a KMS key
            in your Amazon Web Services account. 
            </para>
             
            <para>
            This parameter is optional. If you omit it, <c>ListAliases</c> returns all aliases
            in the account and Region.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListAliasesRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            Use this parameter to specify the maximum number of items to return. When this value
            is present, KMS does not return more than the specified number of items, but it might
            return fewer.
            </para>
             
            <para>
            This value is optional. If you include a value, it must be between 1 and 100, inclusive.
            If you do not include a value, it defaults to 50.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListAliasesRequest.Marker">
            <summary>
            Gets and sets the property Marker. 
            <para>
            Use this parameter in a subsequent request after you receive a response with truncated
            results. Set it to the value of <c>NextMarker</c> from the truncated response you
            just received.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListAliasesResponse">
            <summary>
            This is the response object from the ListAliases operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListAliasesResponse.Aliases">
            <summary>
            Gets and sets the property Aliases. 
            <para>
            A list of aliases.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListAliasesResponse.NextMarker">
            <summary>
            Gets and sets the property NextMarker. 
            <para>
            When <c>Truncated</c> is true, this element is present and contains the value to use
            for the <c>Marker</c> parameter in a subsequent request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListAliasesResponse.Truncated">
            <summary>
            Gets and sets the property Truncated. 
            <para>
            A flag that indicates whether there are more items in the list. When this value is
            true, the list in this response is truncated. To get more items, pass the value of
            the <c>NextMarker</c> element in this response to the <c>Marker</c> parameter in a
            subsequent request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListGrantsRequest">
            <summary>
            Container for the parameters to the ListGrants operation.
            Gets a list of all grants for the specified KMS key. 
            
             
            <para>
            You must specify the KMS key in all requests. You can filter the grant list by grant
            ID or grantee principal.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             <note> 
            <para>
            The <c>GranteePrincipal</c> field in the <c>ListGrants</c> response usually contains
            the user or role designated as the grantee principal in the grant. However, when the
            grantee principal in the grant is an Amazon Web Services service, the <c>GranteePrincipal</c>
            field contains the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services">service
            principal</a>, which might represent several different grantee principals.
            </para>
             </note> 
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListGrants</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListGrantsRequest.GranteePrincipal">
            <summary>
            Gets and sets the property GranteePrincipal. 
            <para>
            Returns only grants where the specified principal is the grantee principal for the
            grant.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListGrantsRequest.GrantId">
            <summary>
            Gets and sets the property GrantId. 
            <para>
            Returns only the grant with the specified grant ID. The grant ID uniquely identifies
            the grant. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListGrantsRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Returns only grants for the specified KMS key. This parameter is required.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListGrantsRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            Use this parameter to specify the maximum number of items to return. When this value
            is present, KMS does not return more than the specified number of items, but it might
            return fewer.
            </para>
             
            <para>
            This value is optional. If you include a value, it must be between 1 and 100, inclusive.
            If you do not include a value, it defaults to 50.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListGrantsRequest.Marker">
            <summary>
            Gets and sets the property Marker. 
            <para>
            Use this parameter in a subsequent request after you receive a response with truncated
            results. Set it to the value of <c>NextMarker</c> from the truncated response you
            just received.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListGrantsResponse">
            <summary>
            This is the response object from the ListGrants operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListGrantsResponse.Grants">
            <summary>
            Gets and sets the property Grants. 
            <para>
            A list of grants.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListGrantsResponse.NextMarker">
            <summary>
            Gets and sets the property NextMarker. 
            <para>
            When <c>Truncated</c> is true, this element is present and contains the value to use
            for the <c>Marker</c> parameter in a subsequent request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListGrantsResponse.Truncated">
            <summary>
            Gets and sets the property Truncated. 
            <para>
            A flag that indicates whether there are more items in the list. When this value is
            true, the list in this response is truncated. To get more items, pass the value of
            the <c>NextMarker</c> element in this response to the <c>Marker</c> parameter in a
            subsequent request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListKeyPoliciesRequest">
            <summary>
            Container for the parameters to the ListKeyPolicies operation.
            Gets the names of the key policies that are attached to a KMS key. This operation
            is designed to get policy names that you can use in a <a>GetKeyPolicy</a> operation.
            However, the only valid policy name is <c>default</c>. 
            
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListKeyPolicies</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>GetKeyPolicy</a> 
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html">PutKeyPolicy</a>
            
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyPoliciesRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Gets the names of key policies for the specified KMS key.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyPoliciesRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            Use this parameter to specify the maximum number of items to return. When this value
            is present, KMS does not return more than the specified number of items, but it might
            return fewer.
            </para>
             
            <para>
            This value is optional. If you include a value, it must be between 1 and 1000, inclusive.
            If you do not include a value, it defaults to 100.
            </para>
             
            <para>
            Only one policy can be attached to a key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyPoliciesRequest.Marker">
            <summary>
            Gets and sets the property Marker. 
            <para>
            Use this parameter in a subsequent request after you receive a response with truncated
            results. Set it to the value of <c>NextMarker</c> from the truncated response you
            just received.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListKeyPoliciesResponse">
            <summary>
            This is the response object from the ListKeyPolicies operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyPoliciesResponse.NextMarker">
            <summary>
            Gets and sets the property NextMarker. 
            <para>
            When <c>Truncated</c> is true, this element is present and contains the value to use
            for the <c>Marker</c> parameter in a subsequent request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyPoliciesResponse.PolicyNames">
            <summary>
            Gets and sets the property PolicyNames. 
            <para>
            A list of key policy names. The only valid value is <c>default</c>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyPoliciesResponse.Truncated">
            <summary>
            Gets and sets the property Truncated. 
            <para>
            A flag that indicates whether there are more items in the list. When this value is
            true, the list in this response is truncated. To get more items, pass the value of
            the <c>NextMarker</c> element in this response to the <c>Marker</c> parameter in a
            subsequent request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListKeyRotationsRequest">
            <summary>
            Container for the parameters to the ListKeyRotations operation.
            Returns information about all completed key material rotations for the specified KMS
            key.
            
             
            <para>
            You must specify the KMS key in all requests. You can refine the key rotations list
            by limiting the number of rotations returned.
            </para>
             
            <para>
            For detailed information about automatic and on-demand key rotations, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">Rotating
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListKeyRotations</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>RotateKeyOnDemand</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyRotationsRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Gets the key rotations for the specified KMS key.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyRotationsRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            Use this parameter to specify the maximum number of items to return. When this value
            is present, KMS does not return more than the specified number of items, but it might
            return fewer.
            </para>
             
            <para>
            This value is optional. If you include a value, it must be between 1 and 1000, inclusive.
            If you do not include a value, it defaults to 100.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyRotationsRequest.Marker">
            <summary>
            Gets and sets the property Marker. 
            <para>
            Use this parameter in a subsequent request after you receive a response with truncated
            results. Set it to the value of <c>NextMarker</c> from the truncated response you
            just received.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListKeyRotationsResponse">
            <summary>
            This is the response object from the ListKeyRotations operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyRotationsResponse.NextMarker">
            <summary>
            Gets and sets the property NextMarker. 
            <para>
            When <c>Truncated</c> is true, this element is present and contains the value to use
            for the <c>Marker</c> parameter in a subsequent request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyRotationsResponse.Rotations">
            <summary>
            Gets and sets the property Rotations. 
            <para>
            A list of completed key material rotations.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyRotationsResponse.Truncated">
            <summary>
            Gets and sets the property Truncated. 
            <para>
            A flag that indicates whether there are more items in the list. When this value is
            true, the list in this response is truncated. To get more items, pass the value of
            the <c>NextMarker</c> element in this response to the <c>Marker</c> parameter in a
            subsequent request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListKeysRequest">
            <summary>
            Container for the parameters to the ListKeys operation.
            Gets a list of all KMS keys in the caller's Amazon Web Services account and Region.
            
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListKeys</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeysRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            Use this parameter to specify the maximum number of items to return. When this value
            is present, KMS does not return more than the specified number of items, but it might
            return fewer.
            </para>
             
            <para>
            This value is optional. If you include a value, it must be between 1 and 1000, inclusive.
            If you do not include a value, it defaults to 100.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeysRequest.Marker">
            <summary>
            Gets and sets the property Marker. 
            <para>
            Use this parameter in a subsequent request after you receive a response with truncated
            results. Set it to the value of <c>NextMarker</c> from the truncated response you
            just received.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListKeysResponse">
            <summary>
            This is the response object from the ListKeys operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeysResponse.Keys">
            <summary>
            Gets and sets the property Keys. 
            <para>
            A list of KMS keys.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeysResponse.NextMarker">
            <summary>
            Gets and sets the property NextMarker. 
            <para>
            When <c>Truncated</c> is true, this element is present and contains the value to use
            for the <c>Marker</c> parameter in a subsequent request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeysResponse.Truncated">
            <summary>
            Gets and sets the property Truncated. 
            <para>
            A flag that indicates whether there are more items in the list. When this value is
            true, the list in this response is truncated. To get more items, pass the value of
            the <c>NextMarker</c> element in this response to the <c>Marker</c> parameter in a
            subsequent request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListResourceTagsRequest">
            <summary>
            Container for the parameters to the ListResourceTags operation.
            Returns all tags on the specified KMS key.
            
             
            <para>
            For general information about tags, including the format and syntax, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging
            Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.
            For information about using tags in KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging
            keys</a>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListResourceTags</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReplicateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>TagResource</a> 
            </para>
             </li> <li> 
            <para>
             <a>UntagResource</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListResourceTagsRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Gets tags on the specified KMS key.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListResourceTagsRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            Use this parameter to specify the maximum number of items to return. When this value
            is present, KMS does not return more than the specified number of items, but it might
            return fewer.
            </para>
             
            <para>
            This value is optional. If you include a value, it must be between 1 and 50, inclusive.
            If you do not include a value, it defaults to 50.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListResourceTagsRequest.Marker">
            <summary>
            Gets and sets the property Marker. 
            <para>
            Use this parameter in a subsequent request after you receive a response with truncated
            results. Set it to the value of <c>NextMarker</c> from the truncated response you
            just received.
            </para>
             
            <para>
            Do not attempt to construct this value. Use only the value of <c>NextMarker</c> from
            the truncated response you just received.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListResourceTagsResponse">
            <summary>
            This is the response object from the ListResourceTags operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListResourceTagsResponse.NextMarker">
            <summary>
            Gets and sets the property NextMarker. 
            <para>
            When <c>Truncated</c> is true, this element is present and contains the value to use
            for the <c>Marker</c> parameter in a subsequent request.
            </para>
             
            <para>
            Do not assume or infer any information from this value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListResourceTagsResponse.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            A list of tags. Each tag consists of a tag key and a tag value.
            </para>
             <note> 
            <para>
            Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListResourceTagsResponse.Truncated">
            <summary>
            Gets and sets the property Truncated. 
            <para>
            A flag that indicates whether there are more items in the list. When this value is
            true, the list in this response is truncated. To get more items, pass the value of
            the <c>NextMarker</c> element in this response to the <c>Marker</c> parameter in a
            subsequent request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListRetirableGrantsRequest">
            <summary>
            Container for the parameters to the ListRetirableGrants operation.
            Returns information about all grants in the Amazon Web Services account and Region
            that have the specified retiring principal. 
            
             
            <para>
            You can specify any principal in your Amazon Web Services account. The grants that
            are returned include grants for KMS keys in your Amazon Web Services account and other
            Amazon Web Services accounts. You might use this operation to determine which grants
            you may retire. To retire a grant, use the <a>RetireGrant</a> operation.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: You must specify a principal in your Amazon Web Services
            account. This operation returns a list of grants where the retiring principal specified
            in the <c>ListRetirableGrants</c> request is the same retiring principal on the grant.
            This can include grants on KMS keys owned by other Amazon Web Services accounts, but
            you do not need <c>kms:ListRetirableGrants</c> permission (or any other additional
            permission) in any Amazon Web Services account other than your own.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ListRetirableGrants</a>
            (IAM policy) in your Amazon Web Services account.
            </para>
             <note> 
            <para>
            KMS authorizes <c>ListRetirableGrants</c> requests by evaluating the caller account's
            kms:ListRetirableGrants permissions. The authorized resource in <c>ListRetirableGrants</c>
            calls is the retiring principal specified in the request. KMS does not evaluate the
            caller's permissions to verify their access to any KMS keys or grants that might be
            returned by the <c>ListRetirableGrants</c> call.
            </para>
             </note> 
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListRetirableGrantsRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            Use this parameter to specify the maximum number of items to return. When this value
            is present, KMS does not return more than the specified number of items, but it might
            return fewer.
            </para>
             
            <para>
            This value is optional. If you include a value, it must be between 1 and 100, inclusive.
            If you do not include a value, it defaults to 50.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListRetirableGrantsRequest.Marker">
            <summary>
            Gets and sets the property Marker. 
            <para>
            Use this parameter in a subsequent request after you receive a response with truncated
            results. Set it to the value of <c>NextMarker</c> from the truncated response you
            just received.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListRetirableGrantsRequest.RetiringPrincipal">
            <summary>
            Gets and sets the property RetiringPrincipal. 
            <para>
            The retiring principal for which to list grants. Enter a principal in your Amazon
            Web Services account.
            </para>
             
            <para>
            To specify the retiring principal, use the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Name (ARN)</a> of an Amazon Web Services principal. Valid principals include
            Amazon Web Services accounts, IAM users, IAM roles, federated users, and assumed role
            users. For help with the ARN syntax for a principal, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns">IAM
            ARNs</a> in the <i> <i>Identity and Access Management User Guide</i> </i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListRetirableGrantsResponse">
            <summary>
            This is the response object from the ListRetirableGrants operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListRetirableGrantsResponse.Grants">
            <summary>
            Gets and sets the property Grants. 
            <para>
            A list of grants.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListRetirableGrantsResponse.NextMarker">
            <summary>
            Gets and sets the property NextMarker. 
            <para>
            When <c>Truncated</c> is true, this element is present and contains the value to use
            for the <c>Marker</c> parameter in a subsequent request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListRetirableGrantsResponse.Truncated">
            <summary>
            Gets and sets the property Truncated. 
            <para>
            A flag that indicates whether there are more items in the list. When this value is
            true, the list in this response is truncated. To get more items, pass the value of
            the <c>NextMarker</c> element in this response to the <c>Marker</c> parameter in a
            subsequent request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException">
            <summary>
            The request was rejected because the specified policy is not syntactically or semantically
            correct.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException.#ctor(System.String)">
            <summary>
            Constructs a new MalformedPolicyDocumentException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of MalformedPolicyDocumentException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException.#ctor(System.Exception)">
            <summary>
            Construct instance of MalformedPolicyDocumentException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of MalformedPolicyDocumentException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.MalformedPolicyDocumentException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of MalformedPolicyDocumentException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.MultiRegionConfiguration">
            <summary>
            Describes the configuration of this multi-Region key. This field appears only when
            the KMS key is a primary or replica of a multi-Region key.
            
             
            <para>
            For more information about any listed KMS key, use the <a>DescribeKey</a> operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.MultiRegionConfiguration.MultiRegionKeyType">
            <summary>
            Gets and sets the property MultiRegionKeyType. 
            <para>
            Indicates whether the KMS key is a <c>PRIMARY</c> or <c>REPLICA</c> key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.MultiRegionConfiguration.PrimaryKey">
            <summary>
            Gets and sets the property PrimaryKey. 
            <para>
            Displays the key ARN and Region of the primary key. This field includes the current
            KMS key if it is the primary key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.MultiRegionConfiguration.ReplicaKeys">
            <summary>
            Gets and sets the property ReplicaKeys. 
            <para>
            displays the key ARNs and Regions of all replica keys. This field includes the current
            KMS key if it is a replica key.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.MultiRegionKey">
            <summary>
            Describes the primary or replica key in a multi-Region key.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.MultiRegionKey.Arn">
            <summary>
            Gets and sets the property Arn. 
            <para>
            Displays the key ARN of a primary or replica key of a multi-Region key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.MultiRegionKey.Region">
            <summary>
            Gets and sets the property Region. 
            <para>
            Displays the Amazon Web Services Region of a primary or replica key in a multi-Region
            key.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.NotFoundException">
            <summary>
            The request was rejected because the specified entity or resource could not be found.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.NotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new NotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of NotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.NotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of NotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.NotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.NotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.PutKeyPolicyRequest">
            <summary>
            Container for the parameters to the PutKeyPolicy operation.
            Attaches a key policy to the specified KMS key. 
            
             
            <para>
            For more information about key policies, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Key
            Policies</a> in the <i>Key Management Service Developer Guide</i>. For help writing
            and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM
            JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i>
            </i>. For examples of adding a key policy in multiple programming languages, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-key-policies.html#put-policy">Setting
            a key policy</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:PutKeyPolicy</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>GetKeyPolicy</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.PutKeyPolicyRequest.BypassPolicyLockoutSafetyCheck">
            <summary>
            Gets and sets the property BypassPolicyLockoutSafetyCheck. 
            <para>
            Skips ("bypasses") the key policy lockout safety check. The default value is false.
            </para>
             <important> 
            <para>
            Setting this value to true increases the risk that the KMS key becomes unmanageable.
            Do not set this value to true indiscriminately.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key">Default
            key policy</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </important> 
            <para>
            Use this parameter only when you intend to prevent the principal that is making the
            request from making a subsequent <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html">PutKeyPolicy</a>
            request on the KMS key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.PutKeyPolicyRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Sets the key policy on the specified KMS key.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.PutKeyPolicyRequest.Policy">
            <summary>
            Gets and sets the property Policy. 
            <para>
            The key policy to attach to the KMS key.
            </para>
             
            <para>
            The key policy must meet the following criteria:
            </para>
             <ul> <li> 
            <para>
            The key policy must allow the calling principal to make a subsequent <c>PutKeyPolicy</c>
            request on the KMS key. This reduces the risk that the KMS key becomes unmanageable.
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key">Default
            key policy</a> in the <i>Key Management Service Developer Guide</i>. (To omit this
            condition, set <c>BypassPolicyLockoutSafetyCheck</c> to true.)
            </para>
             </li> <li> 
            <para>
            Each statement in the key policy must contain one or more principals. The principals
            in the key policy must exist and be visible to KMS. When you create a new Amazon Web
            Services principal, you might need to enforce a delay before including the new principal
            in a key policy because the new principal might not be immediately visible to KMS.
            For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes
            that I make are not always immediately visible</a> in the <i>Amazon Web Services Identity
            and Access Management User Guide</i>.
            </para>
             </li> </ul> 
            <para>
            A key policy document can include only the following characters:
            </para>
             <ul> <li> 
            <para>
            Printable ASCII characters from the space character (<c>\u0020</c>) through the end
            of the ASCII character range.
            </para>
             </li> <li> 
            <para>
            Printable characters in the Basic Latin and Latin-1 Supplement character set (through
            <c>\u00FF</c>).
            </para>
             </li> <li> 
            <para>
            The tab (<c>\u0009</c>), line feed (<c>\u000A</c>), and carriage return (<c>\u000D</c>)
            special characters
            </para>
             </li> </ul> 
            <para>
            For information about key policies, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Key
            policies in KMS</a> in the <i>Key Management Service Developer Guide</i>.For help
            writing and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM
            JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i>
            </i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.PutKeyPolicyRequest.PolicyName">
            <summary>
            Gets and sets the property PolicyName. 
            <para>
            The name of the key policy. If no policy name is specified, the default value is <c>default</c>.
            The only valid value is <c>default</c>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.PutKeyPolicyResponse">
            <summary>
            This is the response object from the PutKeyPolicy operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.RecipientInfo">
            <summary>
            Contains information about the party that receives the response from the API operation.
            
             
            <para>
            This data type is designed to support Amazon Web Services Nitro Enclaves, which lets
            you create an isolated compute environment in Amazon EC2. For information about the
            interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How
            Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RecipientInfo.AttestationDocument">
            <summary>
            Gets and sets the property AttestationDocument. 
            <para>
            The attestation document for an Amazon Web Services Nitro Enclave. This document includes
            the enclave's public key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RecipientInfo.KeyEncryptionAlgorithm">
            <summary>
            Gets and sets the property KeyEncryptionAlgorithm. 
            <para>
            The encryption algorithm that KMS should use with the public key for an Amazon Web
            Services Nitro Enclave to encrypt plaintext values for the response. The only valid
            value is <c>RSAES_OAEP_SHA_256</c>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ReEncryptRequest">
            <summary>
            Container for the parameters to the ReEncrypt operation.
            Decrypts ciphertext and then reencrypts it entirely within KMS. You can use this operation
            to change the KMS key under which data is encrypted, such as when you <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotate-keys-manually">manually
            rotate</a> a KMS key or change the KMS key that protects a ciphertext. You can also
            use it to reencrypt ciphertext under the same KMS key, such as to change the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">encryption
            context</a> of a ciphertext.
            
             
            <para>
            The <c>ReEncrypt</c> operation can decrypt ciphertext that was encrypted by using
            a KMS key in an KMS operation, such as <a>Encrypt</a> or <a>GenerateDataKey</a>. It
            can also decrypt ciphertext that was encrypted by using the public key of an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-concepts.html#asymmetric-cmks">asymmetric
            KMS key</a> outside of KMS. However, it cannot decrypt ciphertext produced by other
            libraries, such as the <a href="https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/">Amazon
            Web Services Encryption SDK</a> or <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html">Amazon
            S3 client-side encryption</a>. These libraries return a ciphertext format that is
            incompatible with KMS.
            </para>
             
            <para>
            When you use the <c>ReEncrypt</c> operation, you need to provide information for the
            decrypt operation and the subsequent encrypt operation.
            </para>
             <ul> <li> 
            <para>
            If your ciphertext was encrypted under an asymmetric KMS key, you must use the <c>SourceKeyId</c>
            parameter to identify the KMS key that encrypted the ciphertext. You must also supply
            the encryption algorithm that was used. This information is required to decrypt the
            data.
            </para>
             </li> <li> 
            <para>
            If your ciphertext was encrypted under a symmetric encryption KMS key, the <c>SourceKeyId</c>
            parameter is optional. KMS can get this information from metadata that it adds to
            the symmetric ciphertext blob. This feature adds durability to your implementation
            by ensuring that authorized users can decrypt ciphertext decades after it was encrypted,
            even if they've lost track of the key ID. However, specifying the source KMS key is
            always recommended as a best practice. When you use the <c>SourceKeyId</c> parameter
            to specify a KMS key, KMS uses only the KMS key you specify. If the ciphertext was
            encrypted under a different KMS key, the <c>ReEncrypt</c> operation fails. This practice
            ensures that you use the KMS key that you intend.
            </para>
             </li> <li> 
            <para>
            To reencrypt the data, you must use the <c>DestinationKeyId</c> parameter to specify
            the KMS key that re-encrypts the data after it is decrypted. If the destination KMS
            key is an asymmetric KMS key, you must also provide the encryption algorithm. The
            algorithm that you choose must be compatible with the KMS key.
            </para>
             <important> 
            <para>
            When you use an asymmetric KMS key to encrypt or reencrypt data, be sure to record
            the KMS key and encryption algorithm that you choose. You will be required to provide
            the same KMS key and encryption algorithm when you decrypt the data. If the KMS key
            and algorithm do not match the values used to encrypt the data, the decrypt operation
            fails.
            </para>
             
            <para>
            You are not required to supply the key ID and encryption algorithm when you decrypt
            with symmetric encryption KMS keys because KMS stores this information in the ciphertext
            blob. KMS cannot store metadata in ciphertext generated with asymmetric keys. The
            standard format for asymmetric key ciphertext does not include configurable fields.
            </para>
             </important> </li> </ul> 
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. The source KMS key and destination KMS key can be
            in different Amazon Web Services accounts. Either or both KMS keys can be in a different
            account than the caller. To specify a KMS key in a different account, you must use
            its key ARN or alias ARN.
            </para>
             
            <para>
             <b>Required permissions</b>:
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ReEncryptFrom</a>
            permission on the source KMS key (key policy)
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:ReEncryptTo</a>
            permission on the destination KMS key (key policy)
            </para>
             </li> </ul> 
            <para>
            To permit reencryption from or to a KMS key, include the <c>"kms:ReEncrypt*"</c> permission
            in your <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">key
            policy</a>. This permission is automatically included in the key policy when you use
            the console to create a KMS key. But you must include it manually when you create
            a KMS key programmatically or when you use the <a>PutKeyPolicy</a> operation to set
            a key policy.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>Decrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>Encrypt</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>GenerateDataKeyPair</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptRequest.CiphertextBlob">
            <summary>
            Gets and sets the property CiphertextBlob. 
            <para>
            Ciphertext of the data to reencrypt.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptRequest.DestinationEncryptionAlgorithm">
            <summary>
            Gets and sets the property DestinationEncryptionAlgorithm. 
            <para>
            Specifies the encryption algorithm that KMS will use to reecrypt the data after it
            has decrypted it. The default value, <c>SYMMETRIC_DEFAULT</c>, represents the encryption
            algorithm used for symmetric encryption KMS keys.
            </para>
             
            <para>
            This parameter is required only when the destination KMS key is an asymmetric KMS
            key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptRequest.DestinationEncryptionContext">
            <summary>
            Gets and sets the property DestinationEncryptionContext. 
            <para>
            Specifies that encryption context to use when the reencrypting the data.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            A destination encryption context is valid only when the destination KMS key is a symmetric
            encryption KMS key. The standard ciphertext format for asymmetric KMS keys does not
            include fields for metadata.
            </para>
             
            <para>
            An <i>encryption context</i> is a collection of non-secret key-value pairs that represent
            additional authenticated data. When you use an encryption context to encrypt data,
            you must specify the same (an exact case-sensitive match) encryption context to decrypt
            the data. An encryption context is supported only on operations with symmetric encryption
            KMS keys. On operations with symmetric encryption KMS keys, an encryption context
            is optional, but it is strongly recommended.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptRequest.DestinationKeyId">
            <summary>
            Gets and sets the property DestinationKeyId. 
            <para>
            A unique identifier for the KMS key that is used to reencrypt the data. Specify a
            symmetric encryption KMS key or an asymmetric KMS key with a <c>KeyUsage</c> value
            of <c>ENCRYPT_DECRYPT</c>. To find the <c>KeyUsage</c> value of a KMS key, use the
            <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptRequest.SourceEncryptionAlgorithm">
            <summary>
            Gets and sets the property SourceEncryptionAlgorithm. 
            <para>
            Specifies the encryption algorithm that KMS will use to decrypt the ciphertext before
            it is reencrypted. The default value, <c>SYMMETRIC_DEFAULT</c>, represents the algorithm
            used for symmetric encryption KMS keys.
            </para>
             
            <para>
            Specify the same algorithm that was used to encrypt the ciphertext. If you specify
            a different algorithm, the decrypt attempt fails.
            </para>
             
            <para>
            This parameter is required only when the ciphertext was encrypted under an asymmetric
            KMS key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptRequest.SourceEncryptionContext">
            <summary>
            Gets and sets the property SourceEncryptionContext. 
            <para>
            Specifies the encryption context to use to decrypt the ciphertext. Enter the same
            encryption context that was used to encrypt the ciphertext.
            </para>
             
            <para>
            An <i>encryption context</i> is a collection of non-secret key-value pairs that represent
            additional authenticated data. When you use an encryption context to encrypt data,
            you must specify the same (an exact case-sensitive match) encryption context to decrypt
            the data. An encryption context is supported only on operations with symmetric encryption
            KMS keys. On operations with symmetric encryption KMS keys, an encryption context
            is optional, but it is strongly recommended.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context">Encryption
            context</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptRequest.SourceKeyId">
            <summary>
            Gets and sets the property SourceKeyId. 
            <para>
            Specifies the KMS key that KMS will use to decrypt the ciphertext before it is re-encrypted.
            </para>
             
            <para>
            Enter a key ID of the KMS key that was used to encrypt the ciphertext. If you identify
            a different KMS key, the <c>ReEncrypt</c> operation throws an <c>IncorrectKeyException</c>.
            </para>
             
            <para>
            This parameter is required only when the ciphertext was encrypted under an asymmetric
            KMS key. If you used a symmetric encryption KMS key, KMS can get the KMS key from
            metadata that it adds to the symmetric ciphertext blob. However, it is always recommended
            as a best practice. This practice ensures that you use the KMS key that you intend.
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ReEncryptResponse">
            <summary>
            This is the response object from the ReEncrypt operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptResponse.CiphertextBlob">
            <summary>
            Gets and sets the property CiphertextBlob. 
            <para>
            The reencrypted data. When you use the HTTP API or the Amazon Web Services CLI, the
            value is Base64-encoded. Otherwise, it is not Base64-encoded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptResponse.DestinationEncryptionAlgorithm">
            <summary>
            Gets and sets the property DestinationEncryptionAlgorithm. 
            <para>
            The encryption algorithm that was used to reencrypt the data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the KMS key that was used to reencrypt the data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptResponse.SourceEncryptionAlgorithm">
            <summary>
            Gets and sets the property SourceEncryptionAlgorithm. 
            <para>
            The encryption algorithm that was used to decrypt the ciphertext before it was reencrypted.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReEncryptResponse.SourceKeyId">
            <summary>
            Gets and sets the property SourceKeyId. 
            <para>
            Unique identifier of the KMS key used to originally encrypt the data.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ReplicateKeyRequest">
            <summary>
            Container for the parameters to the ReplicateKey operation.
            Replicates a multi-Region key into the specified Region. This operation creates a
            multi-Region replica key based on a multi-Region primary key in a different Region
            of the same Amazon Web Services partition. You can create multiple replicas of a primary
            key, but each must be in a different Region. To create a multi-Region primary key,
            use the <a>CreateKey</a> operation.
            
             
            <para>
            This operation supports <i>multi-Region keys</i>, an KMS feature that lets you create
            multiple interoperable KMS keys in different Amazon Web Services Regions. Because
            these KMS keys have the same key ID, key material, and other metadata, you can use
            them interchangeably to encrypt data in one Amazon Web Services Region and decrypt
            it in a different Amazon Web Services Region without re-encrypting the data or making
            a cross-Region call. For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            A <i>replica key</i> is a fully-functional KMS key that can be used independently
            of its primary and peer replica keys. A primary key and its replica keys share properties
            that make them interoperable. They have the same <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id">key
            ID</a> and key material. They also have the same <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-spec">key
            spec</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-usage">key
            usage</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-origin">key
            material origin</a>, and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            key rotation status</a>. KMS automatically synchronizes these shared properties among
            related multi-Region keys. All other properties of a replica key can differ, including
            its <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">key
            policy</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">tags</a>,
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html">aliases</a>,
            and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a>. KMS pricing and quotas for KMS keys apply to each primary
            key and replica key.
            </para>
             
            <para>
            When this operation completes, the new replica key has a transient key state of <c>Creating</c>.
            This key state changes to <c>Enabled</c> (or <c>PendingImport</c>) after a few seconds
            when the process of creating the new replica key is complete. While the key state
            is <c>Creating</c>, you can manage key, but you cannot yet use it in cryptographic
            operations. If you are creating and using the replica key programmatically, retry
            on <c>KMSInvalidStateException</c> or call <c>DescribeKey</c> to check its <c>KeyState</c>
            value before using it. For details about the <c>Creating</c> key state, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            You cannot create more than one replica of a primary key in any Region. If the Region
            already includes a replica of the key you're trying to replicate, <c>ReplicateKey</c>
            returns an <c>AlreadyExistsException</c> error. If the key state of the existing replica
            is <c>PendingDeletion</c>, you can cancel the scheduled key deletion (<a>CancelKeyDeletion</a>)
            or wait for the key to be deleted. The new replica key you create will have the same
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html#mrk-sync-properties">shared
            properties</a> as the original replica key.
            </para>
             
            <para>
            The CloudTrail log of a <c>ReplicateKey</c> operation records a <c>ReplicateKey</c>
            operation in the primary key's Region and a <a>CreateKey</a> operation in the replica
            key's Region.
            </para>
             
            <para>
            If you replicate a multi-Region primary key with imported key material, the replica
            key is created with no key material. You must import the same key material that you
            imported into the primary key. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-import.html">Importing
            key material into multi-Region keys</a> in the <i>Key Management Service Developer
            Guide</i>.
            </para>
             
            <para>
            To convert a replica key to a primary key, use the <a>UpdatePrimaryRegion</a> operation.
            </para>
             <note> 
            <para>
             <c>ReplicateKey</c> uses different default values for the <c>KeyPolicy</c> and <c>Tags</c>
            parameters than those used in the KMS console. For details, see the parameter descriptions.
            </para>
             </note> 
            <para>
             <b>Cross-account use</b>: No. You cannot use this operation to create a replica key
            in a different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: 
            </para>
             <ul> <li> 
            <para>
             <c>kms:ReplicateKey</c> on the primary key (in the primary key's Region). Include
            this permission in the primary key's key policy.
            </para>
             </li> <li> 
            <para>
             <c>kms:CreateKey</c> in an IAM policy in the replica Region.
            </para>
             </li> <li> 
            <para>
            To use the <c>Tags</c> parameter, <c>kms:TagResource</c> in an IAM policy in the replica
            Region.
            </para>
             </li> </ul> 
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>UpdatePrimaryRegion</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReplicateKeyRequest.BypassPolicyLockoutSafetyCheck">
            <summary>
            Gets and sets the property BypassPolicyLockoutSafetyCheck. 
            <para>
            Skips ("bypasses") the key policy lockout safety check. The default value is false.
            </para>
             <important> 
            <para>
            Setting this value to true increases the risk that the KMS key becomes unmanageable.
            Do not set this value to true indiscriminately.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key">Default
            key policy</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </important> 
            <para>
            Use this parameter only when you intend to prevent the principal that is making the
            request from making a subsequent <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html">PutKeyPolicy</a>
            request on the KMS key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReplicateKeyRequest.Description">
            <summary>
            Gets and sets the property Description. 
            <para>
            A description of the KMS key. The default value is an empty string (no description).
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            The description is not a shared property of multi-Region keys. You can specify the
            same description or a different description for each key in a set of related multi-Region
            keys. KMS does not synchronize this property.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReplicateKeyRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the multi-Region primary key that is being replicated. To determine whether
            a KMS key is a multi-Region primary key, use the <a>DescribeKey</a> operation to check
            the value of the <c>MultiRegionKeyType</c> property.
            </para>
             
            <para>
            Specify the key ID or key ARN of a multi-Region primary key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>mrk-1234abcd12ab34cd56ef1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReplicateKeyRequest.Policy">
            <summary>
            Gets and sets the property Policy. 
            <para>
            The key policy to attach to the KMS key. This parameter is optional. If you do not
            provide a key policy, KMS attaches the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default">default
            key policy</a> to the KMS key.
            </para>
             
            <para>
            The key policy is not a shared property of multi-Region keys. You can specify the
            same key policy or a different key policy for each key in a set of related multi-Region
            keys. KMS does not synchronize this property.
            </para>
             
            <para>
            If you provide a key policy, it must meet the following criteria:
            </para>
             <ul> <li> 
            <para>
            The key policy must allow the calling principal to make a subsequent <c>PutKeyPolicy</c>
            request on the KMS key. This reduces the risk that the KMS key becomes unmanageable.
            For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#prevent-unmanageable-key">Default
            key policy</a> in the <i>Key Management Service Developer Guide</i>. (To omit this
            condition, set <c>BypassPolicyLockoutSafetyCheck</c> to true.)
            </para>
             </li> <li> 
            <para>
            Each statement in the key policy must contain one or more principals. The principals
            in the key policy must exist and be visible to KMS. When you create a new Amazon Web
            Services principal, you might need to enforce a delay before including the new principal
            in a key policy because the new principal might not be immediately visible to KMS.
            For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency">Changes
            that I make are not always immediately visible</a> in the <i>Amazon Web Services Identity
            and Access Management User Guide</i>.
            </para>
             </li> </ul> 
            <para>
            A key policy document can include only the following characters:
            </para>
             <ul> <li> 
            <para>
            Printable ASCII characters from the space character (<c>\u0020</c>) through the end
            of the ASCII character range.
            </para>
             </li> <li> 
            <para>
            Printable characters in the Basic Latin and Latin-1 Supplement character set (through
            <c>\u00FF</c>).
            </para>
             </li> <li> 
            <para>
            The tab (<c>\u0009</c>), line feed (<c>\u000A</c>), and carriage return (<c>\u000D</c>)
            special characters
            </para>
             </li> </ul> 
            <para>
            For information about key policies, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html">Key
            policies in KMS</a> in the <i>Key Management Service Developer Guide</i>. For help
            writing and formatting a JSON policy document, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">IAM
            JSON Policy Reference</a> in the <i> <i>Identity and Access Management User Guide</i>
            </i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReplicateKeyRequest.ReplicaRegion">
            <summary>
            Gets and sets the property ReplicaRegion. 
            <para>
            The Region ID of the Amazon Web Services Region for this replica key. 
            </para>
             
            <para>
            Enter the Region ID, such as <c>us-east-1</c> or <c>ap-southeast-2</c>. For a list
            of Amazon Web Services Regions in which KMS is supported, see <a href="https://docs.aws.amazon.com/general/latest/gr/kms.html#kms_region">KMS
            service endpoints</a> in the <i>Amazon Web Services General Reference</i>.
            </para>
             <note> 
            <para>
            HMAC KMS keys are not supported in all Amazon Web Services Regions. If you try to
            replicate an HMAC KMS key in an Amazon Web Services Region in which HMAC keys are
            not supported, the <c>ReplicateKey</c> operation returns an <c>UnsupportedOperationException</c>.
            For a list of Regions in which HMAC KMS keys are supported, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            The replica must be in a different Amazon Web Services Region than its primary key
            and other replicas of that primary key, but in the same Amazon Web Services partition.
            KMS must be available in the replica Region. If the Region is not enabled by default,
            the Amazon Web Services account must be enabled in the Region. For information about
            Amazon Web Services partitions, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
            Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For
            information about enabling and disabling Regions, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-enable">Enabling
            a Region</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html#rande-manage-disable">Disabling
            a Region</a> in the <i>Amazon Web Services General Reference</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReplicateKeyRequest.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            Assigns one or more tags to the replica key. Use this parameter to tag the KMS key
            when it is created. To tag an existing KMS key, use the <a>TagResource</a> operation.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> <note> 
            <para>
            Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            To use this parameter, you must have <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a>
            permission in an IAM policy.
            </para>
             
            <para>
            Tags are not a shared property of multi-Region keys. You can specify the same tags
            or different tags for each key in a set of related multi-Region keys. KMS does not
            synchronize this property.
            </para>
             
            <para>
            Each tag consists of a tag key and a tag value. Both the tag key and the tag value
            are required, but the tag value can be an empty (null) string. You cannot have more
            than one tag on a KMS key with the same tag key. If you specify an existing tag key
            with a different tag value, KMS replaces the current tag value with the specified
            one.
            </para>
             
            <para>
            When you add tags to an Amazon Web Services resource, Amazon Web Services generates
            a cost allocation report with usage and costs aggregated by tags. Tags can also be
            used to control access to a KMS key. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging
            Keys</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ReplicateKeyResponse">
            <summary>
            This is the response object from the ReplicateKey operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReplicateKeyResponse.ReplicaKeyMetadata">
            <summary>
            Gets and sets the property ReplicaKeyMetadata. 
            <para>
            Displays details about the new replica key, including its Amazon Resource Name (<a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a>. It also includes the ARN and Amazon Web Services Region of
            its primary key and other replica keys.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReplicateKeyResponse.ReplicaPolicy">
            <summary>
            Gets and sets the property ReplicaPolicy. 
            <para>
            The key policy of the new replica key. The value is a key policy document in JSON
            format.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ReplicateKeyResponse.ReplicaTags">
            <summary>
            Gets and sets the property ReplicaTags. 
            <para>
            The tags on the new replica key. The value is a list of tag key and tag value pairs.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.RetireGrantRequest">
            <summary>
            Container for the parameters to the RetireGrant operation.
            Deletes a grant. Typically, you retire a grant when you no longer need its permissions.
            To identify the grant to retire, use a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">grant
            token</a>, or both the grant ID and a key identifier (key ID or key ARN) of the KMS
            key. The <a>CreateGrant</a> operation returns both values.
            
             
            <para>
            This operation can be called by the <i>retiring principal</i> for a grant, by the
            <i>grantee principal</i> if the grant allows the <c>RetireGrant</c> operation, and
            by the Amazon Web Services account in which the grant is created. It can also be called
            by principals to whom permission for retiring a grant is delegated. For details, see
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. You can retire a grant on a KMS key in a different
            Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: Permission to retire a grant is determined primarily
            by the grant. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RevokeGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RetireGrantRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RetireGrantRequest.GrantId">
            <summary>
            Gets and sets the property GrantId. 
            <para>
            Identifies the grant to retire. To get the grant ID, use <a>CreateGrant</a>, <a>ListGrants</a>,
            or <a>ListRetirableGrants</a>.
            </para>
             <ul> <li> 
            <para>
            Grant ID Example - 0123456789012345678901234567890123456789012345678901234567890123
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RetireGrantRequest.GrantToken">
            <summary>
            Gets and sets the property GrantToken. 
            <para>
            Identifies the grant to be retired. You can use a grant token to identify a new grant
            even before it has achieved eventual consistency.
            </para>
             
            <para>
            Only the <a>CreateGrant</a> operation returns a grant token. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-eventual-consistency">Eventual
            consistency</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RetireGrantRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The key ARN KMS key associated with the grant. To find the key ARN, use the <a>ListKeys</a>
            operation.
            </para>
             
            <para>
            For example: <c>arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.RetireGrantResponse">
            <summary>
            This is the response object from the RetireGrant operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.RevokeGrantRequest">
            <summary>
            Container for the parameters to the RevokeGrant operation.
            Deletes the specified grant. You revoke a grant to terminate the permissions that
            the grant allows. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#grant-delete">Retiring
            and revoking grants</a> in the <i> <i>Key Management Service Developer Guide</i> </i>.
            
             
            <para>
            When you create, retire, or revoke a grant, there might be a brief delay, usually
            less than five minutes, until the grant is available throughout KMS. This state is
            known as <i>eventual consistency</i>. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#terms-eventual-consistency">Eventual
            consistency</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. 
            </para>
             
            <para>
            For detailed information about grants, including grant terminology, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html">Grants
            in KMS</a> in the <i> <i>Key Management Service Developer Guide</i> </i>. For examples
            of working with grants in several programming languages, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-grants.html">Programming
            grants</a>. 
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation on a KMS key in a different
            Amazon Web Services account, specify the key ARN in the value of the <c>KeyId</c>
            parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:RevokeGrant</a>
            (key policy).
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateGrant</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListRetirableGrants</a> 
            </para>
             </li> <li> 
            <para>
             <a>RetireGrant</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RevokeGrantRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RevokeGrantRequest.GrantId">
            <summary>
            Gets and sets the property GrantId. 
            <para>
            Identifies the grant to revoke. To get the grant ID, use <a>CreateGrant</a>, <a>ListGrants</a>,
            or <a>ListRetirableGrants</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RevokeGrantRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            A unique identifier for the KMS key associated with the grant. To get the key ID and
            key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.RevokeGrantResponse">
            <summary>
            This is the response object from the RevokeGrant operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.RotateKeyOnDemandRequest">
            <summary>
            Container for the parameters to the RotateKeyOnDemand operation.
            Immediately initiates rotation of the key material of the specified symmetric encryption
            KMS key.
            
             
            <para>
            You can perform <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-on-demand">on-demand
            rotation</a> of the key material in customer managed KMS keys, regardless of whether
            or not <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-enable-disable">automatic
            key rotation</a> is enabled. On-demand rotations do not change existing automatic
            rotation schedules. For example, consider a KMS key that has automatic key rotation
            enabled with a rotation period of 730 days. If the key is scheduled to automatically
            rotate on April 14, 2024, and you perform an on-demand rotation on April 10, 2024,
            the key will automatically rotate, as scheduled, on April 14, 2024 and every 730 days
            thereafter.
            </para>
             <note> 
            <para>
            You can perform on-demand key rotation a <b>maximum of 10 times</b> per KMS key. You
            can use the KMS console to view the number of remaining on-demand rotations available
            for a KMS key.
            </para>
             </note> 
            <para>
            You can use <a>GetKeyRotationStatus</a> to identify any in progress on-demand rotations.
            You can use <a>ListKeyRotations</a> to identify the date that completed on-demand
            rotations were performed. You can monitor rotation of the key material for your KMS
            keys in CloudTrail and Amazon CloudWatch.
            </para>
             
            <para>
            On-demand key rotation is supported only on <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#symmetric-cmks">symmetric
            encryption KMS keys</a>. You cannot perform on-demand rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To perform on-demand rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, invoke the on-demand rotation on the primary key.
            </para>
             
            <para>
            You cannot initiate on-demand rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed KMS keys</a>. KMS always rotates the key material of Amazon Web
            Services managed keys every year. Rotation of <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned KMS keys</a> is managed by the Amazon Web Services service that
            owns the key.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:RotateKeyOnDemand</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>EnableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKeyRotation</a> 
            </para>
             </li> <li> 
            <para>
             <a>GetKeyRotationStatus</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListKeyRotations</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RotateKeyOnDemandRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies a symmetric encryption KMS key. You cannot perform on-demand rotation of
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">asymmetric
            KMS keys</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            KMS keys</a>, KMS keys with <a href="https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html">imported
            key material</a>, or KMS keys in a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key store</a>. To perform on-demand rotation of a set of related <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate">multi-Region
            keys</a>, invoke the on-demand rotation on the primary key.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.RotateKeyOnDemandResponse">
            <summary>
            This is the response object from the RotateKeyOnDemand operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RotateKeyOnDemandResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the symmetric encryption KMS key that you initiated on-demand rotation
            on.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.RotationsListEntry">
            <summary>
            Contains information about completed key material rotations.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RotationsListEntry.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Unique identifier of the key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RotationsListEntry.RotationDate">
            <summary>
            Gets and sets the property RotationDate. 
            <para>
            Date and time that the key material rotation completed. Formatted as Unix time.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.RotationsListEntry.RotationType">
            <summary>
            Gets and sets the property RotationType. 
            <para>
            Identifies whether the key material rotation was a scheduled <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-enable-disable">automatic
            rotation</a> or an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html#rotating-keys-on-demand">on-demand
            rotation</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ScheduleKeyDeletionRequest">
            <summary>
            Container for the parameters to the ScheduleKeyDeletion operation.
            Schedules the deletion of a KMS key. By default, KMS applies a waiting period of 30
            days, but you can specify a waiting period of 7-30 days. When this operation is successful,
            the key state of the KMS key changes to <c>PendingDeletion</c> and the key can't be
            used in any cryptographic operations. It remains in this state for the duration of
            the waiting period. Before the waiting period ends, you can use <a>CancelKeyDeletion</a>
            to cancel the deletion of the KMS key. After the waiting period ends, KMS deletes
            the KMS key, its key material, and all KMS data associated with it, including all
            aliases that refer to it.
            
             <important> 
            <para>
            Deleting a KMS key is a destructive and potentially dangerous operation. When a KMS
            key is deleted, all data that was encrypted under the KMS key is unrecoverable. (The
            only exception is a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">multi-Region
            replica key</a>, or an <a href="kms/latest/developerguide/importing-keys-managing.html#import-delete-key">asymmetric
            or HMAC KMS key with imported key material</a>.) To prevent the use of a KMS key without
            deleting it, use <a>DisableKey</a>. 
            </para>
             </important> 
            <para>
            You can schedule the deletion of a multi-Region primary key and its replica keys at
            any time. However, KMS will not delete a multi-Region primary key with existing replica
            keys. If you schedule the deletion of a primary key with replicas, its key state changes
            to <c>PendingReplicaDeletion</c> and it cannot be replicated or used in cryptographic
            operations. This status can continue indefinitely. When the last of its replicas keys
            is deleted (not just scheduled), the key state of the primary key changes to <c>PendingDeletion</c>
            and its waiting period (<c>PendingWindowInDays</c>) begins. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html">Deleting
            multi-Region keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            When KMS <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-cmk-keystore.html">deletes
            a KMS key from an CloudHSM key store</a>, it makes a best effort to delete the associated
            key material from the associated CloudHSM cluster. However, you might need to manually
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key">delete
            the orphaned key material</a> from the cluster and its backups. <a href="https://docs.aws.amazon.com/kms/latest/developerguide/delete-xks-key.html">Deleting
            a KMS key from an external key store</a> has no effect on the associated external
            key. However, for both types of custom key stores, deleting a KMS key is destructive
            and irreversible. You cannot decrypt ciphertext encrypted under the KMS key by using
            only its associated external key or CloudHSM key. Also, you cannot recreate a KMS
            key in an external key store by creating a new KMS key with the same key material.
            </para>
             
            <para>
            For more information about scheduling a KMS key for deletion, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html">Deleting
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: kms:ScheduleKeyDeletion (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CancelKeyDeletion</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisableKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ScheduleKeyDeletionRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The unique identifier of the KMS key to delete.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ScheduleKeyDeletionRequest.PendingWindowInDays">
            <summary>
            Gets and sets the property PendingWindowInDays. 
            <para>
            The waiting period, specified in number of days. After the waiting period ends, KMS
            deletes the KMS key.
            </para>
             
            <para>
            If the KMS key is a multi-Region primary key with replica keys, the waiting period
            begins when the last of its replica keys is deleted. Otherwise, the waiting period
            begins immediately.
            </para>
             
            <para>
            This value is optional. If you include a value, it must be between 7 and 30, inclusive.
            If you do not include a value, it defaults to 30. You can use the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/conditions-kms.html#conditions-kms-schedule-key-deletion-pending-window-in-days">
            <c>kms:ScheduleKeyDeletionPendingWindowInDays</c> </a> condition key to further constrain
            the values that principals can specify in the <c>PendingWindowInDays</c> parameter.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ScheduleKeyDeletionResponse">
            <summary>
            This is the response object from the ScheduleKeyDeletion operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ScheduleKeyDeletionResponse.DeletionDate">
            <summary>
            Gets and sets the property DeletionDate. 
            <para>
            The date and time after which KMS deletes the KMS key.
            </para>
             
            <para>
            If the KMS key is a multi-Region primary key with replica keys, this field does not
            appear. The deletion date for the primary key isn't known until its last replica key
            is deleted.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ScheduleKeyDeletionResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the KMS key whose deletion is scheduled.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ScheduleKeyDeletionResponse.KeyState">
            <summary>
            Gets and sets the property KeyState. 
            <para>
            The current status of the KMS key.
            </para>
             
            <para>
            For more information about how key state affects the use of a KMS key, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ScheduleKeyDeletionResponse.PendingWindowInDays">
            <summary>
            Gets and sets the property PendingWindowInDays. 
            <para>
            The waiting period before the KMS key is deleted. 
            </para>
             
            <para>
            If the KMS key is a multi-Region primary key with replicas, the waiting period begins
            when the last of its replica keys is deleted. Otherwise, the waiting period begins
            immediately.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.SignRequest">
            <summary>
            Container for the parameters to the Sign operation.
            Creates a <a href="https://en.wikipedia.org/wiki/Digital_signature">digital signature</a>
            for a message or message digest by using the private key in an asymmetric signing
            KMS key. To verify the signature, use the <a>Verify</a> operation, or use the public
            key in the same asymmetric KMS key outside of KMS. For information about asymmetric
            KMS keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            
             
            <para>
            Digital signatures are generated and verified by using asymmetric key pair, such as
            an RSA or ECC pair that is represented by an asymmetric KMS key. The key owner (or
            an authorized user) uses their private key to sign a message. Anyone with the public
            key can verify that the message was signed with that particular private key and that
            the message hasn't changed since it was signed. 
            </para>
             
            <para>
            To use the <c>Sign</c> operation, provide the following information:
            </para>
             <ul> <li> 
            <para>
            Use the <c>KeyId</c> parameter to identify an asymmetric KMS key with a <c>KeyUsage</c>
            value of <c>SIGN_VERIFY</c>. To get the <c>KeyUsage</c> value of a KMS key, use the
            <a>DescribeKey</a> operation. The caller must have <c>kms:Sign</c> permission on the
            KMS key.
            </para>
             </li> <li> 
            <para>
            Use the <c>Message</c> parameter to specify the message or message digest to sign.
            You can submit messages of up to 4096 bytes. To sign a larger message, generate a
            hash digest of the message, and then provide the hash digest in the <c>Message</c>
            parameter. To indicate whether the message is a full message or a digest, use the
            <c>MessageType</c> parameter.
            </para>
             </li> <li> 
            <para>
            Choose a signing algorithm that is compatible with the KMS key. 
            </para>
             </li> </ul> <important> 
            <para>
            When signing a message, be sure to record the KMS key and the signing algorithm. This
            information is required to verify the signature.
            </para>
             </important> <note> 
            <para>
            Best practices recommend that you limit the time during which any signature is effective.
            This deters an attack where the actor uses a signed message to establish validity
            repeatedly or long after the message is superseded. Signatures do not include a timestamp,
            but you can include a timestamp in the signed message to help you detect when its
            time to refresh the signature. 
            </para>
             </note> 
            <para>
            To verify the signature that this operation generates, use the <a>Verify</a> operation.
            Or use the <a>GetPublicKey</a> operation to download the public key and then use the
            public key to verify the signature outside of KMS. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:Sign</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>Verify</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.SignRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.SignRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.SignRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies an asymmetric KMS key. KMS uses the private key in the asymmetric KMS key
            to sign the message. The <c>KeyUsage</c> type of the KMS key must be <c>SIGN_VERIFY</c>.
            To find the <c>KeyUsage</c> of a KMS key, use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.SignRequest.Message">
            <summary>
            Gets and sets the property Message. 
            <para>
            Specifies the message or message digest to sign. Messages can be 0-4096 bytes. To
            sign a larger message, provide a message digest.
            </para>
             
            <para>
            If you provide a message digest, use the <c>DIGEST</c> value of <c>MessageType</c>
            to prevent the digest from being hashed again while signing.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.SignRequest.MessageType">
            <summary>
            Gets and sets the property MessageType. 
            <para>
            Tells KMS whether the value of the <c>Message</c> parameter should be hashed as part
            of the signing algorithm. Use <c>RAW</c> for unhashed messages; use <c>DIGEST</c>
            for message digests, which are already hashed.
            </para>
             
            <para>
            When the value of <c>MessageType</c> is <c>RAW</c>, KMS uses the standard signing
            algorithm, which begins with a hash function. When the value is <c>DIGEST</c>, KMS
            skips the hashing step in the signing algorithm.
            </para>
             <important> 
            <para>
            Use the <c>DIGEST</c> value only when the value of the <c>Message</c> parameter is
            a message digest. If you use the <c>DIGEST</c> value with an unhashed message, the
            security of the signing operation can be compromised.
            </para>
             </important> 
            <para>
            When the value of <c>MessageType</c>is <c>DIGEST</c>, the length of the <c>Message</c>
            value must match the length of hashed messages for the specified signing algorithm.
            </para>
             
            <para>
            You can submit a message digest and omit the <c>MessageType</c> or specify <c>RAW</c>
            so the digest is hashed again while signing. However, this can cause verification
            failures when verifying with a system that assumes a single hash.
            </para>
             
            <para>
            The hashing algorithm in that <c>Sign</c> uses is based on the <c>SigningAlgorithm</c>
            value.
            </para>
             <ul> <li> 
            <para>
            Signing algorithms that end in SHA_256 use the SHA_256 hashing algorithm.
            </para>
             </li> <li> 
            <para>
            Signing algorithms that end in SHA_384 use the SHA_384 hashing algorithm.
            </para>
             </li> <li> 
            <para>
            Signing algorithms that end in SHA_512 use the SHA_512 hashing algorithm.
            </para>
             </li> <li> 
            <para>
            SM2DSA uses the SM3 hashing algorithm. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-sm-offline-verification">Offline
            verification with SM2 key pairs</a>.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.SignRequest.SigningAlgorithm">
            <summary>
            Gets and sets the property SigningAlgorithm. 
            <para>
            Specifies the signing algorithm to use when signing the message. 
            </para>
             
            <para>
            Choose an algorithm that is compatible with the type and size of the specified asymmetric
            KMS key. When signing with RSA key pairs, RSASSA-PSS algorithms are preferred. We
            include RSASSA-PKCS1-v1_5 algorithms for compatibility with existing applications.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.SignResponse">
            <summary>
            This is the response object from the Sign operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.SignResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the asymmetric KMS key that was used to sign the message.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.SignResponse.Signature">
            <summary>
            Gets and sets the property Signature. 
            <para>
            The cryptographic signature that was generated for the message. 
            </para>
             <ul> <li> 
            <para>
            When used with the supported RSA signing algorithms, the encoding of this value is
            defined by <a href="https://tools.ietf.org/html/rfc8017">PKCS #1 in RFC 8017</a>.
            </para>
             </li> <li> 
            <para>
            When used with the <c>ECDSA_SHA_256</c>, <c>ECDSA_SHA_384</c>, or <c>ECDSA_SHA_512</c>
            signing algorithms, this value is a DER-encoded object as defined by ANSI X9.62–2005
            and <a href="https://tools.ietf.org/html/rfc3279#section-2.2.3">RFC 3279 Section 2.2.3</a>.
            This is the most commonly used signature format and is appropriate for most uses.
            
            </para>
             </li> </ul> 
            <para>
            When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded.
            Otherwise, it is not Base64-encoded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.SignResponse.SigningAlgorithm">
            <summary>
            Gets and sets the property SigningAlgorithm. 
            <para>
            The signing algorithm that was used to sign the message.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.Tag">
            <summary>
            A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values
            are both required, but tag values can be empty (null) strings.
            
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            For information about the rules that apply to tag keys and tag values, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html">User-Defined
            Tag Restrictions</a> in the <i>Amazon Web Services Billing and Cost Management User
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Tag.TagKey">
            <summary>
            Gets and sets the property TagKey. 
            <para>
            The key of the tag.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.Tag.TagValue">
            <summary>
            Gets and sets the property TagValue. 
            <para>
            The value of the tag.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.TagException">
            <summary>
            The request was rejected because one or more tags are not valid.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.TagException.#ctor(System.String)">
            <summary>
            Constructs a new TagException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.TagException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of TagException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.TagException.#ctor(System.Exception)">
            <summary>
            Construct instance of TagException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.TagException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TagException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.TagException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TagException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.TagResourceRequest">
            <summary>
            Container for the parameters to the TagResource operation.
            Adds or edits tags on a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a>.
            
             <note> 
            <para>
            Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            Each tag consists of a tag key and a tag value, both of which are case-sensitive strings.
            The tag value can be an empty (null) string. To add a tag, specify a new tag key and
            a tag value. To edit a tag, specify an existing tag key and a new tag value.
            </para>
             
            <para>
            You can use this operation to tag a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a>, but you cannot tag an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed key</a>, an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-owned-cmk">Amazon
            Web Services owned key</a>, a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#keystore-concept">custom
            key store</a>, or an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#alias-concept">alias</a>.
            </para>
             
            <para>
            You can also add tags to a KMS key while creating it (<a>CreateKey</a>) or replicating
            it (<a>ReplicateKey</a>).
            </para>
             
            <para>
            For information about using tags in KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging
            keys</a>. For general information about tags, including the format and syntax, see
            <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon
            Web Services resources</a> in the <i>Amazon Web Services General Reference</i>. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:TagResource</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReplicateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>UntagResource</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.TagResourceRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies a customer managed key in the account and Region.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.TagResourceRequest.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            One or more tags. Each tag consists of a tag key and a tag value. The tag value can
            be an empty (null) string. 
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            You cannot have more than one tag on a KMS key with the same tag key. If you specify
            an existing tag key with a different tag value, KMS replaces the current tag value
            with the specified one.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.TagResourceResponse">
            <summary>
            This is the response object from the TagResource operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.UnsupportedOperationException">
            <summary>
            The request was rejected because a specified parameter is not supported or a specified
            resource is not valid for this operation.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.UnsupportedOperationException.#ctor(System.String)">
            <summary>
            Constructs a new UnsupportedOperationException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.UnsupportedOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of UnsupportedOperationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.UnsupportedOperationException.#ctor(System.Exception)">
            <summary>
            Construct instance of UnsupportedOperationException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.UnsupportedOperationException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UnsupportedOperationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.UnsupportedOperationException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UnsupportedOperationException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.UntagResourceRequest">
            <summary>
            Container for the parameters to the UntagResource operation.
            Deletes tags from a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a>. To delete a tag, specify the tag key and the KMS key.
            
             <note> 
            <para>
            Tagging or untagging a KMS key can allow or deny permission to the KMS key. For details,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            When it succeeds, the <c>UntagResource</c> operation doesn't return any output. Also,
            if the specified tag key isn't found on the KMS key, it doesn't throw an exception
            or return a response. To confirm that the operation worked, use the <a>ListResourceTags</a>
            operation.
            </para>
             
            <para>
            For information about using tags in KMS, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html">Tagging
            keys</a>. For general information about tags, including the format and syntax, see
            <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon
            Web Services resources</a> in the <i>Amazon Web Services General Reference</i>. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UntagResource</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListResourceTags</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReplicateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>TagResource</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UntagResourceRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the KMS key from which you are removing tags.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UntagResourceRequest.TagKeys">
            <summary>
            Gets and sets the property TagKeys. 
            <para>
            One or more tag keys. Specify only the tag keys, not the tag values.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.UntagResourceResponse">
            <summary>
            This is the response object from the UntagResource operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.UpdateAliasRequest">
            <summary>
            Container for the parameters to the UpdateAlias operation.
            Associates an existing KMS alias with a different KMS key. Each alias is associated
            with only one KMS key at a time, although a KMS key can have multiple aliases. The
            alias and the KMS key must be in the same Amazon Web Services account and Region.
            
             <note> 
            <para>
            Adding, deleting, or updating an alias can allow or deny permission to the KMS key.
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/abac.html">ABAC
            for KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             </note> 
            <para>
            The current and new KMS key must be the same type (both symmetric or both asymmetric
            or both HMAC), and they must have the same key usage. This restriction prevents errors
            in code that uses aliases. If you must assign an alias to a different type of KMS
            key, use <a>DeleteAlias</a> to delete the old alias and <a>CreateAlias</a> to create
            a new alias.
            </para>
             
            <para>
            You cannot use <c>UpdateAlias</c> to change an alias name. To change an alias name,
            use <a>DeleteAlias</a> to delete the old alias and <a>CreateAlias</a> to create a
            new alias.
            </para>
             
            <para>
            Because an alias is not a property of a KMS key, you can create, update, and delete
            the aliases of a KMS key without affecting the KMS key. Also, aliases do not appear
            in the response from the <a>DescribeKey</a> operation. To get the aliases of all KMS
            keys in the account, use the <a>ListAliases</a> operation. 
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b> 
            </para>
             <ul> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the alias (IAM policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the current KMS key (key policy).
            </para>
             </li> <li> 
            <para>
             <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateAlias</a>
            on the new KMS key (key policy).
            </para>
             </li> </ul> 
            <para>
            For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html#alias-access">Controlling
            access to aliases</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteAlias</a> 
            </para>
             </li> <li> 
            <para>
             <a>ListAliases</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateAliasRequest.AliasName">
            <summary>
            Gets and sets the property AliasName. 
            <para>
            Identifies the alias that is changing its KMS key. This value must begin with <c>alias/</c>
            followed by the alias name, such as <c>alias/ExampleAlias</c>. You cannot use <c>UpdateAlias</c>
            to change the alias name.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateAliasRequest.TargetKeyId">
            <summary>
            Gets and sets the property TargetKeyId. 
            <para>
            Identifies the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer
            managed key</a> to associate with the alias. You don't have permission to associate
            an alias with an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon
            Web Services managed key</a>.
            </para>
             
            <para>
            The KMS key must be in the same Amazon Web Services account and Region as the alias.
            Also, the new target KMS key must be the same type as the current target KMS key (both
            symmetric or both asymmetric or both HMAC) and they must have the same key usage.
            
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
             
            <para>
            To verify that the alias is mapped to the correct KMS key, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.UpdateAliasResponse">
            <summary>
            This is the response object from the UpdateAlias operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest">
            <summary>
            Container for the parameters to the UpdateCustomKeyStore operation.
            Changes the properties of a custom key store. You can use this operation to change
            the properties of an CloudHSM key store or an external key store.
            
             
            <para>
            Use the required <c>CustomKeyStoreId</c> parameter to identify the custom key store.
            Use the remaining optional parameters to change its properties. This operation does
            not return any property values. To verify the updated property values, use the <a>DescribeCustomKeyStores</a>
            operation.
            </para>
             
            <para>
             This operation is part of the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html">custom
            key stores</a> feature in KMS, which combines the convenience and extensive integration
            of KMS with the isolation and control of a key store that you own and manage.
            </para>
             <important> 
            <para>
            When updating the properties of an external key store, verify that the updated settings
            connect your key store, via the external key store proxy, to the same external key
            manager as the previous settings, or to a backup or snapshot of the external key manager
            with the same cryptographic keys. If the updated connection settings fail, you can
            fix them and retry, although an extended delay might disrupt Amazon Web Services services.
            However, if KMS permanently loses its access to cryptographic keys, ciphertext encrypted
            under those keys is unrecoverable.
            </para>
             </important> <note> 
            <para>
            For external key stores:
            </para>
             
            <para>
            Some external key managers provide a simpler method for updating an external key store.
            For details, see your external key manager documentation.
            </para>
             
            <para>
            When updating an external key store in the KMS console, you can upload a JSON-based
            proxy configuration file with the desired values. You cannot upload the proxy configuration
            file to the <c>UpdateCustomKeyStore</c> operation. However, you can use the file to
            help you determine the correct values for the <c>UpdateCustomKeyStore</c> parameters.
            </para>
             </note> 
            <para>
            For an CloudHSM key store, you can use this operation to change the custom key store
            friendly name (<c>NewCustomKeyStoreName</c>), to tell KMS about a change to the <c>kmsuser</c>
            crypto user password (<c>KeyStorePassword</c>), or to associate the custom key store
            with a different, but related, CloudHSM cluster (<c>CloudHsmClusterId</c>). To update
            any property of an CloudHSM key store, the <c>ConnectionState</c> of the CloudHSM
            key store must be <c>DISCONNECTED</c>. 
            </para>
             
            <para>
            For an external key store, you can use this operation to change the custom key store
            friendly name (<c>NewCustomKeyStoreName</c>), or to tell KMS about a change to the
            external key store proxy authentication credentials (<c>XksProxyAuthenticationCredential</c>),
            connection method (<c>XksProxyConnectivity</c>), external proxy endpoint (<c>XksProxyUriEndpoint</c>)
            and path (<c>XksProxyUriPath</c>). For external key stores with an <c>XksProxyConnectivity</c>
            of <c>VPC_ENDPOINT_SERVICE</c>, you can also update the Amazon VPC endpoint service
            name (<c>XksProxyVpcEndpointServiceName</c>). To update most properties of an external
            key store, the <c>ConnectionState</c> of the external key store must be <c>DISCONNECTED</c>.
            However, you can update the <c>CustomKeyStoreName</c>, <c>XksProxyAuthenticationCredential</c>,
            and <c>XksProxyUriPath</c> of an external key store when it is in the CONNECTED or
            DISCONNECTED state. 
            </para>
             
            <para>
            If your update requires a <c>DISCONNECTED</c> state, before using <c>UpdateCustomKeyStore</c>,
            use the <a>DisconnectCustomKeyStore</a> operation to disconnect the custom key store.
            After the <c>UpdateCustomKeyStore</c> operation completes, use the <a>ConnectCustomKeyStore</a>
            to reconnect the custom key store. To find the <c>ConnectionState</c> of the custom
            key store, use the <a>DescribeCustomKeyStores</a> operation. 
            </para>
             
            <para>
             
            </para>
             
            <para>
            Before updating the custom key store, verify that the new values allow KMS to connect
            the custom key store to its backing key store. For example, before you change the
            <c>XksProxyUriPath</c> value, verify that the external key store proxy is reachable
            at the new path.
            </para>
             
            <para>
            If the operation succeeds, it returns a JSON object with no properties.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a custom key store
            in a different Amazon Web Services account.
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateCustomKeyStore</a>
            (IAM policy)
            </para>
             
            <para>
             <b>Related operations:</b> 
            </para>
             <ul> <li> 
            <para>
             <a>ConnectCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>CreateCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DeleteCustomKeyStore</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeCustomKeyStores</a> 
            </para>
             </li> <li> 
            <para>
             <a>DisconnectCustomKeyStore</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest.CloudHsmClusterId">
            <summary>
            Gets and sets the property CloudHsmClusterId. 
            <para>
            Associates the custom key store with a related CloudHSM cluster. This parameter is
            valid only for custom key stores with a <c>CustomKeyStoreType</c> of <c>AWS_CLOUDHSM</c>.
            </para>
             
            <para>
            Enter the cluster ID of the cluster that you used to create the custom key store or
            a cluster that shares a backup history and has the same cluster certificate as the
            original cluster. You cannot use this parameter to associate a custom key store with
            an unrelated cluster. In addition, the replacement cluster must <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore">fulfill
            the requirements</a> for a cluster associated with a custom key store. To view the
            cluster certificate of a cluster, use the <a href="https://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html">DescribeClusters</a>
            operation.
            </para>
             
            <para>
            To change this value, the CloudHSM key store must be disconnected.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest.CustomKeyStoreId">
            <summary>
            Gets and sets the property CustomKeyStoreId. 
            <para>
            Identifies the custom key store that you want to update. Enter the ID of the custom
            key store. To find the ID of a custom key store, use the <a>DescribeCustomKeyStores</a>
            operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest.KeyStorePassword">
            <summary>
            Gets and sets the property KeyStorePassword. 
            <para>
            Enter the current password of the <c>kmsuser</c> crypto user (CU) in the CloudHSM
            cluster that is associated with the custom key store. This parameter is valid only
            for custom key stores with a <c>CustomKeyStoreType</c> of <c>AWS_CLOUDHSM</c>.
            </para>
             
            <para>
            This parameter tells KMS the current password of the <c>kmsuser</c> crypto user (CU).
            It does not set or change the password of any users in the CloudHSM cluster.
            </para>
             
            <para>
            To change this value, the CloudHSM key store must be disconnected.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest.NewCustomKeyStoreName">
            <summary>
            Gets and sets the property NewCustomKeyStoreName. 
            <para>
            Changes the friendly name of the custom key store to the value that you specify. The
            custom key store name must be unique in the Amazon Web Services account.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important> 
            <para>
            To change this value, an CloudHSM key store must be disconnected. An external key
            store can be connected or disconnected.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest.XksProxyAuthenticationCredential">
            <summary>
            Gets and sets the property XksProxyAuthenticationCredential. 
            <para>
            Changes the credentials that KMS uses to sign requests to the external key store proxy
            (XKS proxy). This parameter is valid only for custom key stores with a <c>CustomKeyStoreType</c>
            of <c>EXTERNAL_KEY_STORE</c>.
            </para>
             
            <para>
            You must specify both the <c>AccessKeyId</c> and <c>SecretAccessKey</c> value in the
            authentication credential, even if you are only updating one value.
            </para>
             
            <para>
            This parameter doesn't establish or change your authentication credentials on the
            proxy. It just tells KMS the credential that you established with your external key
            store proxy. For example, if you rotate the credential on your external key store
            proxy, you can use this parameter to update the credential in KMS.
            </para>
             
            <para>
            You can change this value when the external key store is connected or disconnected.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest.XksProxyConnectivity">
            <summary>
            Gets and sets the property XksProxyConnectivity. 
            <para>
            Changes the connectivity setting for the external key store. To indicate that the
            external key store proxy uses a Amazon VPC endpoint service to communicate with KMS,
            specify <c>VPC_ENDPOINT_SERVICE</c>. Otherwise, specify <c>PUBLIC_ENDPOINT</c>.
            </para>
             
            <para>
            If you change the <c>XksProxyConnectivity</c> to <c>VPC_ENDPOINT_SERVICE</c>, you
            must also change the <c>XksProxyUriEndpoint</c> and add an <c>XksProxyVpcEndpointServiceName</c>
            value. 
            </para>
             
            <para>
            If you change the <c>XksProxyConnectivity</c> to <c>PUBLIC_ENDPOINT</c>, you must
            also change the <c>XksProxyUriEndpoint</c> and specify a null or empty string for
            the <c>XksProxyVpcEndpointServiceName</c> value.
            </para>
             
            <para>
            To change this value, the external key store must be disconnected.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest.XksProxyUriEndpoint">
            <summary>
            Gets and sets the property XksProxyUriEndpoint. 
            <para>
            Changes the URI endpoint that KMS uses to connect to your external key store proxy
            (XKS proxy). This parameter is valid only for custom key stores with a <c>CustomKeyStoreType</c>
            of <c>EXTERNAL_KEY_STORE</c>.
            </para>
             
            <para>
            For external key stores with an <c>XksProxyConnectivity</c> value of <c>PUBLIC_ENDPOINT</c>,
            the protocol must be HTTPS.
            </para>
             
            <para>
            For external key stores with an <c>XksProxyConnectivity</c> value of <c>VPC_ENDPOINT_SERVICE</c>,
            specify <c>https://</c> followed by the private DNS name associated with the VPC endpoint
            service. Each external key store must use a different private DNS name.
            </para>
             
            <para>
            The combined <c>XksProxyUriEndpoint</c> and <c>XksProxyUriPath</c> values must be
            unique in the Amazon Web Services account and Region.
            </para>
             
            <para>
            To change this value, the external key store must be disconnected.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest.XksProxyUriPath">
            <summary>
            Gets and sets the property XksProxyUriPath. 
            <para>
            Changes the base path to the proxy APIs for this external key store. To find this
            value, see the documentation for your external key manager and external key store
            proxy (XKS proxy). This parameter is valid only for custom key stores with a <c>CustomKeyStoreType</c>
            of <c>EXTERNAL_KEY_STORE</c>.
            </para>
             
            <para>
            The value must start with <c>/</c> and must end with <c>/kms/xks/v1</c>, where <c>v1</c>
            represents the version of the KMS external key store proxy API. You can include an
            optional prefix between the required elements such as <c>/<i>example</i>/kms/xks/v1</c>.
            </para>
             
            <para>
            The combined <c>XksProxyUriEndpoint</c> and <c>XksProxyUriPath</c> values must be
            unique in the Amazon Web Services account and Region.
            </para>
             
            <para>
            You can change this value when the external key store is connected or disconnected.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateCustomKeyStoreRequest.XksProxyVpcEndpointServiceName">
            <summary>
            Gets and sets the property XksProxyVpcEndpointServiceName. 
            <para>
            Changes the name that KMS uses to identify the Amazon VPC endpoint service for your
            external key store proxy (XKS proxy). This parameter is valid when the <c>CustomKeyStoreType</c>
            is <c>EXTERNAL_KEY_STORE</c> and the <c>XksProxyConnectivity</c> is <c>VPC_ENDPOINT_SERVICE</c>.
            </para>
             
            <para>
            To change this value, the external key store must be disconnected.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.UpdateCustomKeyStoreResponse">
            <summary>
            This is the response object from the UpdateCustomKeyStore operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.UpdateKeyDescriptionRequest">
            <summary>
            Container for the parameters to the UpdateKeyDescription operation.
            Updates the description of a KMS key. To see the description of a KMS key, use <a>DescribeKey</a>.
            
            
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot perform this operation on a KMS key in a
            different Amazon Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:UpdateKeyDescription</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>DescribeKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateKeyDescriptionRequest.Description">
            <summary>
            Gets and sets the property Description. 
            <para>
            New description for the KMS key.
            </para>
             <important> 
            <para>
            Do not include confidential or sensitive information in this field. This field may
            be displayed in plaintext in CloudTrail logs and other output.
            </para>
             </important>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdateKeyDescriptionRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Updates the description of the specified KMS key.
            </para>
             
            <para>
            Specify the key ID or key ARN of the KMS key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.UpdateKeyDescriptionResponse">
            <summary>
            This is the response object from the UpdateKeyDescription operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.UpdatePrimaryRegionRequest">
            <summary>
            Container for the parameters to the UpdatePrimaryRegion operation.
            Changes the primary key of a multi-Region key. 
            
             
            <para>
            This operation changes the replica key in the specified Region to a primary key and
            changes the former primary key to a replica key. For example, suppose you have a primary
            key in <c>us-east-1</c> and a replica key in <c>eu-west-2</c>. If you run <c>UpdatePrimaryRegion</c>
            with a <c>PrimaryRegion</c> value of <c>eu-west-2</c>, the primary key is now the
            key in <c>eu-west-2</c>, and the key in <c>us-east-1</c> becomes a replica key. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-update">Updating
            the primary Region</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            This operation supports <i>multi-Region keys</i>, an KMS feature that lets you create
            multiple interoperable KMS keys in different Amazon Web Services Regions. Because
            these KMS keys have the same key ID, key material, and other metadata, you can use
            them interchangeably to encrypt data in one Amazon Web Services Region and decrypt
            it in a different Amazon Web Services Region without re-encrypting the data or making
            a cross-Region call. For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Multi-Region
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The <i>primary key</i> of a multi-Region key is the source for properties that are
            always shared by primary and replica keys, including the key material, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id">key
            ID</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-spec">key
            spec</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-usage">key
            usage</a>, <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-origin">key
            material origin</a>, and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html">automatic
            key rotation</a>. It's the only key that can be replicated. You cannot <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html">delete
            the primary key</a> until all replica keys are deleted.
            </para>
             
            <para>
            The key ID and primary Region that you specify uniquely identify the replica key that
            will become the primary key. The primary Region must already have a replica key. This
            operation does not create a KMS key in the specified Region. To find the replica keys,
            use the <a>DescribeKey</a> operation on the primary key or any replica key. To create
            a replica key, use the <a>ReplicateKey</a> operation.
            </para>
             
            <para>
            You can run this operation while using the affected multi-Region keys in cryptographic
            operations. This operation should not delay, interrupt, or cause failures in cryptographic
            operations. 
            </para>
             
            <para>
            Even after this operation completes, the process of updating the primary Region might
            still be in progress for a few more seconds. Operations such as <c>DescribeKey</c>
            might display both the old and new primary keys as replicas. The old and new primary
            keys have a transient key state of <c>Updating</c>. The original key state is restored
            when the update is complete. While the key state is <c>Updating</c>, you can use the
            keys in cryptographic operations, but you cannot replicate the new primary key or
            perform certain management operations, such as enabling or disabling these keys. For
            details about the <c>Updating</c> key state, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            This operation does not return any output. To verify that primary key is changed,
            use the <a>DescribeKey</a> operation.
            </para>
             
            <para>
             <b>Cross-account use</b>: No. You cannot use this operation in a different Amazon
            Web Services account. 
            </para>
             
            <para>
             <b>Required permissions</b>: 
            </para>
             <ul> <li> 
            <para>
             <c>kms:UpdatePrimaryRegion</c> on the current primary key (in the primary key's Region).
            Include this permission primary key's key policy.
            </para>
             </li> <li> 
            <para>
             <c>kms:UpdatePrimaryRegion</c> on the current replica key (in the replica key's Region).
            Include this permission in the replica key's key policy.
            </para>
             </li> </ul> 
            <para>
             <b>Related operations</b> 
            </para>
             <ul> <li> 
            <para>
             <a>CreateKey</a> 
            </para>
             </li> <li> 
            <para>
             <a>ReplicateKey</a> 
            </para>
             </li> </ul> 
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdatePrimaryRegionRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the current primary key. When the operation completes, this KMS key will
            be a replica key.
            </para>
             
            <para>
            Specify the key ID or key ARN of a multi-Region primary key.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>mrk-1234abcd12ab34cd56ef1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</c>
            
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.UpdatePrimaryRegionRequest.PrimaryRegion">
            <summary>
            Gets and sets the property PrimaryRegion. 
            <para>
            The Amazon Web Services Region of the new primary key. Enter the Region ID, such as
            <c>us-east-1</c> or <c>ap-southeast-2</c>. There must be an existing replica key in
            this Region. 
            </para>
             
            <para>
            When the operation completes, the multi-Region key in this Region will be the primary
            key.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.UpdatePrimaryRegionResponse">
            <summary>
            This is the response object from the UpdatePrimaryRegion operation.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.VerifyMacRequest">
            <summary>
            Container for the parameters to the VerifyMac operation.
            Verifies the hash-based message authentication code (HMAC) for a specified message,
            HMAC KMS key, and MAC algorithm. To verify the HMAC, <c>VerifyMac</c> computes an
            HMAC using the message, HMAC KMS key, and MAC algorithm that you specify, and compares
            the computed HMAC to the HMAC that you specify. If the HMACs are identical, the verification
            succeeds; otherwise, it fails. Verification indicates that the message hasn't changed
            since the HMAC was calculated, and the specified key was used to generate and verify
            the HMAC.
            
             
            <para>
            HMAC KMS keys and the HMAC algorithms that KMS uses conform to industry standards
            defined in <a href="https://datatracker.ietf.org/doc/html/rfc2104">RFC 2104</a>.
            </para>
             
            <para>
            This operation is part of KMS support for HMAC KMS keys. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/hmac.html">HMAC
            keys in KMS</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:VerifyMac</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>GenerateMac</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyMacRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyMacRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyMacRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The KMS key that will be used in the verification.
            </para>
             
            <para>
            Enter a key ID of the KMS key that was used to generate the HMAC. If you identify
            a different KMS key, the <c>VerifyMac</c> operation fails.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyMacRequest.Mac">
            <summary>
            Gets and sets the property Mac. 
            <para>
            The HMAC to verify. Enter the HMAC that was generated by the <a>GenerateMac</a> operation
            when you specified the same message, HMAC KMS key, and MAC algorithm as the values
            specified in this request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyMacRequest.MacAlgorithm">
            <summary>
            Gets and sets the property MacAlgorithm. 
            <para>
            The MAC algorithm that will be used in the verification. Enter the same MAC algorithm
            that was used to compute the HMAC. This algorithm must be supported by the HMAC KMS
            key identified by the <c>KeyId</c> parameter.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyMacRequest.Message">
            <summary>
            Gets and sets the property Message. 
            <para>
            The message that will be used in the verification. Enter the same message that was
            used to generate the HMAC.
            </para>
             
            <para>
             <a>GenerateMac</a> and <c>VerifyMac</c> do not provide special handling for message
            digests. If you generated an HMAC for a hash digest of a message, you must verify
            the HMAC for the same hash digest.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.VerifyMacResponse">
            <summary>
            This is the response object from the VerifyMac operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyMacResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The HMAC KMS key used in the verification.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyMacResponse.MacAlgorithm">
            <summary>
            Gets and sets the property MacAlgorithm. 
            <para>
            The MAC algorithm used in the verification.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyMacResponse.MacValid">
            <summary>
            Gets and sets the property MacValid. 
            <para>
            A Boolean value that indicates whether the HMAC was verified. A value of <c>True</c>
            indicates that the HMAC (<c>Mac</c>) was generated with the specified <c>Message</c>,
            HMAC KMS key (<c>KeyID</c>) and <c>MacAlgorithm.</c>.
            </para>
             
            <para>
            If the HMAC is not verified, the <c>VerifyMac</c> operation fails with a <c>KMSInvalidMacException</c>
            exception. This exception indicates that one or more of the inputs changed since the
            HMAC was computed.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.VerifyRequest">
            <summary>
            Container for the parameters to the Verify operation.
            Verifies a digital signature that was generated by the <a>Sign</a> operation. 
            
              
            <para>
            Verification confirms that an authorized user signed the message with the specified
            KMS key and signing algorithm, and the message hasn't changed since it was signed.
            If the signature is verified, the value of the <c>SignatureValid</c> field in the
            response is <c>True</c>. If the signature verification fails, the <c>Verify</c> operation
            fails with an <c>KMSInvalidSignatureException</c> exception.
            </para>
             
            <para>
            A digital signature is generated by using the private key in an asymmetric KMS key.
            The signature is verified by using the public key in the same asymmetric KMS key.
            For information about asymmetric KMS keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Asymmetric
            KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
            To use the <c>Verify</c> operation, specify the same asymmetric KMS key, message,
            and signing algorithm that were used to produce the signature. The message type does
            not need to be the same as the one used for signing, but it must indicate whether
            the value of the <c>Message</c> parameter should be hashed as part of the verification
            process.
            </para>
             
            <para>
            You can also verify the digital signature by using the public key of the KMS key outside
            of KMS. Use the <a>GetPublicKey</a> operation to download the public key in the asymmetric
            KMS key and then use the public key to verify the signature outside of KMS. The advantage
            of using the <c>Verify</c> operation is that it is performed within KMS. As a result,
            it's easy to call, the operation is performed within the FIPS boundary, it is logged
            in CloudTrail, and you can use key policy and IAM policy to determine who is authorized
            to use the KMS key to verify signatures.
            </para>
             
            <para>
            To verify a signature outside of KMS with an SM2 public key (China Regions only),
            you must specify the distinguishing ID. By default, KMS uses <c>1234567812345678</c>
            as the distinguishing ID. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-sm-offline-verification">Offline
            verification with SM2 key pairs</a>.
            </para>
             
            <para>
            The KMS key that you use for this operation must be in a compatible key state. For
            details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key
            states of KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
             
            <para>
             <b>Cross-account use</b>: Yes. To perform this operation with a KMS key in a different
            Amazon Web Services account, specify the key ARN or alias ARN in the value of the
            <c>KeyId</c> parameter. 
            </para>
             
            <para>
             <b>Required permissions</b>: <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">kms:Verify</a>
            (key policy)
            </para>
             
            <para>
             <b>Related operations</b>: <a>Sign</a> 
            </para>
             
            <para>
             <b>Eventual consistency</b>: The KMS API follows an eventual consistency model. For
            more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">KMS
            eventual consistency</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks if your request will succeed. <c>DryRun</c> is an optional parameter. 
            </para>
             
            <para>
            To learn more about how to use this parameter, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-dryrun.html">Testing
            your KMS API calls</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyRequest.GrantTokens">
            <summary>
            Gets and sets the property GrantTokens. 
            <para>
            A list of grant tokens.
            </para>
             
            <para>
            Use a grant token when your permission to call this operation comes from a new grant
            that has not yet achieved <i>eventual consistency</i>. For more information, see <a
            href="https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token">Grant
            token</a> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token">Using
            a grant token</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            Identifies the asymmetric KMS key that will be used to verify the signature. This
            must be the same KMS key that was used to generate the signature. If you specify a
            different KMS key, the signature verification fails.
            </para>
             
            <para>
            To specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using
            an alias name, prefix it with <c>"alias/"</c>. To specify a KMS key in a different
            Amazon Web Services account, you must use the key ARN or alias ARN.
            </para>
             
            <para>
            For example:
            </para>
             <ul> <li> 
            <para>
            Key ID: <c>1234abcd-12ab-34cd-56ef-1234567890ab</c> 
            </para>
             </li> <li> 
            <para>
            Key ARN: <c>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</c>
            
            </para>
             </li> <li> 
            <para>
            Alias name: <c>alias/ExampleAlias</c> 
            </para>
             </li> <li> 
            <para>
            Alias ARN: <c>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</c> 
            </para>
             </li> </ul> 
            <para>
            To get the key ID and key ARN for a KMS key, use <a>ListKeys</a> or <a>DescribeKey</a>.
            To get the alias name and alias ARN, use <a>ListAliases</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyRequest.Message">
            <summary>
            Gets and sets the property Message. 
            <para>
            Specifies the message that was signed. You can submit a raw message of up to 4096
            bytes, or a hash digest of the message. If you submit a digest, use the <c>MessageType</c>
            parameter with a value of <c>DIGEST</c>.
            </para>
             
            <para>
            If the message specified here is different from the message that was signed, the signature
            verification fails. A message and its hash digest are considered to be the same message.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyRequest.MessageType">
            <summary>
            Gets and sets the property MessageType. 
            <para>
            Tells KMS whether the value of the <c>Message</c> parameter should be hashed as part
            of the signing algorithm. Use <c>RAW</c> for unhashed messages; use <c>DIGEST</c>
            for message digests, which are already hashed.
            </para>
             
            <para>
            When the value of <c>MessageType</c> is <c>RAW</c>, KMS uses the standard signing
            algorithm, which begins with a hash function. When the value is <c>DIGEST</c>, KMS
            skips the hashing step in the signing algorithm.
            </para>
             <important> 
            <para>
            Use the <c>DIGEST</c> value only when the value of the <c>Message</c> parameter is
            a message digest. If you use the <c>DIGEST</c> value with an unhashed message, the
            security of the verification operation can be compromised.
            </para>
             </important> 
            <para>
            When the value of <c>MessageType</c>is <c>DIGEST</c>, the length of the <c>Message</c>
            value must match the length of hashed messages for the specified signing algorithm.
            </para>
             
            <para>
            You can submit a message digest and omit the <c>MessageType</c> or specify <c>RAW</c>
            so the digest is hashed again while signing. However, if the signed message is hashed
            once while signing, but twice while verifying, verification fails, even when the message
            hasn't changed.
            </para>
             
            <para>
            The hashing algorithm in that <c>Verify</c> uses is based on the <c>SigningAlgorithm</c>
            value.
            </para>
             <ul> <li> 
            <para>
            Signing algorithms that end in SHA_256 use the SHA_256 hashing algorithm.
            </para>
             </li> <li> 
            <para>
            Signing algorithms that end in SHA_384 use the SHA_384 hashing algorithm.
            </para>
             </li> <li> 
            <para>
            Signing algorithms that end in SHA_512 use the SHA_512 hashing algorithm.
            </para>
             </li> <li> 
            <para>
            SM2DSA uses the SM3 hashing algorithm. For details, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-sm-offline-verification">Offline
            verification with SM2 key pairs</a>.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyRequest.Signature">
            <summary>
            Gets and sets the property Signature. 
            <para>
            The signature that the <c>Sign</c> operation generated.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyRequest.SigningAlgorithm">
            <summary>
            Gets and sets the property SigningAlgorithm. 
            <para>
            The signing algorithm that was used to sign the message. If you submit a different
            algorithm, the signature verification fails.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.VerifyResponse">
            <summary>
            This is the response object from the Verify operation.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyResponse.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The Amazon Resource Name (<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-ARN">key
            ARN</a>) of the asymmetric KMS key that was used to verify the signature.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyResponse.SignatureValid">
            <summary>
            Gets and sets the property SignatureValid. 
            <para>
            A Boolean value that indicates whether the signature was verified. A value of <c>True</c>
            indicates that the <c>Signature</c> was produced by signing the <c>Message</c> with
            the specified <c>KeyID</c> and <c>SigningAlgorithm.</c> If the signature is not verified,
            the <c>Verify</c> operation fails with a <c>KMSInvalidSignatureException</c> exception.
            
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.VerifyResponse.SigningAlgorithm">
            <summary>
            Gets and sets the property SigningAlgorithm. 
            <para>
            The signing algorithm that was used to verify the signature.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksKeyAlreadyInUseException">
            <summary>
            The request was rejected because the (<c>XksKeyId</c>) is already associated with
            another KMS key in this external key store. Each KMS key in an external key store
            must be associated with a different external key.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyAlreadyInUseException.#ctor(System.String)">
            <summary>
            Constructs a new XksKeyAlreadyInUseException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyAlreadyInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of XksKeyAlreadyInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyAlreadyInUseException.#ctor(System.Exception)">
            <summary>
            Construct instance of XksKeyAlreadyInUseException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyAlreadyInUseException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksKeyAlreadyInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyAlreadyInUseException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksKeyAlreadyInUseException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksKeyConfigurationType">
            <summary>
            Information about the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key">external
            key </a>that is associated with a KMS key in an external key store. 
            
             
            <para>
            This element appears in a <a>CreateKey</a> or <a>DescribeKey</a> response only for
            a KMS key in an external key store.
            </para>
             
            <para>
            The <i>external key</i> is a symmetric encryption key that is hosted by an external
            key manager outside of Amazon Web Services. When you use the KMS key in an external
            key store in a cryptographic operation, the cryptographic operation is performed in
            the external key manager using the specified external key. For more information, see
            <a href="https://docs.aws.amazon.com/kms/latest/developerguide/keystore-external.html#concept-external-key">External
            key</a> in the <i>Key Management Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.XksKeyConfigurationType.Id">
            <summary>
            Gets and sets the property Id. 
            <para>
            The ID of the external key in its external key manager. This is the ID that the external
            key store proxy uses to identify the external key.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksKeyInvalidConfigurationException">
            <summary>
            The request was rejected because the external key specified by the <c>XksKeyId</c>
            parameter did not meet the configuration requirements for an external key store.
            
             
            <para>
            The external key must be an AES-256 symmetric key that is enabled and performs encryption
            and decryption.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyInvalidConfigurationException.#ctor(System.String)">
            <summary>
            Constructs a new XksKeyInvalidConfigurationException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyInvalidConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of XksKeyInvalidConfigurationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyInvalidConfigurationException.#ctor(System.Exception)">
            <summary>
            Construct instance of XksKeyInvalidConfigurationException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyInvalidConfigurationException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksKeyInvalidConfigurationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyInvalidConfigurationException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksKeyInvalidConfigurationException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksKeyNotFoundException">
            <summary>
            The request was rejected because the external key store proxy could not find the external
            key. This exception is thrown when the value of the <c>XksKeyId</c> parameter doesn't
            identify a key in the external key manager associated with the external key proxy.
            
             
            <para>
            Verify that the <c>XksKeyId</c> represents an existing key in the external key manager.
            Use the key identifier that the external key store proxy uses to identify the key.
            For details, see the documentation provided with your external key store proxy or
            key manager.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new XksKeyNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of XksKeyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of XksKeyNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksKeyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksKeyNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksKeyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksProxyAuthenticationCredentialType">
            <summary>
            KMS uses the authentication credential to sign requests that it sends to the external
            key store proxy (XKS proxy) on your behalf. You establish these credentials on your
            external key store proxy and report them to KMS.
            
             
            <para>
            The <c>XksProxyAuthenticationCredential</c> includes two required elements.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.XksProxyAuthenticationCredentialType.AccessKeyId">
            <summary>
            Gets and sets the property AccessKeyId. 
            <para>
            A unique identifier for the raw secret access key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.XksProxyAuthenticationCredentialType.RawSecretAccessKey">
            <summary>
            Gets and sets the property RawSecretAccessKey. 
            <para>
            A secret string of 43-64 characters. Valid characters are a-z, A-Z, 0-9, /, +, and
            =.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksProxyConfigurationType">
            <summary>
            Detailed information about the external key store proxy (XKS proxy). Your external
            key store proxy translates KMS requests into a format that your external key manager
            can understand. These fields appear in a <a>DescribeCustomKeyStores</a> response only
            when the <c>CustomKeyStoreType</c> is <c>EXTERNAL_KEY_STORE</c>.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.XksProxyConfigurationType.AccessKeyId">
            <summary>
            Gets and sets the property AccessKeyId. 
            <para>
            The part of the external key store <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_CreateCustomKeyStore.html#KMS-CreateCustomKeyStore-request-XksProxyAuthenticationCredential">proxy
            authentication credential</a> that uniquely identifies the secret access key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.XksProxyConfigurationType.Connectivity">
            <summary>
            Gets and sets the property Connectivity. 
            <para>
            Indicates whether the external key store proxy uses a public endpoint or an Amazon
            VPC endpoint service to communicate with KMS.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.XksProxyConfigurationType.UriEndpoint">
            <summary>
            Gets and sets the property UriEndpoint. 
            <para>
            The URI endpoint for the external key store proxy.
            </para>
             
            <para>
            If the external key store proxy has a public endpoint, it is displayed here.
            </para>
             
            <para>
            If the external key store proxy uses an Amazon VPC endpoint service name, this field
            displays the private DNS name associated with the VPC endpoint service.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.XksProxyConfigurationType.UriPath">
            <summary>
            Gets and sets the property UriPath. 
            <para>
            The path to the external key store proxy APIs.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.XksProxyConfigurationType.VpcEndpointServiceName">
            <summary>
            Gets and sets the property VpcEndpointServiceName. 
            <para>
            The Amazon VPC endpoint service used to communicate with the external key store proxy.
            This field appears only when the external key store proxy uses an Amazon VPC endpoint
            service to communicate with KMS.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksProxyIncorrectAuthenticationCredentialException">
            <summary>
            The request was rejected because the proxy credentials failed to authenticate to the
            specified external key store proxy. The specified external key store proxy rejected
            a status request from KMS due to invalid credentials. This can indicate an error in
            the credentials or in the identification of the external key store proxy.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyIncorrectAuthenticationCredentialException.#ctor(System.String)">
            <summary>
            Constructs a new XksProxyIncorrectAuthenticationCredentialException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyIncorrectAuthenticationCredentialException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of XksProxyIncorrectAuthenticationCredentialException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyIncorrectAuthenticationCredentialException.#ctor(System.Exception)">
            <summary>
            Construct instance of XksProxyIncorrectAuthenticationCredentialException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyIncorrectAuthenticationCredentialException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyIncorrectAuthenticationCredentialException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyIncorrectAuthenticationCredentialException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyIncorrectAuthenticationCredentialException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksProxyInvalidConfigurationException">
            <summary>
            The request was rejected because the external key store proxy is not configured correctly.
            To identify the cause, see the error message that accompanies the exception.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyInvalidConfigurationException.#ctor(System.String)">
            <summary>
            Constructs a new XksProxyInvalidConfigurationException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyInvalidConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of XksProxyInvalidConfigurationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyInvalidConfigurationException.#ctor(System.Exception)">
            <summary>
            Construct instance of XksProxyInvalidConfigurationException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyInvalidConfigurationException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyInvalidConfigurationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyInvalidConfigurationException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyInvalidConfigurationException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksProxyInvalidResponseException">
            <summary>
            KMS cannot interpret the response it received from the external key store proxy. The
            problem might be a poorly constructed response, but it could also be a transient network
            issue. If you see this error repeatedly, report it to the proxy vendor.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyInvalidResponseException.#ctor(System.String)">
            <summary>
            Constructs a new XksProxyInvalidResponseException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyInvalidResponseException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of XksProxyInvalidResponseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyInvalidResponseException.#ctor(System.Exception)">
            <summary>
            Construct instance of XksProxyInvalidResponseException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyInvalidResponseException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyInvalidResponseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyInvalidResponseException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyInvalidResponseException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksProxyUriEndpointInUseException">
            <summary>
            The request was rejected because the <c>XksProxyUriEndpoint</c> is already associated
            with another external key store in this Amazon Web Services Region. To identify the
            cause, see the error message that accompanies the exception.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriEndpointInUseException.#ctor(System.String)">
            <summary>
            Constructs a new XksProxyUriEndpointInUseException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriEndpointInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of XksProxyUriEndpointInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriEndpointInUseException.#ctor(System.Exception)">
            <summary>
            Construct instance of XksProxyUriEndpointInUseException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriEndpointInUseException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyUriEndpointInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriEndpointInUseException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyUriEndpointInUseException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksProxyUriInUseException">
            <summary>
            The request was rejected because the concatenation of the <c>XksProxyUriEndpoint</c>
            and <c>XksProxyUriPath</c> is already associated with another external key store in
            this Amazon Web Services Region. Each external key store in a Region must use a unique
            external key store proxy API address.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriInUseException.#ctor(System.String)">
            <summary>
            Constructs a new XksProxyUriInUseException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of XksProxyUriInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriInUseException.#ctor(System.Exception)">
            <summary>
            Construct instance of XksProxyUriInUseException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriInUseException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyUriInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriInUseException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyUriInUseException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksProxyUriUnreachableException">
            <summary>
            KMS was unable to reach the specified <c>XksProxyUriPath</c>. The path must be reachable
            before you create the external key store or update its settings.
            
             
            <para>
            This exception is also thrown when the external key store proxy response to a <c>GetHealthStatus</c>
            request indicates that all external key manager instances are unavailable.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriUnreachableException.#ctor(System.String)">
            <summary>
            Constructs a new XksProxyUriUnreachableException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriUnreachableException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of XksProxyUriUnreachableException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriUnreachableException.#ctor(System.Exception)">
            <summary>
            Construct instance of XksProxyUriUnreachableException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriUnreachableException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyUriUnreachableException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyUriUnreachableException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyUriUnreachableException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInUseException">
            <summary>
            The request was rejected because the specified Amazon VPC endpoint service is already
            associated with another external key store in this Amazon Web Services Region. Each
            external key store in a Region must use a different Amazon VPC endpoint service.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInUseException.#ctor(System.String)">
            <summary>
            Constructs a new XksProxyVpcEndpointServiceInUseException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of XksProxyVpcEndpointServiceInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInUseException.#ctor(System.Exception)">
            <summary>
            Construct instance of XksProxyVpcEndpointServiceInUseException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInUseException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyVpcEndpointServiceInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInUseException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyVpcEndpointServiceInUseException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInvalidConfigurationException">
            <summary>
            The request was rejected because the Amazon VPC endpoint service configuration does
            not fulfill the requirements for an external key store. To identify the cause, see
            the error message that accompanies the exception and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/vpc-connectivity.html#xks-vpc-requirements">review
            the requirements</a> for Amazon VPC endpoint service connectivity for an external
            key store.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInvalidConfigurationException.#ctor(System.String)">
            <summary>
            Constructs a new XksProxyVpcEndpointServiceInvalidConfigurationException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInvalidConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of XksProxyVpcEndpointServiceInvalidConfigurationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInvalidConfigurationException.#ctor(System.Exception)">
            <summary>
            Construct instance of XksProxyVpcEndpointServiceInvalidConfigurationException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInvalidConfigurationException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyVpcEndpointServiceInvalidConfigurationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceInvalidConfigurationException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyVpcEndpointServiceInvalidConfigurationException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceNotFoundException">
            <summary>
            The request was rejected because KMS could not find the specified VPC endpoint service.
            Use <a>DescribeCustomKeyStores</a> to verify the VPC endpoint service name for the
            external key store. Also, confirm that the <c>Allow principals</c> list for the VPC
            endpoint service includes the KMS service principal for the Region, such as <c>cks.kms.us-east-1.amazonaws.com</c>.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new XksProxyVpcEndpointServiceNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of XksProxyVpcEndpointServiceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of XksProxyVpcEndpointServiceNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyVpcEndpointServiceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.XksProxyVpcEndpointServiceNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of XksProxyVpcEndpointServiceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.DescribeCustomKeyStoresPaginator">
            <summary>
            Base class for DescribeCustomKeyStores paginators.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DescribeCustomKeyStoresPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.DescribeCustomKeyStoresPaginator.CustomKeyStores">
            <summary>
            Enumerable containing all of the CustomKeyStores
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.IDescribeCustomKeyStoresPaginator">
             <summary>
             Paginator for the DescribeCustomKeyStores operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IDescribeCustomKeyStoresPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IDescribeCustomKeyStoresPaginator.CustomKeyStores">
            <summary>
            Enumerable containing all of the CustomKeyStores
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.IKeyManagementServicePaginatorFactory">
             <summary>
             Paginators for the KeyManagementService service
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IKeyManagementServicePaginatorFactory.DescribeCustomKeyStores(Amazon.KeyManagementService.Model.DescribeCustomKeyStoresRequest)">
             <summary>
             Paginator for DescribeCustomKeyStores operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IKeyManagementServicePaginatorFactory.ListAliases(Amazon.KeyManagementService.Model.ListAliasesRequest)">
             <summary>
             Paginator for ListAliases operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IKeyManagementServicePaginatorFactory.ListGrants(Amazon.KeyManagementService.Model.ListGrantsRequest)">
             <summary>
             Paginator for ListGrants operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IKeyManagementServicePaginatorFactory.ListKeyPolicies(Amazon.KeyManagementService.Model.ListKeyPoliciesRequest)">
             <summary>
             Paginator for ListKeyPolicies operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IKeyManagementServicePaginatorFactory.ListKeyRotations(Amazon.KeyManagementService.Model.ListKeyRotationsRequest)">
             <summary>
             Paginator for ListKeyRotations operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IKeyManagementServicePaginatorFactory.ListKeys(Amazon.KeyManagementService.Model.ListKeysRequest)">
             <summary>
             Paginator for ListKeys operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IKeyManagementServicePaginatorFactory.ListResourceTags(Amazon.KeyManagementService.Model.ListResourceTagsRequest)">
             <summary>
             Paginator for ListResourceTags operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.IKeyManagementServicePaginatorFactory.ListRetirableGrants(Amazon.KeyManagementService.Model.ListRetirableGrantsRequest)">
             <summary>
             Paginator for ListRetirableGrants operation
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.IListAliasesPaginator">
             <summary>
             Paginator for the ListAliases operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListAliasesPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListAliasesPaginator.Aliases">
            <summary>
            Enumerable containing all of the Aliases
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.IListGrantsPaginator">
             <summary>
             Paginator for the ListGrants operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListGrantsPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListGrantsPaginator.Grants">
            <summary>
            Enumerable containing all of the Grants
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.IListKeyPoliciesPaginator">
             <summary>
             Paginator for the ListKeyPolicies operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListKeyPoliciesPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListKeyPoliciesPaginator.PolicyNames">
            <summary>
            Enumerable containing all of the PolicyNames
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.IListKeyRotationsPaginator">
             <summary>
             Paginator for the ListKeyRotations operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListKeyRotationsPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListKeyRotationsPaginator.Rotations">
            <summary>
            Enumerable containing all of the Rotations
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.IListKeysPaginator">
             <summary>
             Paginator for the ListKeys operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListKeysPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListKeysPaginator.Keys">
            <summary>
            Enumerable containing all of the Keys
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.IListResourceTagsPaginator">
             <summary>
             Paginator for the ListResourceTags operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListResourceTagsPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListResourceTagsPaginator.Tags">
            <summary>
            Enumerable containing all of the Tags
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.IListRetirableGrantsPaginator">
             <summary>
             Paginator for the ListRetirableGrants operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListRetirableGrantsPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.IListRetirableGrantsPaginator.Grants">
            <summary>
            Enumerable containing all of the Grants
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.KeyManagementServicePaginatorFactory">
             <summary>
             Paginators for the KeyManagementService service
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyManagementServicePaginatorFactory.DescribeCustomKeyStores(Amazon.KeyManagementService.Model.DescribeCustomKeyStoresRequest)">
             <summary>
             Paginator for DescribeCustomKeyStores operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyManagementServicePaginatorFactory.ListAliases(Amazon.KeyManagementService.Model.ListAliasesRequest)">
             <summary>
             Paginator for ListAliases operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyManagementServicePaginatorFactory.ListGrants(Amazon.KeyManagementService.Model.ListGrantsRequest)">
             <summary>
             Paginator for ListGrants operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyManagementServicePaginatorFactory.ListKeyPolicies(Amazon.KeyManagementService.Model.ListKeyPoliciesRequest)">
             <summary>
             Paginator for ListKeyPolicies operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyManagementServicePaginatorFactory.ListKeyRotations(Amazon.KeyManagementService.Model.ListKeyRotationsRequest)">
             <summary>
             Paginator for ListKeyRotations operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyManagementServicePaginatorFactory.ListKeys(Amazon.KeyManagementService.Model.ListKeysRequest)">
             <summary>
             Paginator for ListKeys operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyManagementServicePaginatorFactory.ListResourceTags(Amazon.KeyManagementService.Model.ListResourceTagsRequest)">
             <summary>
             Paginator for ListResourceTags operation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.Model.KeyManagementServicePaginatorFactory.ListRetirableGrants(Amazon.KeyManagementService.Model.ListRetirableGrantsRequest)">
             <summary>
             Paginator for ListRetirableGrants operation
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListAliasesPaginator">
            <summary>
            Base class for ListAliases paginators.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListAliasesPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListAliasesPaginator.Aliases">
            <summary>
            Enumerable containing all of the Aliases
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListGrantsPaginator">
            <summary>
            Base class for ListGrants paginators.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListGrantsPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListGrantsPaginator.Grants">
            <summary>
            Enumerable containing all of the Grants
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListKeyPoliciesPaginator">
            <summary>
            Base class for ListKeyPolicies paginators.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyPoliciesPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyPoliciesPaginator.PolicyNames">
            <summary>
            Enumerable containing all of the PolicyNames
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListKeyRotationsPaginator">
            <summary>
            Base class for ListKeyRotations paginators.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyRotationsPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeyRotationsPaginator.Rotations">
            <summary>
            Enumerable containing all of the Rotations
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListKeysPaginator">
            <summary>
            Base class for ListKeys paginators.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeysPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListKeysPaginator.Keys">
            <summary>
            Enumerable containing all of the Keys
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListResourceTagsPaginator">
            <summary>
            Base class for ListResourceTags paginators.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListResourceTagsPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListResourceTagsPaginator.Tags">
            <summary>
            Enumerable containing all of the Tags
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.Model.ListRetirableGrantsPaginator">
            <summary>
            Base class for ListRetirableGrants paginators.
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListRetirableGrantsPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.KeyManagementService.Model.ListRetirableGrantsPaginator.Grants">
            <summary>
            Enumerable containing all of the Grants
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.AmazonKeyManagementServiceRequest">
            <summary>
            Base class for KeyManagementService operation requests.
            </summary>
        </member>
        <member name="T:Amazon.KeyManagementService.AlgorithmSpec">
            <summary>
            Constants used for properties of type AlgorithmSpec.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.AlgorithmSpec.RSA_AES_KEY_WRAP_SHA_1">
            <summary>
            Constant RSA_AES_KEY_WRAP_SHA_1 for AlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.AlgorithmSpec.RSA_AES_KEY_WRAP_SHA_256">
            <summary>
            Constant RSA_AES_KEY_WRAP_SHA_256 for AlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.AlgorithmSpec.RSAES_OAEP_SHA_1">
            <summary>
            Constant RSAES_OAEP_SHA_1 for AlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.AlgorithmSpec.RSAES_OAEP_SHA_256">
            <summary>
            Constant RSAES_OAEP_SHA_256 for AlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.AlgorithmSpec.RSAES_PKCS1_V1_5">
            <summary>
            Constant RSAES_PKCS1_V1_5 for AlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.AlgorithmSpec.SM2PKE">
            <summary>
            Constant SM2PKE for AlgorithmSpec
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.AlgorithmSpec.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.AlgorithmSpec.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.AlgorithmSpec.op_Implicit(System.String)~Amazon.KeyManagementService.AlgorithmSpec">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.ConnectionErrorCodeType">
            <summary>
            Constants used for properties of type ConnectionErrorCodeType.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.CLUSTER_NOT_FOUND">
            <summary>
            Constant CLUSTER_NOT_FOUND for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.INSUFFICIENT_CLOUDHSM_HSMS">
            <summary>
            Constant INSUFFICIENT_CLOUDHSM_HSMS for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET">
            <summary>
            Constant INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.INTERNAL_ERROR">
            <summary>
            Constant INTERNAL_ERROR for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.INVALID_CREDENTIALS">
            <summary>
            Constant INVALID_CREDENTIALS for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.NETWORK_ERRORS">
            <summary>
            Constant NETWORK_ERRORS for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.SUBNET_NOT_FOUND">
            <summary>
            Constant SUBNET_NOT_FOUND for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.USER_LOCKED_OUT">
            <summary>
            Constant USER_LOCKED_OUT for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.USER_LOGGED_IN">
            <summary>
            Constant USER_LOGGED_IN for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.USER_NOT_FOUND">
            <summary>
            Constant USER_NOT_FOUND for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.XKS_PROXY_ACCESS_DENIED">
            <summary>
            Constant XKS_PROXY_ACCESS_DENIED for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.XKS_PROXY_INVALID_CONFIGURATION">
            <summary>
            Constant XKS_PROXY_INVALID_CONFIGURATION for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.XKS_PROXY_INVALID_RESPONSE">
            <summary>
            Constant XKS_PROXY_INVALID_RESPONSE for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.XKS_PROXY_INVALID_TLS_CONFIGURATION">
            <summary>
            Constant XKS_PROXY_INVALID_TLS_CONFIGURATION for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.XKS_PROXY_NOT_REACHABLE">
            <summary>
            Constant XKS_PROXY_NOT_REACHABLE for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.XKS_PROXY_TIMED_OUT">
            <summary>
            Constant XKS_PROXY_TIMED_OUT for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION">
            <summary>
            Constant XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionErrorCodeType.XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND">
            <summary>
            Constant XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND for ConnectionErrorCodeType
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.ConnectionErrorCodeType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.ConnectionErrorCodeType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.ConnectionErrorCodeType.op_Implicit(System.String)~Amazon.KeyManagementService.ConnectionErrorCodeType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.ConnectionStateType">
            <summary>
            Constants used for properties of type ConnectionStateType.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionStateType.CONNECTED">
            <summary>
            Constant CONNECTED for ConnectionStateType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionStateType.CONNECTING">
            <summary>
            Constant CONNECTING for ConnectionStateType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionStateType.DISCONNECTED">
            <summary>
            Constant DISCONNECTED for ConnectionStateType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionStateType.DISCONNECTING">
            <summary>
            Constant DISCONNECTING for ConnectionStateType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ConnectionStateType.FAILED">
            <summary>
            Constant FAILED for ConnectionStateType
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.ConnectionStateType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.ConnectionStateType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.ConnectionStateType.op_Implicit(System.String)~Amazon.KeyManagementService.ConnectionStateType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.CustomerMasterKeySpec">
            <summary>
            Constants used for properties of type CustomerMasterKeySpec.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.ECC_NIST_P256">
            <summary>
            Constant ECC_NIST_P256 for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.ECC_NIST_P384">
            <summary>
            Constant ECC_NIST_P384 for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.ECC_NIST_P521">
            <summary>
            Constant ECC_NIST_P521 for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.ECC_SECG_P256K1">
            <summary>
            Constant ECC_SECG_P256K1 for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.HMAC_224">
            <summary>
            Constant HMAC_224 for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.HMAC_256">
            <summary>
            Constant HMAC_256 for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.HMAC_384">
            <summary>
            Constant HMAC_384 for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.HMAC_512">
            <summary>
            Constant HMAC_512 for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.RSA_2048">
            <summary>
            Constant RSA_2048 for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.RSA_3072">
            <summary>
            Constant RSA_3072 for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.RSA_4096">
            <summary>
            Constant RSA_4096 for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.SM2">
            <summary>
            Constant SM2 for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomerMasterKeySpec.SYMMETRIC_DEFAULT">
            <summary>
            Constant SYMMETRIC_DEFAULT for CustomerMasterKeySpec
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.CustomerMasterKeySpec.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.CustomerMasterKeySpec.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.CustomerMasterKeySpec.op_Implicit(System.String)~Amazon.KeyManagementService.CustomerMasterKeySpec">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.CustomKeyStoreType">
            <summary>
            Constants used for properties of type CustomKeyStoreType.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomKeyStoreType.AWS_CLOUDHSM">
            <summary>
            Constant AWS_CLOUDHSM for CustomKeyStoreType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.CustomKeyStoreType.EXTERNAL_KEY_STORE">
            <summary>
            Constant EXTERNAL_KEY_STORE for CustomKeyStoreType
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.CustomKeyStoreType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.CustomKeyStoreType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.CustomKeyStoreType.op_Implicit(System.String)~Amazon.KeyManagementService.CustomKeyStoreType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.DataKeyPairSpec">
            <summary>
            Constants used for properties of type DataKeyPairSpec.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.DataKeyPairSpec.ECC_NIST_P256">
            <summary>
            Constant ECC_NIST_P256 for DataKeyPairSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.DataKeyPairSpec.ECC_NIST_P384">
            <summary>
            Constant ECC_NIST_P384 for DataKeyPairSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.DataKeyPairSpec.ECC_NIST_P521">
            <summary>
            Constant ECC_NIST_P521 for DataKeyPairSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.DataKeyPairSpec.ECC_SECG_P256K1">
            <summary>
            Constant ECC_SECG_P256K1 for DataKeyPairSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.DataKeyPairSpec.RSA_2048">
            <summary>
            Constant RSA_2048 for DataKeyPairSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.DataKeyPairSpec.RSA_3072">
            <summary>
            Constant RSA_3072 for DataKeyPairSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.DataKeyPairSpec.RSA_4096">
            <summary>
            Constant RSA_4096 for DataKeyPairSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.DataKeyPairSpec.SM2">
            <summary>
            Constant SM2 for DataKeyPairSpec
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.DataKeyPairSpec.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.DataKeyPairSpec.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.DataKeyPairSpec.op_Implicit(System.String)~Amazon.KeyManagementService.DataKeyPairSpec">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.DataKeySpec">
            <summary>
            Constants used for properties of type DataKeySpec.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.DataKeySpec.AES_128">
            <summary>
            Constant AES_128 for DataKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.DataKeySpec.AES_256">
            <summary>
            Constant AES_256 for DataKeySpec
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.DataKeySpec.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.DataKeySpec.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.DataKeySpec.op_Implicit(System.String)~Amazon.KeyManagementService.DataKeySpec">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.EncryptionAlgorithmSpec">
            <summary>
            Constants used for properties of type EncryptionAlgorithmSpec.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.EncryptionAlgorithmSpec.RSAES_OAEP_SHA_1">
            <summary>
            Constant RSAES_OAEP_SHA_1 for EncryptionAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.EncryptionAlgorithmSpec.RSAES_OAEP_SHA_256">
            <summary>
            Constant RSAES_OAEP_SHA_256 for EncryptionAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.EncryptionAlgorithmSpec.SM2PKE">
            <summary>
            Constant SM2PKE for EncryptionAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.EncryptionAlgorithmSpec.SYMMETRIC_DEFAULT">
            <summary>
            Constant SYMMETRIC_DEFAULT for EncryptionAlgorithmSpec
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.EncryptionAlgorithmSpec.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.EncryptionAlgorithmSpec.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.EncryptionAlgorithmSpec.op_Implicit(System.String)~Amazon.KeyManagementService.EncryptionAlgorithmSpec">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.ExpirationModelType">
            <summary>
            Constants used for properties of type ExpirationModelType.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ExpirationModelType.KEY_MATERIAL_DOES_NOT_EXPIRE">
            <summary>
            Constant KEY_MATERIAL_DOES_NOT_EXPIRE for ExpirationModelType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.ExpirationModelType.KEY_MATERIAL_EXPIRES">
            <summary>
            Constant KEY_MATERIAL_EXPIRES for ExpirationModelType
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.ExpirationModelType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.ExpirationModelType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.ExpirationModelType.op_Implicit(System.String)~Amazon.KeyManagementService.ExpirationModelType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.GrantOperation">
            <summary>
            Constants used for properties of type GrantOperation.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.CreateGrant">
            <summary>
            Constant CreateGrant for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.Decrypt">
            <summary>
            Constant Decrypt for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.DeriveSharedSecret">
            <summary>
            Constant DeriveSharedSecret for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.DescribeKey">
            <summary>
            Constant DescribeKey for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.Encrypt">
            <summary>
            Constant Encrypt for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.GenerateDataKey">
            <summary>
            Constant GenerateDataKey for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.GenerateDataKeyPair">
            <summary>
            Constant GenerateDataKeyPair for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.GenerateDataKeyPairWithoutPlaintext">
            <summary>
            Constant GenerateDataKeyPairWithoutPlaintext for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.GenerateDataKeyWithoutPlaintext">
            <summary>
            Constant GenerateDataKeyWithoutPlaintext for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.GenerateMac">
            <summary>
            Constant GenerateMac for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.GetPublicKey">
            <summary>
            Constant GetPublicKey for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.ReEncryptFrom">
            <summary>
            Constant ReEncryptFrom for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.ReEncryptTo">
            <summary>
            Constant ReEncryptTo for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.RetireGrant">
            <summary>
            Constant RetireGrant for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.Sign">
            <summary>
            Constant Sign for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.Verify">
            <summary>
            Constant Verify for GrantOperation
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.GrantOperation.VerifyMac">
            <summary>
            Constant VerifyMac for GrantOperation
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.GrantOperation.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.GrantOperation.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.GrantOperation.op_Implicit(System.String)~Amazon.KeyManagementService.GrantOperation">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.KeyAgreementAlgorithmSpec">
            <summary>
            Constants used for properties of type KeyAgreementAlgorithmSpec.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyAgreementAlgorithmSpec.ECDH">
            <summary>
            Constant ECDH for KeyAgreementAlgorithmSpec
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyAgreementAlgorithmSpec.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyAgreementAlgorithmSpec.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyAgreementAlgorithmSpec.op_Implicit(System.String)~Amazon.KeyManagementService.KeyAgreementAlgorithmSpec">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.KeyEncryptionMechanism">
            <summary>
            Constants used for properties of type KeyEncryptionMechanism.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyEncryptionMechanism.RSAES_OAEP_SHA_256">
            <summary>
            Constant RSAES_OAEP_SHA_256 for KeyEncryptionMechanism
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyEncryptionMechanism.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyEncryptionMechanism.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyEncryptionMechanism.op_Implicit(System.String)~Amazon.KeyManagementService.KeyEncryptionMechanism">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.KeyManagerType">
            <summary>
            Constants used for properties of type KeyManagerType.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyManagerType.AWS">
            <summary>
            Constant AWS for KeyManagerType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyManagerType.CUSTOMER">
            <summary>
            Constant CUSTOMER for KeyManagerType
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyManagerType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyManagerType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyManagerType.op_Implicit(System.String)~Amazon.KeyManagementService.KeyManagerType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.KeySpec">
            <summary>
            Constants used for properties of type KeySpec.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.ECC_NIST_P256">
            <summary>
            Constant ECC_NIST_P256 for KeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.ECC_NIST_P384">
            <summary>
            Constant ECC_NIST_P384 for KeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.ECC_NIST_P521">
            <summary>
            Constant ECC_NIST_P521 for KeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.ECC_SECG_P256K1">
            <summary>
            Constant ECC_SECG_P256K1 for KeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.HMAC_224">
            <summary>
            Constant HMAC_224 for KeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.HMAC_256">
            <summary>
            Constant HMAC_256 for KeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.HMAC_384">
            <summary>
            Constant HMAC_384 for KeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.HMAC_512">
            <summary>
            Constant HMAC_512 for KeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.RSA_2048">
            <summary>
            Constant RSA_2048 for KeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.RSA_3072">
            <summary>
            Constant RSA_3072 for KeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.RSA_4096">
            <summary>
            Constant RSA_4096 for KeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.SM2">
            <summary>
            Constant SM2 for KeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeySpec.SYMMETRIC_DEFAULT">
            <summary>
            Constant SYMMETRIC_DEFAULT for KeySpec
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.KeySpec.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.KeySpec.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.KeySpec.op_Implicit(System.String)~Amazon.KeyManagementService.KeySpec">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.KeyState">
            <summary>
            Constants used for properties of type KeyState.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyState.Creating">
            <summary>
            Constant Creating for KeyState
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyState.Disabled">
            <summary>
            Constant Disabled for KeyState
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyState.Enabled">
            <summary>
            Constant Enabled for KeyState
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyState.PendingDeletion">
            <summary>
            Constant PendingDeletion for KeyState
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyState.PendingImport">
            <summary>
            Constant PendingImport for KeyState
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyState.PendingReplicaDeletion">
            <summary>
            Constant PendingReplicaDeletion for KeyState
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyState.Unavailable">
            <summary>
            Constant Unavailable for KeyState
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyState.Updating">
            <summary>
            Constant Updating for KeyState
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyState.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyState.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyState.op_Implicit(System.String)~Amazon.KeyManagementService.KeyState">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.KeyUsageType">
            <summary>
            Constants used for properties of type KeyUsageType.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyUsageType.ENCRYPT_DECRYPT">
            <summary>
            Constant ENCRYPT_DECRYPT for KeyUsageType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyUsageType.GENERATE_VERIFY_MAC">
            <summary>
            Constant GENERATE_VERIFY_MAC for KeyUsageType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyUsageType.KEY_AGREEMENT">
            <summary>
            Constant KEY_AGREEMENT for KeyUsageType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.KeyUsageType.SIGN_VERIFY">
            <summary>
            Constant SIGN_VERIFY for KeyUsageType
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyUsageType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyUsageType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.KeyUsageType.op_Implicit(System.String)~Amazon.KeyManagementService.KeyUsageType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.MacAlgorithmSpec">
            <summary>
            Constants used for properties of type MacAlgorithmSpec.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.MacAlgorithmSpec.HMAC_SHA_224">
            <summary>
            Constant HMAC_SHA_224 for MacAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.MacAlgorithmSpec.HMAC_SHA_256">
            <summary>
            Constant HMAC_SHA_256 for MacAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.MacAlgorithmSpec.HMAC_SHA_384">
            <summary>
            Constant HMAC_SHA_384 for MacAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.MacAlgorithmSpec.HMAC_SHA_512">
            <summary>
            Constant HMAC_SHA_512 for MacAlgorithmSpec
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.MacAlgorithmSpec.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.MacAlgorithmSpec.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.MacAlgorithmSpec.op_Implicit(System.String)~Amazon.KeyManagementService.MacAlgorithmSpec">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.MessageType">
            <summary>
            Constants used for properties of type MessageType.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.MessageType.DIGEST">
            <summary>
            Constant DIGEST for MessageType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.MessageType.RAW">
            <summary>
            Constant RAW for MessageType
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.MessageType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.MessageType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.MessageType.op_Implicit(System.String)~Amazon.KeyManagementService.MessageType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.MultiRegionKeyType">
            <summary>
            Constants used for properties of type MultiRegionKeyType.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.MultiRegionKeyType.PRIMARY">
            <summary>
            Constant PRIMARY for MultiRegionKeyType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.MultiRegionKeyType.REPLICA">
            <summary>
            Constant REPLICA for MultiRegionKeyType
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.MultiRegionKeyType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.MultiRegionKeyType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.MultiRegionKeyType.op_Implicit(System.String)~Amazon.KeyManagementService.MultiRegionKeyType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.OriginType">
            <summary>
            Constants used for properties of type OriginType.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.OriginType.AWS_CLOUDHSM">
            <summary>
            Constant AWS_CLOUDHSM for OriginType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.OriginType.AWS_KMS">
            <summary>
            Constant AWS_KMS for OriginType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.OriginType.EXTERNAL">
            <summary>
            Constant EXTERNAL for OriginType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.OriginType.EXTERNAL_KEY_STORE">
            <summary>
            Constant EXTERNAL_KEY_STORE for OriginType
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.OriginType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.OriginType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.OriginType.op_Implicit(System.String)~Amazon.KeyManagementService.OriginType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.RotationType">
            <summary>
            Constants used for properties of type RotationType.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.RotationType.AUTOMATIC">
            <summary>
            Constant AUTOMATIC for RotationType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.RotationType.ON_DEMAND">
            <summary>
            Constant ON_DEMAND for RotationType
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.RotationType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.RotationType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.RotationType.op_Implicit(System.String)~Amazon.KeyManagementService.RotationType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.SigningAlgorithmSpec">
            <summary>
            Constants used for properties of type SigningAlgorithmSpec.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.SigningAlgorithmSpec.ECDSA_SHA_256">
            <summary>
            Constant ECDSA_SHA_256 for SigningAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.SigningAlgorithmSpec.ECDSA_SHA_384">
            <summary>
            Constant ECDSA_SHA_384 for SigningAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.SigningAlgorithmSpec.ECDSA_SHA_512">
            <summary>
            Constant ECDSA_SHA_512 for SigningAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.SigningAlgorithmSpec.RSASSA_PKCS1_V1_5_SHA_256">
            <summary>
            Constant RSASSA_PKCS1_V1_5_SHA_256 for SigningAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.SigningAlgorithmSpec.RSASSA_PKCS1_V1_5_SHA_384">
            <summary>
            Constant RSASSA_PKCS1_V1_5_SHA_384 for SigningAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.SigningAlgorithmSpec.RSASSA_PKCS1_V1_5_SHA_512">
            <summary>
            Constant RSASSA_PKCS1_V1_5_SHA_512 for SigningAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.SigningAlgorithmSpec.RSASSA_PSS_SHA_256">
            <summary>
            Constant RSASSA_PSS_SHA_256 for SigningAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.SigningAlgorithmSpec.RSASSA_PSS_SHA_384">
            <summary>
            Constant RSASSA_PSS_SHA_384 for SigningAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.SigningAlgorithmSpec.RSASSA_PSS_SHA_512">
            <summary>
            Constant RSASSA_PSS_SHA_512 for SigningAlgorithmSpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.SigningAlgorithmSpec.SM2DSA">
            <summary>
            Constant SM2DSA for SigningAlgorithmSpec
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.SigningAlgorithmSpec.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.SigningAlgorithmSpec.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.SigningAlgorithmSpec.op_Implicit(System.String)~Amazon.KeyManagementService.SigningAlgorithmSpec">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.WrappingKeySpec">
            <summary>
            Constants used for properties of type WrappingKeySpec.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.WrappingKeySpec.RSA_2048">
            <summary>
            Constant RSA_2048 for WrappingKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.WrappingKeySpec.RSA_3072">
            <summary>
            Constant RSA_3072 for WrappingKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.WrappingKeySpec.RSA_4096">
            <summary>
            Constant RSA_4096 for WrappingKeySpec
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.WrappingKeySpec.SM2">
            <summary>
            Constant SM2 for WrappingKeySpec
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.WrappingKeySpec.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.WrappingKeySpec.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.WrappingKeySpec.op_Implicit(System.String)~Amazon.KeyManagementService.WrappingKeySpec">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KeyManagementService.XksProxyConnectivityType">
            <summary>
            Constants used for properties of type XksProxyConnectivityType.
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.XksProxyConnectivityType.PUBLIC_ENDPOINT">
            <summary>
            Constant PUBLIC_ENDPOINT for XksProxyConnectivityType
            </summary>
        </member>
        <member name="F:Amazon.KeyManagementService.XksProxyConnectivityType.VPC_ENDPOINT_SERVICE">
            <summary>
            Constant VPC_ENDPOINT_SERVICE for XksProxyConnectivityType
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.XksProxyConnectivityType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KeyManagementService.XksProxyConnectivityType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KeyManagementService.XksProxyConnectivityType.op_Implicit(System.String)~Amazon.KeyManagementService.XksProxyConnectivityType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
    </members>
</doc>
